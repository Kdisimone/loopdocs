{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Loop \u2301 Introduction \u2301 What is Loop? Loop is an app you build yourself and load on your iPhone (or iPod) Loop assists in the many insulin dosing decisions people with diabetes face every day Loop uses a compatible continuous glucose monitor (CGM) and is paired using the RileyLink protocol with your compatible pump Loop works with older Medtronic pumps and the Eros (not Dash) Omnipods Loop requires a RileyLink compatible device to communicate between the phone and pump What CGMs work with Loop? The Loop app works with Dexcom\u2019s G4, G5 and G6 CGM. For Medtronic users, Loop also works with first generation Guardian and Guardian 2 Medtronic sensors compatible with the 522, 722, 523 and 723 pumps. There are other versions of Loop available that may work for you if you are not using one of these specific CGMs. These other versions (known as forks) are created by Loop users and are maintained by them. This document does not cover those other CGM options, but check out the Community Information below. Important Please understand that this project: Is highly experimental Is not approved for therapy You take full responsibility for building and running this system and do so at your own risk. The Loop algorithm on your phone predicts future glucose based on carbohydrate intake, insulin on board, and current CGM readings. You enter your own settings for desired correction range, basal schedule, insulin sensitivity factor (ISF), carbohydrate ratio (CR) and the type of insulin you are using. The glucose predictions, using your settings and meal entries, provide Loop with the information needed to recommend a bolus or temporary basal rate to attain a targeted glucose range in the future. The system can either operate \u201copen-loop\u201d where insulin delivery recommendations must be enacted by the user or \u201cclosed-loop\u201d where modifications to insulin delivery are enacted automatically. You may be saying, \"I can't build an app.\" But the wonderful volunteers in this community prepared this amazing website with step-by-step instructions containing pictures and arrows (say thank you to Katie DiSimone). The website is updated by more volunteers as improvements are made to the Loop app and when Apple makes changes to its iOS, Xcode and macOS environment. This language may sound scary, but it will become easier. Most people who Loop want to keep looping, so they learn the terminology and how to reach out to mentors for help. Once you've built the app, plan to learn to use it in stages. First, run \u201copen loop\u201d to familiarize yourself with Loop\u2019s operation. This allows you to understand why Loop is making certain recommendations and determine if you need to adjust your Loop settings. One thing many new users ask is why do my settings need to be different for Loop? The main reason is that Loop uses a realistic insulin model including the long tail of residual insulin activity - and updates its calculations every 5 minutes. This is a different way of thinking about insulin delivery. Other strategies, e.g., assuming a linear fall-off model for insulin activity, correcting 2 or 3 hours after a meal, trading a higher basal rate to avoid worrying about snacks, etc. will not work. There is a whole section on settings - just giving you a heads up. When you progress to \u201cclosed-loop\u201d, do so safely by starting with conservative Correction Ranges and Delivery Limits and only progress to more aggressive settings after several days of no lows. Please ask questions at this point about why Loop is making the recommendations it does. It should be similar to the therapy decisions you would make yourself. If the recommendations it makes are different than you would make, try to figure out why. Hint - it is probably your settings. How to Use These Docs \u2301 Use the navigation menu at the top of the screen Most menu items are only one level deep - so you see all the underlying pages by clicking on the menu name Operate has a few top-level items plus 4 drop-down menus; the easiest way to go through these pages is hitting Next or the letter n Operate->How To Use Loop App Operate->Looping Tips Operate->Algorithm Operate->Troubleshoot Use the Table of Contents for the current page, which is displayed on the left side of the screen On mobile devices, at the top of the page, tap the down arrow on the upper left to display the TOC, tap again to dismiss it Read (or at least skim) pages sequentially the first time through Type the letter n for next and p for previous to navigate Search for topics by clicking the Search icon or typing the letter s on your keyboard As you type in the search box, suggested section headings with the first few rows of content will show up below the search bar Scroll down and select the Heading Title of the section of interest If you hit return, the Search display vanishes There is another website, Looptips , you should review While these articles were written and illustrated with an earlier version of Loop, they are well worth reading This link is repeated on the Operate->Looping Tips->Loop Tips page Stay in the Loop! \u2301 There are a number of social media options. (Read the directions on each of these - some ask you to answer questions - please do so): The fastest way to get help (with the most mentors) is The Looped Facebook Group . There is another group, Loop and Learn, that has a lot of Loop-centric information, a T1D Speaker Series covering many topics of general diabetes interest as well as Loop-specific chats, alerts whenever there is an update to iOS and Xcode, Quick Tips and articles written by mentors providing their Loop experience. LoopandLearn Facebook Group LoopandLearn Website Both the Looped and LoopandLearn Facebook groups provide support for some Loop forks, which support other CGM, as well as other DIY closed loop options. Many Loopers use the Nightscout tool to assist them in monitoring their settings in Loop. The fastest Nightscout help can be found in the original #wearenotwaiting community CGM in the Cloud . For those not interested in Facebook or interested in what is coming next for Loop, join Loop Zulipchat and be sure to subscribe to all the streams or you'll miss some interesting conversations. Note - please only post a question in one group on Facebook or under one stream on zulipchat - many mentors monitor more than one place. If you don't hear an answer in 24 hours, then try a different place. On Facebook, leave your question posted after you've gotten an answer, but edit the original post to say it's been resolved. This prevents mentors from needing to read all the answers to see if you've been helped. Others may have the same question and will read your post. For those interested in delving deeper, see the next few sections. Development History \u2301 Loop is an open-source, shared project. Read about the early history of Loop development: History of Loop and LoopKit , written by Loop developer Nate Racklyeft Read about the early days and the many advances brought about by the greater Diabetes Community of people who are not waiting: The Artificial Pancreas Book written by Dana Lewis and check out her website DIYPS Read about how hard it was to get a new insulin pump (Omnipod) to work with Loop: Insulin Pumps, Decapped Chips and Software Defined Radios written by Loop developer Pete Schwamb and Deep Dip Teardown of Tubeless Insulin Pump by Sergei Skorobogatov The project continues to be a labor-of-love by a community of users; maintained and improved by volunteers. Contribute \u2301 Please consider submitting suggestions for updates and improvements to this documentation or the Loop app code . For documentation, please go to the LoopKit/loopdocs repository Issues page . Review issues that are already open. If your issue is open, you are welcome to add comments or vote to have the issue handled promptly. If your issue is new, please add it by clicking on the New Issue button. Indicate what page or pages need updating with a brief description, and we'll collaborate from there. (Note - you do not have to log in to github to read the Issues, but you cannot comment or add a new Issue without logging in.) If you do not have a github userID, but are a member of the Loop Facebook group or Loop Zulipchat, you can post a message there. On Facebook - make sure your post is clear that you have a comment about LoopDocs. In Loop Zulipchat, please use the documentation stream, Loopdocs Issue topic There are over 70 pages of content and we need all the reviewers we can get to help find typos and pages that need to be updated. Information for Coders \u2301 Loop is an app template for building an automated insulin delivery system. It is a stone resting on the boulders of work done by many others. The app is built on top of LoopKit . LoopKit is a set of frameworks that provide data storage, retrieval, and calculation, as well as boilerplate view controllers used in Loop. Using the open-source Loop app template, you can build an insulin delivery system that uses specific commercial and open-source hardware and software technologies to bring together the insulin pump, continuous glucose monitor (CGM), and insulin dosing algorithm to create a DIY automated insulin delivery system. This version is known as Loop. For more information on how to contribute to an open-source project, please review: How to Contribute to Open Source Review the Loop LICENSE Review the Loop CODE_OF_CONDUCT Then if you want to contribute, please join Loop Zulipchat and be sure to subscribe to all the channels. Meet the developers and testers who make this app the life-changing tool that so many people use. Learn about what is coming next.","title":"Home"},{"location":"#welcome-to-loop","text":"","title":"Welcome to Loop"},{"location":"#introduction","text":"What is Loop? Loop is an app you build yourself and load on your iPhone (or iPod) Loop assists in the many insulin dosing decisions people with diabetes face every day Loop uses a compatible continuous glucose monitor (CGM) and is paired using the RileyLink protocol with your compatible pump Loop works with older Medtronic pumps and the Eros (not Dash) Omnipods Loop requires a RileyLink compatible device to communicate between the phone and pump What CGMs work with Loop? The Loop app works with Dexcom\u2019s G4, G5 and G6 CGM. For Medtronic users, Loop also works with first generation Guardian and Guardian 2 Medtronic sensors compatible with the 522, 722, 523 and 723 pumps. There are other versions of Loop available that may work for you if you are not using one of these specific CGMs. These other versions (known as forks) are created by Loop users and are maintained by them. This document does not cover those other CGM options, but check out the Community Information below. Important Please understand that this project: Is highly experimental Is not approved for therapy You take full responsibility for building and running this system and do so at your own risk. The Loop algorithm on your phone predicts future glucose based on carbohydrate intake, insulin on board, and current CGM readings. You enter your own settings for desired correction range, basal schedule, insulin sensitivity factor (ISF), carbohydrate ratio (CR) and the type of insulin you are using. The glucose predictions, using your settings and meal entries, provide Loop with the information needed to recommend a bolus or temporary basal rate to attain a targeted glucose range in the future. The system can either operate \u201copen-loop\u201d where insulin delivery recommendations must be enacted by the user or \u201cclosed-loop\u201d where modifications to insulin delivery are enacted automatically. You may be saying, \"I can't build an app.\" But the wonderful volunteers in this community prepared this amazing website with step-by-step instructions containing pictures and arrows (say thank you to Katie DiSimone). The website is updated by more volunteers as improvements are made to the Loop app and when Apple makes changes to its iOS, Xcode and macOS environment. This language may sound scary, but it will become easier. Most people who Loop want to keep looping, so they learn the terminology and how to reach out to mentors for help. Once you've built the app, plan to learn to use it in stages. First, run \u201copen loop\u201d to familiarize yourself with Loop\u2019s operation. This allows you to understand why Loop is making certain recommendations and determine if you need to adjust your Loop settings. One thing many new users ask is why do my settings need to be different for Loop? The main reason is that Loop uses a realistic insulin model including the long tail of residual insulin activity - and updates its calculations every 5 minutes. This is a different way of thinking about insulin delivery. Other strategies, e.g., assuming a linear fall-off model for insulin activity, correcting 2 or 3 hours after a meal, trading a higher basal rate to avoid worrying about snacks, etc. will not work. There is a whole section on settings - just giving you a heads up. When you progress to \u201cclosed-loop\u201d, do so safely by starting with conservative Correction Ranges and Delivery Limits and only progress to more aggressive settings after several days of no lows. Please ask questions at this point about why Loop is making the recommendations it does. It should be similar to the therapy decisions you would make yourself. If the recommendations it makes are different than you would make, try to figure out why. Hint - it is probably your settings.","title":"Introduction"},{"location":"#how-to-use-these-docs","text":"Use the navigation menu at the top of the screen Most menu items are only one level deep - so you see all the underlying pages by clicking on the menu name Operate has a few top-level items plus 4 drop-down menus; the easiest way to go through these pages is hitting Next or the letter n Operate->How To Use Loop App Operate->Looping Tips Operate->Algorithm Operate->Troubleshoot Use the Table of Contents for the current page, which is displayed on the left side of the screen On mobile devices, at the top of the page, tap the down arrow on the upper left to display the TOC, tap again to dismiss it Read (or at least skim) pages sequentially the first time through Type the letter n for next and p for previous to navigate Search for topics by clicking the Search icon or typing the letter s on your keyboard As you type in the search box, suggested section headings with the first few rows of content will show up below the search bar Scroll down and select the Heading Title of the section of interest If you hit return, the Search display vanishes There is another website, Looptips , you should review While these articles were written and illustrated with an earlier version of Loop, they are well worth reading This link is repeated on the Operate->Looping Tips->Loop Tips page","title":"How to Use These Docs"},{"location":"#stay-in-the-loop","text":"There are a number of social media options. (Read the directions on each of these - some ask you to answer questions - please do so): The fastest way to get help (with the most mentors) is The Looped Facebook Group . There is another group, Loop and Learn, that has a lot of Loop-centric information, a T1D Speaker Series covering many topics of general diabetes interest as well as Loop-specific chats, alerts whenever there is an update to iOS and Xcode, Quick Tips and articles written by mentors providing their Loop experience. LoopandLearn Facebook Group LoopandLearn Website Both the Looped and LoopandLearn Facebook groups provide support for some Loop forks, which support other CGM, as well as other DIY closed loop options. Many Loopers use the Nightscout tool to assist them in monitoring their settings in Loop. The fastest Nightscout help can be found in the original #wearenotwaiting community CGM in the Cloud . For those not interested in Facebook or interested in what is coming next for Loop, join Loop Zulipchat and be sure to subscribe to all the streams or you'll miss some interesting conversations. Note - please only post a question in one group on Facebook or under one stream on zulipchat - many mentors monitor more than one place. If you don't hear an answer in 24 hours, then try a different place. On Facebook, leave your question posted after you've gotten an answer, but edit the original post to say it's been resolved. This prevents mentors from needing to read all the answers to see if you've been helped. Others may have the same question and will read your post. For those interested in delving deeper, see the next few sections.","title":"Stay in the Loop!"},{"location":"#development-history","text":"Loop is an open-source, shared project. Read about the early history of Loop development: History of Loop and LoopKit , written by Loop developer Nate Racklyeft Read about the early days and the many advances brought about by the greater Diabetes Community of people who are not waiting: The Artificial Pancreas Book written by Dana Lewis and check out her website DIYPS Read about how hard it was to get a new insulin pump (Omnipod) to work with Loop: Insulin Pumps, Decapped Chips and Software Defined Radios written by Loop developer Pete Schwamb and Deep Dip Teardown of Tubeless Insulin Pump by Sergei Skorobogatov The project continues to be a labor-of-love by a community of users; maintained and improved by volunteers.","title":"Development History"},{"location":"#contribute","text":"Please consider submitting suggestions for updates and improvements to this documentation or the Loop app code . For documentation, please go to the LoopKit/loopdocs repository Issues page . Review issues that are already open. If your issue is open, you are welcome to add comments or vote to have the issue handled promptly. If your issue is new, please add it by clicking on the New Issue button. Indicate what page or pages need updating with a brief description, and we'll collaborate from there. (Note - you do not have to log in to github to read the Issues, but you cannot comment or add a new Issue without logging in.) If you do not have a github userID, but are a member of the Loop Facebook group or Loop Zulipchat, you can post a message there. On Facebook - make sure your post is clear that you have a comment about LoopDocs. In Loop Zulipchat, please use the documentation stream, Loopdocs Issue topic There are over 70 pages of content and we need all the reviewers we can get to help find typos and pages that need to be updated.","title":"Contribute"},{"location":"#information-for-coders","text":"Loop is an app template for building an automated insulin delivery system. It is a stone resting on the boulders of work done by many others. The app is built on top of LoopKit . LoopKit is a set of frameworks that provide data storage, retrieval, and calculation, as well as boilerplate view controllers used in Loop. Using the open-source Loop app template, you can build an insulin delivery system that uses specific commercial and open-source hardware and software technologies to bring together the insulin pump, continuous glucose monitor (CGM), and insulin dosing algorithm to create a DIY automated insulin delivery system. This version is known as Loop. For more information on how to contribute to an open-source project, please review: How to Contribute to Open Source Review the Loop LICENSE Review the Loop CODE_OF_CONDUCT Then if you want to contribute, please join Loop Zulipchat and be sure to subscribe to all the channels. Meet the developers and testers who make this app the life-changing tool that so many people use. Learn about what is coming next.","title":"Information for Coders"},{"location":"build/build_errors/","text":"Build Errors \u2301 There are two types of build errors that happen: they are yellow warnings and red alerts. You'll see the warnings and alerts in the left-hand column of the Xcode window. Yellow warnings do not cause the build to fail, those are just warnings. You will often see yellow alerts. Ignore those. Do not try to do anything to fix those. Red error alerts will have to be resolved before you can successfully build the Loop app. The steps below explain how to resolve them based on the messages you are seeing. Start with The Obvious Error Causes \u2301 New Loop Builders This page contains build error help for people updating their Loop app as well as brand new Loop app builders. Some of the \"obvious\" errors causes aren't relevant for brand new builders. Check out items 4 and 6 in the list below. Then, skim the page until your reach Find Your Error Message . Once you've identified your error message, try to resolve it. Still stuck? Read Posting for Help Before you start trying to resolve your red errors, start with the most obvious things that can cause a red error message: DO NOT USE BETA VERSIONS If you are using an iOS beta version or an Xcode beta version, your Loop will not build. If you have Xcode beta, uninstall it and get regular Xcode. If you have iOS beta on your iPhone, you will need to restore your iPhone entirely. You can restore to either (1) the last non-beta backup version you saved or (2) restore as a new iPhone (default settings). Yes, deleting iOS beta is a pain...so don't install it in the first place. Did you check for Xcode updates? This is critical. If you are updating your Loop app, please review the iOS driven requirements for Xcode and macOS . Did you check your Apple developer account for new license agreement? Periodically, Apple will release a new developer license agreement that you need to sign before you can build new apps. You will get a build failure if there is a pending license agreement to sign. Login to your Apple developer account to check if there's a new license agreement. Did you reboot, i.e., restart, your computer after updating Xcode? You must reboot following Xcode installation or update and you must make sure your command line tools match the version of Xcode you just installed. Xcode Command Line Tools Did you get a fresh download of Loop code? If you tried to build with an old download that you used a long time ago, that old version may not be compatible with the new iOS and Xcode versions. Check also, that you are actually using the new download in Xcode. Xcode remembers the project you last opened, you need to tell Xcode about the new download. Are you are using a free developer account? Make sure you finished the removal of Siri and Push Notification capabilities . Are you doing a WorkSpace build? Make sure you selected Loop (Workspace) instead of Loop. Fix 95% of errors \u2301 If you have checked all those steps above and think you have a true build error, here's a tip that resolves 95% of all build errors when updating Loop code. Open your project in Xcode as normal. Then go to the Xcode menu at the top of the screen and find the \"Product\" menu item. Use the drop down selection for \"Clean Build Folder\" or press shift-command-K. Either will work the same. On the far right, next to the name Full Path is the folder name that Xcode will be using to build. Make sure it is the new code you just downloaded and not an older folder. Open the Terminal app on your computer. Copy and paste this command and press return: rm -rf ~/Library/Developer/Xcode/DerivedData Note: you won't see any message back if the command runs successfully. Return to Xcode and try building your app again. If the build fails again, look through the list below and see if you can match your error message with one of the error messages listed later in this page. If you really can't find your solution, then post for help. But help us help you. Ignore yellow warning messages - those are not errors - do not try to fix them Confirm it really is an error not already on this page; read this page carefully, including all the circled bits in the images in the Specific Error Messages section Follow the steps in the Posting for Help section WE CANNOT HELP without version numbers and screenshots Do not take pictures of your computer screen with your phone Posting for help \u2301 STOP!! Read this section! Important! Before you post in a Loop Social Media site asking for help with build errors, do your work first. The build errors listed below (and the checks listed above) will fix most of problems you may encounter. PLEASE READ THIS PAGE . The volunteers answering questions online would love to spend more time helping people use Loop and less time answering questions that can be addressed by using this page. Therefore, try to resolve your build error yourself. Then, if you need to post for help, please include enough information with the post so the volunteers know where you are in your troubleshooting attempts. You Post Must Include: The version of Xcode you are using The version of Loop you are building with The version of iOS on your Loop iPhone Free or paid account, and if free, confirmation that you deleted Siri and Push Notification capabilities Confirmation that you are not using an Xcode beta or iOS beta version (so we don't have to ask, please actually type \"I am not using beta versions\") Screenshots of your WHOLE Xcode window and/or Terminal window showing your error and any messages you've seen while working through the build errors/solutions. Do NOT use phone photographs of your computer screen. See below for instructions on how to capture a screenshot. State which fixes from the list below you have already tried AND post the screenshots of the results of those fix attempts. Screenshots \u2301 Please take screenshots of your issue and use them in your posts. On an Apple computer, press shift-command-4 keys at the same time and a little crosshairs tool will appear. Click-and-drag across the area you'd like to screenshot. When you let go of the button, the screenshot will be saved to your desktop with a file name starting with the name \"Screen Shot\". To capture an entire window, press shift-command-4 keys at the same time followed by pressing the space bar and then click on the window of interest. Use screenshots over cell phone images or words whenever possible. Screenshots are higher resolution and easier to read. Use the whole Xcode window screenshot when posting for build help. Find Your Error Message(s) \u2301 To begin fixing the error, use the Report Navigator view to find your error message. The key is to (1) READ THE ERROR MESSAGE and then (2) FIND YOUR MESSAGE IN ONE OF THE TOPICS BELOW . Here's a super tip: Merely seeing the \"exit code\" in Xcode is not enough information to discern what error is causing your build to fail; some exit codes have multiple causes. Look at the detailed message to guide your search for the matching solution. Notice the screenshots below have red circles highlighting certain error messages. Read your error message(s) from your screen, being guided by the red circles in the screenshots. Once you find your error message (hint: not \"exit code\"), you can either: Take the error message from your Xcode screen and use LoopDoc's search function to enter in some of that phrase to bring up the appropriate solution topic, or Take the error message from your Xcode screen and read through EACH OF THE TOPICS BELOW. Check each of the red circles to see if you have a match. Kind of like a matching puzzle. For example, if you see \"Invalid active developer path (/Library/Developer/CommandLineTools)\" in your error message, use the search tool in LoopDocs with \"invalid active\". You will get a couple of links and one is the Command Line Tools fix for that error message. Click on the link and you'll find the solution. Specific Error Messages \u2301 Carthage Error \u2301 If you previously installed carthage (used to build Loop before mid-January 2021) and it was updated to a version newer than 0.36.0, you may get a carthage error. Error Message: Wrong Version of Carthage Error Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/lipo: one of -create, -thin , -extract , -remove , -replace , -verify_arch \u2026 , -archs, -info, or -detailed_info must be specified. Solution: Manually uninstall carthage. Open a Terminal Copy and paste this command into the terminal rm -rf /usr/local/bin/carthage Copy and paste this command into the terminal sudo rm -rf /Library/Frameworks/CarthageKit.framework You will be prompted for a password when you hit enter on the second command It is the same password you use to log into the computer; you must have admin privileges to do this step The password will not display on the screen as you type it Could Not Locate Device Support Files \u2301 Error Message: \"Could not locate device support files.\" That message is telling you that your iOS on the Loop phone requires you to get a newer version of Xcode to be able to build Loop onto that phone. Solution: Update your Xcode version; this may also require a macOS update. Please review the phone iOS driven requirements for Xcode and macOS . With Xcode 12, the simulators are no longer being downloaded automatically. If you are missing a simulator, follow the steps under Step 9 Simulator Download . No Such Module 'LoopKit' or Similar Message \u2301 Error Message: If you see a Cartfile failure and several other red errors (in particular saying there is \"no such module 'LoopKit'\"), double click on the Cartfile error message. If it says the build failed in one of the schemes, as shown in the screenshot below, then re-run the Carthage Error fix listed above. Solution : Make sure to download a fresh version of code! Anything downloaded before Jan 21, 2021 will not work. That's when the need for carthage was removed. Developer License Update \u2301 Error message: \"The Apple Developer Program License Agreement has been updated, In order to access certain membership resources, you must accept the latest license agreement\" Solution: You'll need to log onto your developer account at developer.apple.com and accept the latest license agreement. Could Not Get a Container Directory URL \u2301 Error message: \"Could not get a container directory URL. Please ensure App Groups are set up correctly in entitlements.\" Solution : To resolve this error, you will need to click on the Loop target's signing area and then the plus-sign in the App Groups area under the signing. Copy and paste the bundle indentifier into the new container that starts with group. and then add Group to the end of the name. Click OK to save. Note, the line will start with lower case group. followed by your bundle identifier and an upper case Group added to the end of the bundle identifier. The final App Group should now have a blue check box, the name should start with group and end with LoopGroup . See the screenshot as an example. Click the build button after your App Group is setup similarly and you should be good. Missing Command Line Tools \u2301 Error message: \"Invalid active developer path (/Library/Developer/CommandLineTools)\" or \"unable to find utility \"xcodebuild\", not a developer tool or in PATH\" Solution: Go to your Xcode preferences and under the Locations tab, select your Xcode version (the figure shows 12.0.1 - yours should match your Xcode version) in the dropdown menu for Command Line Tools. Device Management Could Not Launch Loop \u2301 Error message: \"Could not launch \"Loop\". Verify the Developer App certificate for your account is trusted on your device. Open Settings and navigate to General -> Device Management, then select your Developer App certificate to trust it.\" Solution: If you get this message and are unable to find the Device Management option in your phone settings, then we need to do a little extra step to clear out some old info. Plug the phone into the computer and open Xcode Click the \"Window\" menu item in Xcode and then choose \"Devices and Simulators\" Right click your phone on the left and pick \"Show Provisioning Profiles\" Delete all of the items in the list that have Loop in the name Go to your four signing targets and change the signing team back to \"None\" for a quick bit, and then change back to your regular signing team name again. Rebuild Loop That should clear the out, problematic profiles and allow a successful build. If your problem persists after that, then you might need to do total reset of your phone to clear out the pesky problem. Before you do this, you may want to Post for Help to make sure it is really necessary: Wipe the iPhone clean and set it up as a new device FIRST - write down or screenshot all your settings Pod users - you will have to start a fresh pod after this If you want your old pod to continue giving you basal rate, don't replace the pod before wiping your phone. Once the phone is reset and a new Loop app is added, you must start a new pod. The old pod should have the sound connection broken before being discarded because you won't be able to deactivate the pod. Delete all certificates from your Developer account (you'll need to login to your Developer account to do that) Delete your old Loop code download and get a new one. Rebuild Loop on the phone with the new download of Loop code. Start a new pod with the new Loop app on the reset phone. Pending Certificate Request \u2301 Error message: \"You already have a current iOS Development certificate or a pending certificate request.\" Solution: This error message has recently started to appear for some new Loop builders. To resolve the issue, please log in to your Developer account at developer.apple.com and then click on \"Certificates, Identifiers & Profiles\". Under that screen, you will see \"Development\" under the \"Certificates\" section in the column on the left. You will need to click on the certificates, and choose \"revoke\" from the options that show after you click on the certificate. Confirm the warning message that will appear asking \"Do you want to revoke the certificate?\" After you do that, return to Xcode and open up Xcode preferences. Under the Accounts section of Preferences, click on the minus sign to delete your Apple ID. Re-enter your Apple ID (yes...add that account right back that you literally just deleted), return to your Loop's target signing areas in Xcode and your error message should have resolved as a new certificate will have been issued and a provisioning profile should have been created automatically. You can verify the iOS development certificates are working by clicking on \"Manage Certificates\" in Xcode Preferences, Accounts and viewing the iOS Development Certificates. You should have one for your account that has a clean status similar to the screenshot below. Command CodeSign Failed \u2301 Error message: \"errSecInternalComponent, Command CodeSign failed with a nonzero exit code\" Solution: This error message is likely due to inadvertently saying \"no\" to allowing Keychain Access or changing your computer or AppleID password. Regardless, the solution is as follows: Close Xcode Open your Keychain Access application (found in Applications within the Utilities folder) In the upper left corner of keychain access, make sure you have the keychain login highlighted and then right-click the lock next to the login . Click the lock closed, and then click the lock to open it again. You will be prompted for a password. Enter your computer admin password. Close Keychain Access app. Open your Loop project again in Xcode. In the main Xcode menu (grey menu bar at the very top of your Apple display area), select Product and then select the option for Clean . (Keyboard shortcut is shift-command-k) Now try rebuilding your Loop app. If you ever get prompted again to allow Xcode access to Keychain, make sure to click on the option to Always Allow. Unrecognized Arguments \u2301 Error message: \"Unrecognized arguments: --cache-builds\" Solution: This is a homebrew / carthage error, so I don't think you'll see this. If you do, download a fresh copy of Loop code and try again. If it repeats, it is time to request assistance. Please read Posting for Help . Abort with Payload \u2301 Error message: \" Abort with payload \" Your app will only open briefly with a white screen and then close, if you build with this error. Solution: This error message is caused by having the Loop download folder in an iCloud mapped drive. Move your Loop download folder back to the Downloads folder, then rebuild. Apple Watch Issues \u2301 Apple Watch: Loop App Not Appearing \u2301 Error: Apple watch app is not appearing. Solution: This error usually appears because you have not updated the watchOS prior to building Loop, or you didn't have your Apple watch paired at the time of building Loop. Don't forget to open the iPhone's Watch app, select My Watch tab on the bottom left, scroll all the way down, and click Install for the Loop app listed at the very bottom under \"available apps\". Apple Watch: Loop App Not Installing \u2301 Error: The Loop app appears on the list of apps available to install on the watch, but when you press \"install\", and it goes through the animation of filling in the circle while it's installing, but then at the end it just toggles back to saying \"INSTALL\". Solution: Plug your iPhone into the computer and start Xcode. On your watch, look for a prompt that says \"Trust this computer\". Scroll down on the watch face and select the \"Trust\" button. In Xcode, go to the top menu bar and select \"Clean Build Folder\" from the Product menu option, and then rebuild your Loop app. For an unknown reason, the watch app can still fail to install properly. If the \"Clean Build Folder\" step above, is insufficient, you may need to unpair your watch and then pair as new. After this, rebuild Loop on your phone while wearing your watch and \"Trust this computer\" when prompted. This typically configures the Loop app to install properly on your watch.","title":"Oh dear! Build errors?"},{"location":"build/build_errors/#build-errors","text":"There are two types of build errors that happen: they are yellow warnings and red alerts. You'll see the warnings and alerts in the left-hand column of the Xcode window. Yellow warnings do not cause the build to fail, those are just warnings. You will often see yellow alerts. Ignore those. Do not try to do anything to fix those. Red error alerts will have to be resolved before you can successfully build the Loop app. The steps below explain how to resolve them based on the messages you are seeing.","title":"Build Errors"},{"location":"build/build_errors/#start-with-the-obvious-error-causes","text":"New Loop Builders This page contains build error help for people updating their Loop app as well as brand new Loop app builders. Some of the \"obvious\" errors causes aren't relevant for brand new builders. Check out items 4 and 6 in the list below. Then, skim the page until your reach Find Your Error Message . Once you've identified your error message, try to resolve it. Still stuck? Read Posting for Help Before you start trying to resolve your red errors, start with the most obvious things that can cause a red error message: DO NOT USE BETA VERSIONS If you are using an iOS beta version or an Xcode beta version, your Loop will not build. If you have Xcode beta, uninstall it and get regular Xcode. If you have iOS beta on your iPhone, you will need to restore your iPhone entirely. You can restore to either (1) the last non-beta backup version you saved or (2) restore as a new iPhone (default settings). Yes, deleting iOS beta is a pain...so don't install it in the first place. Did you check for Xcode updates? This is critical. If you are updating your Loop app, please review the iOS driven requirements for Xcode and macOS . Did you check your Apple developer account for new license agreement? Periodically, Apple will release a new developer license agreement that you need to sign before you can build new apps. You will get a build failure if there is a pending license agreement to sign. Login to your Apple developer account to check if there's a new license agreement. Did you reboot, i.e., restart, your computer after updating Xcode? You must reboot following Xcode installation or update and you must make sure your command line tools match the version of Xcode you just installed. Xcode Command Line Tools Did you get a fresh download of Loop code? If you tried to build with an old download that you used a long time ago, that old version may not be compatible with the new iOS and Xcode versions. Check also, that you are actually using the new download in Xcode. Xcode remembers the project you last opened, you need to tell Xcode about the new download. Are you are using a free developer account? Make sure you finished the removal of Siri and Push Notification capabilities . Are you doing a WorkSpace build? Make sure you selected Loop (Workspace) instead of Loop.","title":"Start with The Obvious Error Causes"},{"location":"build/build_errors/#fix-95-of-errors","text":"If you have checked all those steps above and think you have a true build error, here's a tip that resolves 95% of all build errors when updating Loop code. Open your project in Xcode as normal. Then go to the Xcode menu at the top of the screen and find the \"Product\" menu item. Use the drop down selection for \"Clean Build Folder\" or press shift-command-K. Either will work the same. On the far right, next to the name Full Path is the folder name that Xcode will be using to build. Make sure it is the new code you just downloaded and not an older folder. Open the Terminal app on your computer. Copy and paste this command and press return: rm -rf ~/Library/Developer/Xcode/DerivedData Note: you won't see any message back if the command runs successfully. Return to Xcode and try building your app again. If the build fails again, look through the list below and see if you can match your error message with one of the error messages listed later in this page. If you really can't find your solution, then post for help. But help us help you. Ignore yellow warning messages - those are not errors - do not try to fix them Confirm it really is an error not already on this page; read this page carefully, including all the circled bits in the images in the Specific Error Messages section Follow the steps in the Posting for Help section WE CANNOT HELP without version numbers and screenshots Do not take pictures of your computer screen with your phone","title":"Fix 95% of errors"},{"location":"build/build_errors/#posting-for-help","text":"STOP!! Read this section! Important! Before you post in a Loop Social Media site asking for help with build errors, do your work first. The build errors listed below (and the checks listed above) will fix most of problems you may encounter. PLEASE READ THIS PAGE . The volunteers answering questions online would love to spend more time helping people use Loop and less time answering questions that can be addressed by using this page. Therefore, try to resolve your build error yourself. Then, if you need to post for help, please include enough information with the post so the volunteers know where you are in your troubleshooting attempts. You Post Must Include: The version of Xcode you are using The version of Loop you are building with The version of iOS on your Loop iPhone Free or paid account, and if free, confirmation that you deleted Siri and Push Notification capabilities Confirmation that you are not using an Xcode beta or iOS beta version (so we don't have to ask, please actually type \"I am not using beta versions\") Screenshots of your WHOLE Xcode window and/or Terminal window showing your error and any messages you've seen while working through the build errors/solutions. Do NOT use phone photographs of your computer screen. See below for instructions on how to capture a screenshot. State which fixes from the list below you have already tried AND post the screenshots of the results of those fix attempts.","title":"Posting for help"},{"location":"build/build_errors/#screenshots","text":"Please take screenshots of your issue and use them in your posts. On an Apple computer, press shift-command-4 keys at the same time and a little crosshairs tool will appear. Click-and-drag across the area you'd like to screenshot. When you let go of the button, the screenshot will be saved to your desktop with a file name starting with the name \"Screen Shot\". To capture an entire window, press shift-command-4 keys at the same time followed by pressing the space bar and then click on the window of interest. Use screenshots over cell phone images or words whenever possible. Screenshots are higher resolution and easier to read. Use the whole Xcode window screenshot when posting for build help.","title":"Screenshots"},{"location":"build/build_errors/#find-your-error-messages","text":"To begin fixing the error, use the Report Navigator view to find your error message. The key is to (1) READ THE ERROR MESSAGE and then (2) FIND YOUR MESSAGE IN ONE OF THE TOPICS BELOW . Here's a super tip: Merely seeing the \"exit code\" in Xcode is not enough information to discern what error is causing your build to fail; some exit codes have multiple causes. Look at the detailed message to guide your search for the matching solution. Notice the screenshots below have red circles highlighting certain error messages. Read your error message(s) from your screen, being guided by the red circles in the screenshots. Once you find your error message (hint: not \"exit code\"), you can either: Take the error message from your Xcode screen and use LoopDoc's search function to enter in some of that phrase to bring up the appropriate solution topic, or Take the error message from your Xcode screen and read through EACH OF THE TOPICS BELOW. Check each of the red circles to see if you have a match. Kind of like a matching puzzle. For example, if you see \"Invalid active developer path (/Library/Developer/CommandLineTools)\" in your error message, use the search tool in LoopDocs with \"invalid active\". You will get a couple of links and one is the Command Line Tools fix for that error message. Click on the link and you'll find the solution.","title":"Find Your Error Message(s)"},{"location":"build/build_errors/#specific-error-messages","text":"","title":"Specific Error Messages"},{"location":"build/build_errors/#carthage-error","text":"If you previously installed carthage (used to build Loop before mid-January 2021) and it was updated to a version newer than 0.36.0, you may get a carthage error. Error Message: Wrong Version of Carthage Error Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/lipo: one of -create, -thin , -extract , -remove , -replace , -verify_arch \u2026 , -archs, -info, or -detailed_info must be specified. Solution: Manually uninstall carthage. Open a Terminal Copy and paste this command into the terminal rm -rf /usr/local/bin/carthage Copy and paste this command into the terminal sudo rm -rf /Library/Frameworks/CarthageKit.framework You will be prompted for a password when you hit enter on the second command It is the same password you use to log into the computer; you must have admin privileges to do this step The password will not display on the screen as you type it","title":"Carthage Error"},{"location":"build/build_errors/#could-not-locate-device-support-files","text":"Error Message: \"Could not locate device support files.\" That message is telling you that your iOS on the Loop phone requires you to get a newer version of Xcode to be able to build Loop onto that phone. Solution: Update your Xcode version; this may also require a macOS update. Please review the phone iOS driven requirements for Xcode and macOS . With Xcode 12, the simulators are no longer being downloaded automatically. If you are missing a simulator, follow the steps under Step 9 Simulator Download .","title":"Could Not Locate Device Support Files"},{"location":"build/build_errors/#no-such-module-loopkit-or-similar-message","text":"Error Message: If you see a Cartfile failure and several other red errors (in particular saying there is \"no such module 'LoopKit'\"), double click on the Cartfile error message. If it says the build failed in one of the schemes, as shown in the screenshot below, then re-run the Carthage Error fix listed above. Solution : Make sure to download a fresh version of code! Anything downloaded before Jan 21, 2021 will not work. That's when the need for carthage was removed.","title":"No Such Module 'LoopKit' or Similar Message"},{"location":"build/build_errors/#developer-license-update","text":"Error message: \"The Apple Developer Program License Agreement has been updated, In order to access certain membership resources, you must accept the latest license agreement\" Solution: You'll need to log onto your developer account at developer.apple.com and accept the latest license agreement.","title":"Developer License Update"},{"location":"build/build_errors/#could-not-get-a-container-directory-url","text":"Error message: \"Could not get a container directory URL. Please ensure App Groups are set up correctly in entitlements.\" Solution : To resolve this error, you will need to click on the Loop target's signing area and then the plus-sign in the App Groups area under the signing. Copy and paste the bundle indentifier into the new container that starts with group. and then add Group to the end of the name. Click OK to save. Note, the line will start with lower case group. followed by your bundle identifier and an upper case Group added to the end of the bundle identifier. The final App Group should now have a blue check box, the name should start with group and end with LoopGroup . See the screenshot as an example. Click the build button after your App Group is setup similarly and you should be good.","title":"Could Not Get a Container Directory URL"},{"location":"build/build_errors/#missing-command-line-tools","text":"Error message: \"Invalid active developer path (/Library/Developer/CommandLineTools)\" or \"unable to find utility \"xcodebuild\", not a developer tool or in PATH\" Solution: Go to your Xcode preferences and under the Locations tab, select your Xcode version (the figure shows 12.0.1 - yours should match your Xcode version) in the dropdown menu for Command Line Tools.","title":"Missing Command Line Tools"},{"location":"build/build_errors/#device-management-could-not-launch-loop","text":"Error message: \"Could not launch \"Loop\". Verify the Developer App certificate for your account is trusted on your device. Open Settings and navigate to General -> Device Management, then select your Developer App certificate to trust it.\" Solution: If you get this message and are unable to find the Device Management option in your phone settings, then we need to do a little extra step to clear out some old info. Plug the phone into the computer and open Xcode Click the \"Window\" menu item in Xcode and then choose \"Devices and Simulators\" Right click your phone on the left and pick \"Show Provisioning Profiles\" Delete all of the items in the list that have Loop in the name Go to your four signing targets and change the signing team back to \"None\" for a quick bit, and then change back to your regular signing team name again. Rebuild Loop That should clear the out, problematic profiles and allow a successful build. If your problem persists after that, then you might need to do total reset of your phone to clear out the pesky problem. Before you do this, you may want to Post for Help to make sure it is really necessary: Wipe the iPhone clean and set it up as a new device FIRST - write down or screenshot all your settings Pod users - you will have to start a fresh pod after this If you want your old pod to continue giving you basal rate, don't replace the pod before wiping your phone. Once the phone is reset and a new Loop app is added, you must start a new pod. The old pod should have the sound connection broken before being discarded because you won't be able to deactivate the pod. Delete all certificates from your Developer account (you'll need to login to your Developer account to do that) Delete your old Loop code download and get a new one. Rebuild Loop on the phone with the new download of Loop code. Start a new pod with the new Loop app on the reset phone.","title":"Device Management Could Not Launch Loop"},{"location":"build/build_errors/#pending-certificate-request","text":"Error message: \"You already have a current iOS Development certificate or a pending certificate request.\" Solution: This error message has recently started to appear for some new Loop builders. To resolve the issue, please log in to your Developer account at developer.apple.com and then click on \"Certificates, Identifiers & Profiles\". Under that screen, you will see \"Development\" under the \"Certificates\" section in the column on the left. You will need to click on the certificates, and choose \"revoke\" from the options that show after you click on the certificate. Confirm the warning message that will appear asking \"Do you want to revoke the certificate?\" After you do that, return to Xcode and open up Xcode preferences. Under the Accounts section of Preferences, click on the minus sign to delete your Apple ID. Re-enter your Apple ID (yes...add that account right back that you literally just deleted), return to your Loop's target signing areas in Xcode and your error message should have resolved as a new certificate will have been issued and a provisioning profile should have been created automatically. You can verify the iOS development certificates are working by clicking on \"Manage Certificates\" in Xcode Preferences, Accounts and viewing the iOS Development Certificates. You should have one for your account that has a clean status similar to the screenshot below.","title":"Pending Certificate Request"},{"location":"build/build_errors/#command-codesign-failed","text":"Error message: \"errSecInternalComponent, Command CodeSign failed with a nonzero exit code\" Solution: This error message is likely due to inadvertently saying \"no\" to allowing Keychain Access or changing your computer or AppleID password. Regardless, the solution is as follows: Close Xcode Open your Keychain Access application (found in Applications within the Utilities folder) In the upper left corner of keychain access, make sure you have the keychain login highlighted and then right-click the lock next to the login . Click the lock closed, and then click the lock to open it again. You will be prompted for a password. Enter your computer admin password. Close Keychain Access app. Open your Loop project again in Xcode. In the main Xcode menu (grey menu bar at the very top of your Apple display area), select Product and then select the option for Clean . (Keyboard shortcut is shift-command-k) Now try rebuilding your Loop app. If you ever get prompted again to allow Xcode access to Keychain, make sure to click on the option to Always Allow.","title":"Command CodeSign Failed"},{"location":"build/build_errors/#unrecognized-arguments","text":"Error message: \"Unrecognized arguments: --cache-builds\" Solution: This is a homebrew / carthage error, so I don't think you'll see this. If you do, download a fresh copy of Loop code and try again. If it repeats, it is time to request assistance. Please read Posting for Help .","title":"Unrecognized Arguments"},{"location":"build/build_errors/#abort-with-payload","text":"Error message: \" Abort with payload \" Your app will only open briefly with a white screen and then close, if you build with this error. Solution: This error message is caused by having the Loop download folder in an iCloud mapped drive. Move your Loop download folder back to the Downloads folder, then rebuild.","title":"Abort with Payload"},{"location":"build/build_errors/#apple-watch-issues","text":"","title":"Apple Watch Issues"},{"location":"build/build_errors/#apple-watch-loop-app-not-appearing","text":"Error: Apple watch app is not appearing. Solution: This error usually appears because you have not updated the watchOS prior to building Loop, or you didn't have your Apple watch paired at the time of building Loop. Don't forget to open the iPhone's Watch app, select My Watch tab on the bottom left, scroll all the way down, and click Install for the Loop app listed at the very bottom under \"available apps\".","title":"Apple Watch: Loop App Not Appearing"},{"location":"build/build_errors/#apple-watch-loop-app-not-installing","text":"Error: The Loop app appears on the list of apps available to install on the watch, but when you press \"install\", and it goes through the animation of filling in the circle while it's installing, but then at the end it just toggles back to saying \"INSTALL\". Solution: Plug your iPhone into the computer and start Xcode. On your watch, look for a prompt that says \"Trust this computer\". Scroll down on the watch face and select the \"Trust\" button. In Xcode, go to the top menu bar and select \"Clean Build Folder\" from the Product menu option, and then rebuild your Loop app. For an unknown reason, the watch app can still fail to install properly. If the \"Clean Build Folder\" step above, is insufficient, you may need to unpair your watch and then pair as new. After this, rebuild Loop on your phone while wearing your watch and \"Trust this computer\" when prompted. This typically configures the Loop app to install properly on your watch.","title":"Apple Watch: Loop App Not Installing"},{"location":"build/code_customization/","text":"Code Customizations \u2301 Based on Loop users\u2019 experience, there are some customizations that you may want to incorporate ahead of building your Loop app and Apple Watch app. These customizations must be done prior to building the Loop app onto your iPhone, they cannot be done from within the app itself. Line numbers may change Every effort will be made to update the line numbers as the code is updated, but there may be times where the screenshots and line numbers differ from the current version of Loop code. These instructions have been updated for Loop v2.2.4 master branch. If you don't see an exact match on the line number listed, then use the Xcode / Find / Find in Project (or Workspace) menu to search for a Keyword or Phrase shown in the associated line. If you cannot identify a line that looks exactly like the example - do not guess - go to your favorite social media group and ask for help. Disable Authentication for Bolusing \u2301 Depending on your iPhone preferences and model, you may have Face ID or Touch ID enabled. Those security features will also be used to authenticate bolus delivery in Loop. You can choose to disable authentication (i.e., not require Face ID, Touch ID, or passcode for bolusing) through the following code customization: Modify Line 529 in the Loop>>View Controllers>>BolusViewController.swift. This is a perfect example of how line numbers might be different. The screenshot below was taken with Loop v2.0 when the line number was 201; with v2.2.4, that same code is found at line 529. Add the false && as shown in the screenshot below: Default Carb Absorption Times \u2301 Loop\u2019s default carb absorption times are based on the high, medium, and low glycemic index absorption curves presented in Think Like A Pancreas by Gary Scheiner. Currently the lollipop (fast) icon is set for 2 hours, taco (medium) icon for 3 hours, and pizza (slow) icon for 4 hours. If you would like to modify those defaults, you can do so in the Loop Core>>LoopSettings.swift Line 16. For example, if you wanted to make lollipop a 30 minute absorption and pizza a 5 hour absorption, the edit would look like below: Exponential Insulin Curve \u2301 The Exponential Insulin Curve Models (Rapid-Acting Adult, Rapid-Acting Child, and Fiasp) default to an insulin duration of 360 minutes...but the peak activity of the various curves differs, as follows: Rapid-acting adult curve peaks at 75 minutes Rapid-acting child curve peaks at 65 minutes Fiasp peaks curve peaks at 55 minutes If you wish to customize these values, you can adjust them on Lines 34-38 in the LoopCore>>Insulin>>ExponentialInsulinModelPreset.swift. Loop Logo \u2301 If you want an app logo other than the default green circle for your Loop app, you can easily customize this. To make it easy to generate the correct sizes of icons, you can use a site like appicon.build or appicon.co and just drag and drop your source image. The source image needs to be 1024 pixels x 1024 pixels. The site will email you a zip file or automatically download a set of files. Highlight and copy the contents of the Appicon.appiconset that you are sent, including the Contents.json file Now navigate to the corresponding Loop folder (DefaultAssessts.xcassets, Appicon.appiconset) as shown below. Replace the contents of the Appicon.appiconset with your copied images and Contents.json file. You can confirm the successful change by looking in Xcode under Loop -> DefaultAssets.xcassets -> Appicon. You should see your custom logo in the Appicon set now. You may also see a yellow alert that there are \u201cunassigned children\u201d depending on the images the app icon generator tool produced. The unassigned children alert will not prevent your app from building, it\u2019s simply because there are more more sizes of images than Loop app uses. You can just leave the unassigned children alone (wow...how often do you get to say that phrase?). And now you'll be the proud new owner of a custom Loop icon. Adjust the Sensitivity of Watch's Digital Crown for Carb and Bolus Entry \u2301 The rate of change of the carb and bolus entry pickers when using the digital crown can be altered. You'll need to edit two lines in files within the WatchApp Extension>>Controllers folder. In BolusInterfaceController.swift edit line 191, and in AddCarbsInterfaceController.swift edit line 249. The 1/24 value is the ratio of rotations of the crown to the amount of change in the value. Changing it to 1/12 would mean that twice as many turns would be needed for the same amount of carb or bolus entry.","title":"Customize your Loop"},{"location":"build/code_customization/#code-customizations","text":"Based on Loop users\u2019 experience, there are some customizations that you may want to incorporate ahead of building your Loop app and Apple Watch app. These customizations must be done prior to building the Loop app onto your iPhone, they cannot be done from within the app itself. Line numbers may change Every effort will be made to update the line numbers as the code is updated, but there may be times where the screenshots and line numbers differ from the current version of Loop code. These instructions have been updated for Loop v2.2.4 master branch. If you don't see an exact match on the line number listed, then use the Xcode / Find / Find in Project (or Workspace) menu to search for a Keyword or Phrase shown in the associated line. If you cannot identify a line that looks exactly like the example - do not guess - go to your favorite social media group and ask for help.","title":"Code Customizations"},{"location":"build/code_customization/#disable-authentication-for-bolusing","text":"Depending on your iPhone preferences and model, you may have Face ID or Touch ID enabled. Those security features will also be used to authenticate bolus delivery in Loop. You can choose to disable authentication (i.e., not require Face ID, Touch ID, or passcode for bolusing) through the following code customization: Modify Line 529 in the Loop>>View Controllers>>BolusViewController.swift. This is a perfect example of how line numbers might be different. The screenshot below was taken with Loop v2.0 when the line number was 201; with v2.2.4, that same code is found at line 529. Add the false && as shown in the screenshot below:","title":"Disable Authentication for Bolusing"},{"location":"build/code_customization/#default-carb-absorption-times","text":"Loop\u2019s default carb absorption times are based on the high, medium, and low glycemic index absorption curves presented in Think Like A Pancreas by Gary Scheiner. Currently the lollipop (fast) icon is set for 2 hours, taco (medium) icon for 3 hours, and pizza (slow) icon for 4 hours. If you would like to modify those defaults, you can do so in the Loop Core>>LoopSettings.swift Line 16. For example, if you wanted to make lollipop a 30 minute absorption and pizza a 5 hour absorption, the edit would look like below:","title":"Default Carb Absorption Times"},{"location":"build/code_customization/#exponential-insulin-curve","text":"The Exponential Insulin Curve Models (Rapid-Acting Adult, Rapid-Acting Child, and Fiasp) default to an insulin duration of 360 minutes...but the peak activity of the various curves differs, as follows: Rapid-acting adult curve peaks at 75 minutes Rapid-acting child curve peaks at 65 minutes Fiasp peaks curve peaks at 55 minutes If you wish to customize these values, you can adjust them on Lines 34-38 in the LoopCore>>Insulin>>ExponentialInsulinModelPreset.swift.","title":"Exponential Insulin Curve"},{"location":"build/code_customization/#loop-logo","text":"If you want an app logo other than the default green circle for your Loop app, you can easily customize this. To make it easy to generate the correct sizes of icons, you can use a site like appicon.build or appicon.co and just drag and drop your source image. The source image needs to be 1024 pixels x 1024 pixels. The site will email you a zip file or automatically download a set of files. Highlight and copy the contents of the Appicon.appiconset that you are sent, including the Contents.json file Now navigate to the corresponding Loop folder (DefaultAssessts.xcassets, Appicon.appiconset) as shown below. Replace the contents of the Appicon.appiconset with your copied images and Contents.json file. You can confirm the successful change by looking in Xcode under Loop -> DefaultAssets.xcassets -> Appicon. You should see your custom logo in the Appicon set now. You may also see a yellow alert that there are \u201cunassigned children\u201d depending on the images the app icon generator tool produced. The unassigned children alert will not prevent your app from building, it\u2019s simply because there are more more sizes of images than Loop app uses. You can just leave the unassigned children alone (wow...how often do you get to say that phrase?). And now you'll be the proud new owner of a custom Loop icon.","title":"Loop Logo"},{"location":"build/code_customization/#adjust-the-sensitivity-of-watchs-digital-crown-for-carb-and-bolus-entry","text":"The rate of change of the carb and bolus entry pickers when using the digital crown can be altered. You'll need to edit two lines in files within the WatchApp Extension>>Controllers folder. In BolusInterfaceController.swift edit line 191, and in AddCarbsInterfaceController.swift edit line 249. The 1/24 value is the ratio of rotations of the crown to the amount of change in the value. Changing it to 1/12 would mean that twice as many turns would be needed for the same amount of carb or bolus entry.","title":"Adjust the Sensitivity of Watch's Digital Crown for Carb and Bolus Entry"},{"location":"build/health/","text":"Health Data \u2301 The Loop app uses the iPhone's Health app to record blood glucose, insulin, and carbohydrate data. The blood glucose, insulin, and carbohydrate data stored in Apple Health can also be accessed and uploaded by Tidepool's Mobile app and was an important step in the Jaeb Observational Study (that study has completed). Please review the settings below to ensure you have the proper settings. Loop Permissions \u2301 You need to set up Loop's permissions to read and write some data in Health. When you finish building your first Loop app, the Health App screen for Loop permissions automatically appears. The directions have changed. Do not enable permission for Loop to read Carbohydrates from Health. You can also get to this screen (for iOS 14) by iPhone -> Settings -> Health (heart icon) -> Data Access & Devices -> Loop. New Instructions Loop does not need to read Carbohydrates from the Health app. The old instructions suggested turning on all switches. This is NOT necessary for Carbohydrates and can be dangerous if A different app writes Carbohydrates to Apple Health If two Loopers use the same Apple ID - PLEASE - do not do this; Loopers need their own Apple ID Blood Glucose : Permission to Write and Read Loop eavesdrops on the Bluetooth communication of the Dexcom G4/G5/G6 CGM and writes the values to Health for the first 3 hours After 3 hours, the Dexcom CGM app allows other apps (including Health) access to its CGM data, so Loop needs to read the older Blood Glucose from Health During times when there is no CGM data, the user can enter a finger stick value into Apple Health BG and Loop will read it, e.g., during sensor warmup Carbohydrates : Permission to Write ONLY Loop has its own carbohydrate data store and does not need to read carbs from Health If any other app writes carbohydrates to health, you do not want Loop to add them to what you've already entered into the Loop app Once Loop is told about carbohydrates, it will start to dose extra insulin to accommodate the expected BG rise from the carbohydrate entry Insulin Delivery : Permission to Write and Read Loop writes basal and bolus doses to Apple Health Loop reads any manual insulin added to Apple Health, e.g., insulin taken by injection Sleep : Permission to Read Loop uses Sleep information to decide which times of day to use the limited daily allocation from Apple for updates to the Loop watch complication. Dexcom Permissions \u2301 You also need to enable your Dexcom app to write to the Health app. The steps shown in the figure below are valid for iOS 12. For iOS 13/14, the menu items are: iPhone -> Settings -> Health (heart icon) -> Data Access & Devices -> Dexcom app. Make sure Dexcom has permission to write Blood Glucose (after the 3 hour delay). If you do not do this, you will have a maximum history of 3 hours displayed in the Loop Glucose screen.","title":"Step 1: Health Permissions"},{"location":"build/health/#health-data","text":"The Loop app uses the iPhone's Health app to record blood glucose, insulin, and carbohydrate data. The blood glucose, insulin, and carbohydrate data stored in Apple Health can also be accessed and uploaded by Tidepool's Mobile app and was an important step in the Jaeb Observational Study (that study has completed). Please review the settings below to ensure you have the proper settings.","title":"Health Data"},{"location":"build/health/#loop-permissions","text":"You need to set up Loop's permissions to read and write some data in Health. When you finish building your first Loop app, the Health App screen for Loop permissions automatically appears. The directions have changed. Do not enable permission for Loop to read Carbohydrates from Health. You can also get to this screen (for iOS 14) by iPhone -> Settings -> Health (heart icon) -> Data Access & Devices -> Loop. New Instructions Loop does not need to read Carbohydrates from the Health app. The old instructions suggested turning on all switches. This is NOT necessary for Carbohydrates and can be dangerous if A different app writes Carbohydrates to Apple Health If two Loopers use the same Apple ID - PLEASE - do not do this; Loopers need their own Apple ID Blood Glucose : Permission to Write and Read Loop eavesdrops on the Bluetooth communication of the Dexcom G4/G5/G6 CGM and writes the values to Health for the first 3 hours After 3 hours, the Dexcom CGM app allows other apps (including Health) access to its CGM data, so Loop needs to read the older Blood Glucose from Health During times when there is no CGM data, the user can enter a finger stick value into Apple Health BG and Loop will read it, e.g., during sensor warmup Carbohydrates : Permission to Write ONLY Loop has its own carbohydrate data store and does not need to read carbs from Health If any other app writes carbohydrates to health, you do not want Loop to add them to what you've already entered into the Loop app Once Loop is told about carbohydrates, it will start to dose extra insulin to accommodate the expected BG rise from the carbohydrate entry Insulin Delivery : Permission to Write and Read Loop writes basal and bolus doses to Apple Health Loop reads any manual insulin added to Apple Health, e.g., insulin taken by injection Sleep : Permission to Read Loop uses Sleep information to decide which times of day to use the limited daily allocation from Apple for updates to the Loop watch complication.","title":"Loop Permissions"},{"location":"build/health/#dexcom-permissions","text":"You also need to enable your Dexcom app to write to the Health app. The steps shown in the figure below are valid for iOS 12. For iOS 13/14, the menu items are: iPhone -> Settings -> Health (heart icon) -> Data Access & Devices -> Dexcom app. Make sure Dexcom has permission to write Blood Glucose (after the 3 hour delay). If you do not do this, you will have a maximum history of 3 hours displayed in the Loop Glucose screen.","title":"Dexcom Permissions"},{"location":"build/loopworkspace/","text":"Loop Workspace \u2301 This page is for the \"advanced\" user. Well, maybe there is a better word for it. Adventurous? Curious? But, if you are a newbie and not into crazy stuff...everything in here is completely and totally just optional. Using or not using LoopWorkspace does not affect your looping nor access to Loop. This page is about me finding an efficient way to answer questions about a topic that takes a lot of words to answer usually...so I'm saving time by making this page. Traditionally, Loopdocs has only told you about the option of downloading Loop as a zip file through those links. But, there's another way of getting that code to your computer called \"git\". Git is a system of \"distributed version control\" that allows remotely (as in not located in same place) collaborating people to work on one project and still track their changes to the same place. For example, if I sent 5 people one document to proof-read at the same time...it is quite possible that the edits I will get back from those 5 people would conflict with each other. Bob may have entirely deleted a sentence while Mary would have added words to that sentence. Git lets these remotely collaborating people deal with \"resolving conflict\" between versions more easily and merging suggestions (pull requests) into a coordinated space. So, in using Git, we can do things with \"git commands\". Like \"Hey git...make me an exact copy of that guy's work over there.\" or \"Hey git, I'd like to compare my version of this page with Joe's version of the same page.\" Or using my old cookbook analogy...\"Hey git, I'd like to start a new cookbook called Italian Desserts.\" But yes, git commands take awhile to properly use. And they are not plain english friendly. Or any kind of friendly really, at least not to very many people. Therefore, we have emphasized the downloading of a zip file to make you not have to use git. Why this page? \u2301 So why am I about to tell you about a Loop repo that involves git? The answer is because LoopWorkspace is a pretty nice feature that you may run across if you are testing new features. And if you do, I do not want to be answering these How To questions in Zulipchat and Facebook repeatedly...so let's consolidate the info here. You can still download zips You do not have to use LoopWorkspace. Just to be clear, everything still works like it used to. LoopWorkspace is just a different option to save the amount of git and cartfile work that you would have to do otherwise. Depending on what you'd like to do, it may be a good option. Usually that \"good option\" is if you are trying new code that involves edits to the Loop frameworks. What is LoopWorkspace? \u2301 I'm going to retread some info that you may have read in the Branches FAQs page earlier, but is really important to this discussion on LoopWorkspace. Loop developers own an account in GitHub called LoopKit . Within that account, the developers have several \"repositories\" that support Loop in particular. A repository is like a book...let's think of it like a cookbook for now. Within the LoopKit account, there are repositories for Loop itself, LoopDocs, and various other supporting \"frameworks\" that are helper repositories for Loop to build correctly. For example, Loop's repo has a lot of the info about the app itself; the outward facing things that you interact with. How information is put to you and taken in from you...that's in Loop repository code. But, there's more than just a user interface for Loop. Loop has to do a lot of complex work like Bluetooth communications, algorithm math, pump communications, etc. The Loop app has help from frameworks to do those other parts. CGMBLEkit for some of the transmitter parts of Loop, RileyLink_ios for the pump managers (talking to the pumps and decoding their information), LoopKit for the algorithm about carbs and insulin curves, etc. When you build Loop, in the background, Loop pulls those other frameworks (7 in total) into the build process using \"Carthage\". Carthage is like a personal shopper. You give it a shopping list (the cartfile in Loop code is that shopping list) and it goes and fetches that for you during the build process. The cartfile shows where the various frameworks are (exactly which GitHub account) and which branch to use. This is an example of what the cartfile looks like for dev branch right now. Many of the frameworks also have their own cartfiles embedded in them. So, when developers are doing code changes in one of those frameworks, it gets to be a nest of effort to keep the cartfiles pointing to the right places and consistent in the embedded cartfiles for the various frameworks. And this is where LoopWorkspace comes in. LoopWorkspace uses submodules instead of cartfiles to define how the frameworks are coordinated for building. The workspace puts all the frameworks closer together and this makes the development process a LOT easier than managing cartfiles. A LOT EASIER. So, as new features might come out for testing, you may see LoopWorkspaces offered for that testing option instead of simply a downloaded zip. The ease of using workspace for developers is the reason why. How do you \"get\" LoopWorkspace? \u2301 In order to use a LoopWorkspace, you need to get a copy of the code (it's different set of code compared to the usual Loop downloads). BUT...don't go to github and simply \"download\" the code like perhaps you are used to. Instead, we need to open Terminal app and do a set of commands to do a special sort of download called \"git clone\". To get that LoopWorkspace code to your computer, you'll need to use a \"git clone\" command LIKE THIS (but not exactly the same...you're going to edit the \"branch-name\" part in there): git clone --branch=branch-name --recurse-submodules https://github.com/LoopKit/LoopWorkspace Now...look carefully and notice two things...that command is getting (1) LoopKit's version of LoopWorkspace and (2) also specifying the branch you want to start working with when the clone is done. So, you will need to edit that \"branch-name\" before using the command so that you are getting started with the branch you want. For example: Automatic-bolus branch command would be: git clone --branch=automatic-bolus --recurse-submodules https://github.com/LoopKit/LoopWorkspace Dev branch command would be: git clone --branch=dev --recurse-submodules https://github.com/LoopKit/LoopWorkspace Where does the clone go? \u2301 A cloned version of Loop doesn't go to your \"Downloads\" folder like you are used to with the usual version of building Loop app. Instead, the cloned version of the LoopWorkspace will go into whatever directory you were sitting in in Terminal app when you did the command. Terminal app by default drops you into your User account's home directory when you first open it, so that's a good assumption on where your cloned LoopWorkspace will go. How can you find your home directory? In Terminal, if you use cd that will take you there automatically. In Finder, shift-command-H will open your \"home\" folder. As you can see, I have a lot of cloned things in my home directory from GitHub that involve Loop. You may have fewer...but be aware, you can always delete and reclone if you are in doubt or confused. Non-LoopKit clones \u2301 Average Loopers can skip this whole section...it's for Developers mostly This whole section about non-LoopKit workspace clones is something almost every Looper can totally skip over. I'm only writing up this section for people who are interested in dabbling in code collaborations/customizations that they would want to maintain separate from LoopKit proper. Scenario: You have a friend named DeveloperBob who has his own version of LoopWorkspace that he's customized. DeveloperBob wants you to look at his code customizations and collaborate with him. You need to change the \"git clone\" command to get DeveloperBob's version, not LoopKit's version. And, you'd want to make sure you specify the branch that the new feature is on, too. DeveloperBob should usually include the branch name when he posts/shares. So, the command line might be edited to something like: git clone --branch=new-features --recurse-submodules https://github.com/DeveloperBob/LoopWorkspace So...if you are trying to grab someone's LoopWorkspace to use it, you'll need to make sure you get the command correct if they don't specify it for you. You can't clone mutliple \"LoopWorkspaces\" into the exact same home directory (because they will have the same name), so you may want to create a subdirectory to put them in. Like you could make a folder called \"DeveloperBob\" and then move into that directory in Terminal before you clone DeveloperBob's LoopWorkspace. How would you do that? Simple cd && mkdir DeveloperBob would make the new folder in your home directory. And then cd DeveloperBob would move your Terminal app to be working inside the new DeveloperBob folder. So if you wanted to clone DeveloperBob's LoopWorkspace, that would be a good way to keep track of where the code came from. If you ever get in doubt and can't remember where your code was cloned from, you can cd LoopWorkspace to get into the directory and then use git remote -v to tell you where it came from. Using LoopWorkspace \u2301 So to summarize, you need to clone LoopWorkspace by: Open Terminal app and enter the command cd to make sure you are at the root directory. Copy and paste the \"git command\" of your choosing (making sure to edit the command properly for the branch you want to use) into Terminal app. Press return. Wait a couple minutes as the clone finishes. You'll be back at a plain Terminal prompt when it's done. Close Terminal app. Find that cloned folder, by opening the Finder app. Click shift-command-H and Finder will open your \"home\" or root folder. Scroll down and you'll see a folder called LoopWorkspace . From withing the LoopWorkspace folder, double-click on the Loop.xcworkspace file to open the project in Xcode. Two things to notice Once you are in LoopWorkspace opened in Xcode, everything is pretty similar for building with only two notable exceptions. You need to click on that blue Loop folder to see the signing targets, and you need to change the build scheme to the left of your phone to \"Loop (Workspace)\" in order to build properly. Oh wait...there is a noticable difference...the speed! LoopWorkspace will build Loop much faster than Loop because of the way it uses submodules. I do rather like that benefit to using LoopWorkspaces too. Updating Loop using LoopWorkspace \u2301 When you want to update your Loop app using LoopWorkspace, you'll need to use git pull --recurse command while in the LoopWorkspace directory in Terminal. That will grab the lastest updates and then you can build. If you still have signing team filled in, you may get a conflict on the command...so either unsign before the git pull or do a git stash and then pull. And with that ends the super basic \"How can I build with a LoopWorkspace?\" questions and use for 90% of the users. So to recap the update process: Open Terminal app Enter cd && cd LoopWorkspace Enter git stash Enter git pull --recurse Open the project in Xcode by double clicking on the Loop.xcworkspace file Click on the blue Loop folder and sign four targets Select Loop (Workspace) as the build scheme (left of the phone selection) and your phone Press build button Checking out different branches within a LoopWorkspace \u2301 More advanced users...I'm not going to explain this in quite so much detail, but yes, you can individually change the branches in a LoopWorkspace. There are 2 main ways to do this. If you're already familiar with Git, the easiest way is to cd into the appropriate repository (like cd rileylink_ios ) and checkout the desired branch. If you're not as familiar with Git, if you edit your .gitmodules directory in LoopWorkspace, you can specify other repos to use (and add a line to specify branches, too). Then if you do a git submodule sync the workspace will sync to new submodules. Then git submodule update --init --recursive --remote will update all the submodules to the right branches and get HEADs detached correctly, etc. Pushing commits from LoopWorkspace \u2301 So you've got a great idea for a new feature, made those changes to your LoopWorkspace and want to get them into Github. Awesome! To understand how to do this, we'll need to understand a bit more about how Git keeps track of changes. In Git, developers can have different \"branches\" (see the branch FAQs page for more details about what a branch is). There are two different types of branches: remote and local. If you were to fork Loop on Github, then the branches that you can see on Github are \"remote\" branches - they're hosted on the Github server. On the other hand, you can also create \"local\" branches that are stored directly on your computer by \"checking out\" the remote branch. You'll need to \"commit\" your changes to the local branch, then \"push\" those changes to the remote branch in order to be able to see them in Github. There are specific commands that you can type into the command line to do all of these actions, but I'm not going to go into detail because there are different ways (like graphic Git editors) that can an easier way to do them. It's a little easier to think about this with an analogy. Let's say you're working at a company that's creating a cookbook. There's a centralized, production-ready version of the cookbook on their website that all the employees can view. Think of the website version of this cookbook as being like the remote branch. You're assigned to change the pancake recipe in the cookbook. Since the company doesn't want employees to make changes directly to the version of the cookbook that the customers see, you need to make a copy of it on your computer so you can make your changes to the pancake recipe. When you make the personal copy on your computer, it's like \"checking out\" the remote branch. Your copy is like the local branch - you can make whatever changes you want without having to worry about customers accidentally seeing them. When you make an important change to the recipe (like adding a photo or changing the ingredients), you might want to make a note in the edit history so that you can go back to that version of the recipe in case you accidentally make unintended changes - those notes you make would be \"commits\". Once you're happy with the recipe, you'll add it back into the production version of the cookbook on the website, which is similar to what you're doing when you \"push\" your changes. Where do the submodules fit in? Each submodule is actually a branch, so when you make changes to multiple submodules, you'll need to commit those changes to their respective branches. Let's say you've made changes to Loop and LoopKit. You'll need to go into Loop and commit + push the changes, then go into LoopKit and commit + push the changes. There are a few different ways to keep track of all these different branches. Some people like using the command line (which is what you're using when you do commands like git clone ) because it's very customizable and has the largest variety of commands. Others like to use graphic Git editors, which make it easier to see changes and be able to do a variety of common actions (like cloning, committing, and pushing) with the push of a button. Everyone has their own preferences, but some methods that Loop contributors have used in the past include the command line, Gitkraken , and SourceTree .","title":"LoopWorkspace"},{"location":"build/loopworkspace/#loop-workspace","text":"This page is for the \"advanced\" user. Well, maybe there is a better word for it. Adventurous? Curious? But, if you are a newbie and not into crazy stuff...everything in here is completely and totally just optional. Using or not using LoopWorkspace does not affect your looping nor access to Loop. This page is about me finding an efficient way to answer questions about a topic that takes a lot of words to answer usually...so I'm saving time by making this page. Traditionally, Loopdocs has only told you about the option of downloading Loop as a zip file through those links. But, there's another way of getting that code to your computer called \"git\". Git is a system of \"distributed version control\" that allows remotely (as in not located in same place) collaborating people to work on one project and still track their changes to the same place. For example, if I sent 5 people one document to proof-read at the same time...it is quite possible that the edits I will get back from those 5 people would conflict with each other. Bob may have entirely deleted a sentence while Mary would have added words to that sentence. Git lets these remotely collaborating people deal with \"resolving conflict\" between versions more easily and merging suggestions (pull requests) into a coordinated space. So, in using Git, we can do things with \"git commands\". Like \"Hey git...make me an exact copy of that guy's work over there.\" or \"Hey git, I'd like to compare my version of this page with Joe's version of the same page.\" Or using my old cookbook analogy...\"Hey git, I'd like to start a new cookbook called Italian Desserts.\" But yes, git commands take awhile to properly use. And they are not plain english friendly. Or any kind of friendly really, at least not to very many people. Therefore, we have emphasized the downloading of a zip file to make you not have to use git.","title":"Loop Workspace"},{"location":"build/loopworkspace/#why-this-page","text":"So why am I about to tell you about a Loop repo that involves git? The answer is because LoopWorkspace is a pretty nice feature that you may run across if you are testing new features. And if you do, I do not want to be answering these How To questions in Zulipchat and Facebook repeatedly...so let's consolidate the info here. You can still download zips You do not have to use LoopWorkspace. Just to be clear, everything still works like it used to. LoopWorkspace is just a different option to save the amount of git and cartfile work that you would have to do otherwise. Depending on what you'd like to do, it may be a good option. Usually that \"good option\" is if you are trying new code that involves edits to the Loop frameworks.","title":"Why this page?"},{"location":"build/loopworkspace/#what-is-loopworkspace","text":"I'm going to retread some info that you may have read in the Branches FAQs page earlier, but is really important to this discussion on LoopWorkspace. Loop developers own an account in GitHub called LoopKit . Within that account, the developers have several \"repositories\" that support Loop in particular. A repository is like a book...let's think of it like a cookbook for now. Within the LoopKit account, there are repositories for Loop itself, LoopDocs, and various other supporting \"frameworks\" that are helper repositories for Loop to build correctly. For example, Loop's repo has a lot of the info about the app itself; the outward facing things that you interact with. How information is put to you and taken in from you...that's in Loop repository code. But, there's more than just a user interface for Loop. Loop has to do a lot of complex work like Bluetooth communications, algorithm math, pump communications, etc. The Loop app has help from frameworks to do those other parts. CGMBLEkit for some of the transmitter parts of Loop, RileyLink_ios for the pump managers (talking to the pumps and decoding their information), LoopKit for the algorithm about carbs and insulin curves, etc. When you build Loop, in the background, Loop pulls those other frameworks (7 in total) into the build process using \"Carthage\". Carthage is like a personal shopper. You give it a shopping list (the cartfile in Loop code is that shopping list) and it goes and fetches that for you during the build process. The cartfile shows where the various frameworks are (exactly which GitHub account) and which branch to use. This is an example of what the cartfile looks like for dev branch right now. Many of the frameworks also have their own cartfiles embedded in them. So, when developers are doing code changes in one of those frameworks, it gets to be a nest of effort to keep the cartfiles pointing to the right places and consistent in the embedded cartfiles for the various frameworks. And this is where LoopWorkspace comes in. LoopWorkspace uses submodules instead of cartfiles to define how the frameworks are coordinated for building. The workspace puts all the frameworks closer together and this makes the development process a LOT easier than managing cartfiles. A LOT EASIER. So, as new features might come out for testing, you may see LoopWorkspaces offered for that testing option instead of simply a downloaded zip. The ease of using workspace for developers is the reason why.","title":"What is LoopWorkspace?"},{"location":"build/loopworkspace/#how-do-you-get-loopworkspace","text":"In order to use a LoopWorkspace, you need to get a copy of the code (it's different set of code compared to the usual Loop downloads). BUT...don't go to github and simply \"download\" the code like perhaps you are used to. Instead, we need to open Terminal app and do a set of commands to do a special sort of download called \"git clone\". To get that LoopWorkspace code to your computer, you'll need to use a \"git clone\" command LIKE THIS (but not exactly the same...you're going to edit the \"branch-name\" part in there): git clone --branch=branch-name --recurse-submodules https://github.com/LoopKit/LoopWorkspace Now...look carefully and notice two things...that command is getting (1) LoopKit's version of LoopWorkspace and (2) also specifying the branch you want to start working with when the clone is done. So, you will need to edit that \"branch-name\" before using the command so that you are getting started with the branch you want. For example: Automatic-bolus branch command would be: git clone --branch=automatic-bolus --recurse-submodules https://github.com/LoopKit/LoopWorkspace Dev branch command would be: git clone --branch=dev --recurse-submodules https://github.com/LoopKit/LoopWorkspace","title":"How do you \"get\" LoopWorkspace?"},{"location":"build/loopworkspace/#where-does-the-clone-go","text":"A cloned version of Loop doesn't go to your \"Downloads\" folder like you are used to with the usual version of building Loop app. Instead, the cloned version of the LoopWorkspace will go into whatever directory you were sitting in in Terminal app when you did the command. Terminal app by default drops you into your User account's home directory when you first open it, so that's a good assumption on where your cloned LoopWorkspace will go. How can you find your home directory? In Terminal, if you use cd that will take you there automatically. In Finder, shift-command-H will open your \"home\" folder. As you can see, I have a lot of cloned things in my home directory from GitHub that involve Loop. You may have fewer...but be aware, you can always delete and reclone if you are in doubt or confused.","title":"Where does the clone go?"},{"location":"build/loopworkspace/#non-loopkit-clones","text":"Average Loopers can skip this whole section...it's for Developers mostly This whole section about non-LoopKit workspace clones is something almost every Looper can totally skip over. I'm only writing up this section for people who are interested in dabbling in code collaborations/customizations that they would want to maintain separate from LoopKit proper. Scenario: You have a friend named DeveloperBob who has his own version of LoopWorkspace that he's customized. DeveloperBob wants you to look at his code customizations and collaborate with him. You need to change the \"git clone\" command to get DeveloperBob's version, not LoopKit's version. And, you'd want to make sure you specify the branch that the new feature is on, too. DeveloperBob should usually include the branch name when he posts/shares. So, the command line might be edited to something like: git clone --branch=new-features --recurse-submodules https://github.com/DeveloperBob/LoopWorkspace So...if you are trying to grab someone's LoopWorkspace to use it, you'll need to make sure you get the command correct if they don't specify it for you. You can't clone mutliple \"LoopWorkspaces\" into the exact same home directory (because they will have the same name), so you may want to create a subdirectory to put them in. Like you could make a folder called \"DeveloperBob\" and then move into that directory in Terminal before you clone DeveloperBob's LoopWorkspace. How would you do that? Simple cd && mkdir DeveloperBob would make the new folder in your home directory. And then cd DeveloperBob would move your Terminal app to be working inside the new DeveloperBob folder. So if you wanted to clone DeveloperBob's LoopWorkspace, that would be a good way to keep track of where the code came from. If you ever get in doubt and can't remember where your code was cloned from, you can cd LoopWorkspace to get into the directory and then use git remote -v to tell you where it came from.","title":"Non-LoopKit clones"},{"location":"build/loopworkspace/#using-loopworkspace","text":"So to summarize, you need to clone LoopWorkspace by: Open Terminal app and enter the command cd to make sure you are at the root directory. Copy and paste the \"git command\" of your choosing (making sure to edit the command properly for the branch you want to use) into Terminal app. Press return. Wait a couple minutes as the clone finishes. You'll be back at a plain Terminal prompt when it's done. Close Terminal app. Find that cloned folder, by opening the Finder app. Click shift-command-H and Finder will open your \"home\" or root folder. Scroll down and you'll see a folder called LoopWorkspace . From withing the LoopWorkspace folder, double-click on the Loop.xcworkspace file to open the project in Xcode. Two things to notice Once you are in LoopWorkspace opened in Xcode, everything is pretty similar for building with only two notable exceptions. You need to click on that blue Loop folder to see the signing targets, and you need to change the build scheme to the left of your phone to \"Loop (Workspace)\" in order to build properly. Oh wait...there is a noticable difference...the speed! LoopWorkspace will build Loop much faster than Loop because of the way it uses submodules. I do rather like that benefit to using LoopWorkspaces too.","title":"Using LoopWorkspace"},{"location":"build/loopworkspace/#updating-loop-using-loopworkspace","text":"When you want to update your Loop app using LoopWorkspace, you'll need to use git pull --recurse command while in the LoopWorkspace directory in Terminal. That will grab the lastest updates and then you can build. If you still have signing team filled in, you may get a conflict on the command...so either unsign before the git pull or do a git stash and then pull. And with that ends the super basic \"How can I build with a LoopWorkspace?\" questions and use for 90% of the users. So to recap the update process: Open Terminal app Enter cd && cd LoopWorkspace Enter git stash Enter git pull --recurse Open the project in Xcode by double clicking on the Loop.xcworkspace file Click on the blue Loop folder and sign four targets Select Loop (Workspace) as the build scheme (left of the phone selection) and your phone Press build button","title":"Updating Loop using LoopWorkspace"},{"location":"build/loopworkspace/#checking-out-different-branches-within-a-loopworkspace","text":"More advanced users...I'm not going to explain this in quite so much detail, but yes, you can individually change the branches in a LoopWorkspace. There are 2 main ways to do this. If you're already familiar with Git, the easiest way is to cd into the appropriate repository (like cd rileylink_ios ) and checkout the desired branch. If you're not as familiar with Git, if you edit your .gitmodules directory in LoopWorkspace, you can specify other repos to use (and add a line to specify branches, too). Then if you do a git submodule sync the workspace will sync to new submodules. Then git submodule update --init --recursive --remote will update all the submodules to the right branches and get HEADs detached correctly, etc.","title":"Checking out different branches within a LoopWorkspace"},{"location":"build/loopworkspace/#pushing-commits-from-loopworkspace","text":"So you've got a great idea for a new feature, made those changes to your LoopWorkspace and want to get them into Github. Awesome! To understand how to do this, we'll need to understand a bit more about how Git keeps track of changes. In Git, developers can have different \"branches\" (see the branch FAQs page for more details about what a branch is). There are two different types of branches: remote and local. If you were to fork Loop on Github, then the branches that you can see on Github are \"remote\" branches - they're hosted on the Github server. On the other hand, you can also create \"local\" branches that are stored directly on your computer by \"checking out\" the remote branch. You'll need to \"commit\" your changes to the local branch, then \"push\" those changes to the remote branch in order to be able to see them in Github. There are specific commands that you can type into the command line to do all of these actions, but I'm not going to go into detail because there are different ways (like graphic Git editors) that can an easier way to do them. It's a little easier to think about this with an analogy. Let's say you're working at a company that's creating a cookbook. There's a centralized, production-ready version of the cookbook on their website that all the employees can view. Think of the website version of this cookbook as being like the remote branch. You're assigned to change the pancake recipe in the cookbook. Since the company doesn't want employees to make changes directly to the version of the cookbook that the customers see, you need to make a copy of it on your computer so you can make your changes to the pancake recipe. When you make the personal copy on your computer, it's like \"checking out\" the remote branch. Your copy is like the local branch - you can make whatever changes you want without having to worry about customers accidentally seeing them. When you make an important change to the recipe (like adding a photo or changing the ingredients), you might want to make a note in the edit history so that you can go back to that version of the recipe in case you accidentally make unintended changes - those notes you make would be \"commits\". Once you're happy with the recipe, you'll add it back into the production version of the cookbook on the website, which is similar to what you're doing when you \"push\" your changes. Where do the submodules fit in? Each submodule is actually a branch, so when you make changes to multiple submodules, you'll need to commit those changes to their respective branches. Let's say you've made changes to Loop and LoopKit. You'll need to go into Loop and commit + push the changes, then go into LoopKit and commit + push the changes. There are a few different ways to keep track of all these different branches. Some people like using the command line (which is what you're using when you do commands like git clone ) because it's very customizable and has the largest variety of commands. Others like to use graphic Git editors, which make it easier to see changes and be able to do a variety of common actions (like cloning, committing, and pushing) with the push of a button. Everyone has their own preferences, but some methods that Loop contributors have used in the past include the command line, Gitkraken , and SourceTree .","title":"Pushing commits from LoopWorkspace"},{"location":"build/overview/","text":"Overview of Build Process \u2301 The overall build process is straightforward if you follow the step-by-step instructions. The steps in the Build menu will help you through the following tasks: Check that you have or can obtain the compatible gear needed to Loop Prepare your computer Download the Loop code to your computer Build the Loop app on your phone After the build, be sure to follow steps to Set up and Operate the Loop app This may appear intimidating at first, but it is quite doable by the average computer user. To orient yourself, consider clicking through the Build Steps from Step 1 through Step 14 and read just the top three boxes on each page. If you're on a desktop, use n for next and p for previous. Time Estimate Summary FAQs Once you've completed this quick overview of the build steps, return and read the pages completely for Steps 1 through 14. It's good idea to skim Oh dear! Build errors? at this point. The most important take-away from that page is that most of the mistakes have already been made and there are correction steps to follow to get your build back on track. If that doesn't help, there are mentors ready and willing to assist. The next stage is to work through the steps and complete the tasks on each page. You can do one a day or blaze through them all. Just be sure to read carefully and if you are confused - reach out for help. Introduction to Loop Video \u2301 If you have never used Loop, click on the link to watch a short Introduction to Loop Video . Old Video This video was created before the Omnipod version of Loop was released in April 2019 - so yes you can definitely use Omnipod Eros pumps The menus have been rearranged slightly but the overall concept of how to use Loop is demonstrated in this video The workout target shown in the video has been completely reworked as Overrides Take it one step at a time... If you are worried about how long this will take, you can always stop at one of the steps and come back later. The steps are meant to be nice stopping points to take breaks if needed. First Step: Compatible Computer \u2301 Now you are ready to start the Build Steps .","title":"Overview"},{"location":"build/overview/#overview-of-build-process","text":"The overall build process is straightforward if you follow the step-by-step instructions. The steps in the Build menu will help you through the following tasks: Check that you have or can obtain the compatible gear needed to Loop Prepare your computer Download the Loop code to your computer Build the Loop app on your phone After the build, be sure to follow steps to Set up and Operate the Loop app This may appear intimidating at first, but it is quite doable by the average computer user. To orient yourself, consider clicking through the Build Steps from Step 1 through Step 14 and read just the top three boxes on each page. If you're on a desktop, use n for next and p for previous. Time Estimate Summary FAQs Once you've completed this quick overview of the build steps, return and read the pages completely for Steps 1 through 14. It's good idea to skim Oh dear! Build errors? at this point. The most important take-away from that page is that most of the mistakes have already been made and there are correction steps to follow to get your build back on track. If that doesn't help, there are mentors ready and willing to assist. The next stage is to work through the steps and complete the tasks on each page. You can do one a day or blaze through them all. Just be sure to read carefully and if you are confused - reach out for help.","title":"Overview of Build Process"},{"location":"build/overview/#introduction-to-loop-video","text":"If you have never used Loop, click on the link to watch a short Introduction to Loop Video . Old Video This video was created before the Omnipod version of Loop was released in April 2019 - so yes you can definitely use Omnipod Eros pumps The menus have been rearranged slightly but the overall concept of how to use Loop is demonstrated in this video The workout target shown in the video has been completely reworked as Overrides Take it one step at a time... If you are worried about how long this will take, you can always stop at one of the steps and come back later. The steps are meant to be nice stopping points to take breaks if needed.","title":"Introduction to Loop Video"},{"location":"build/overview/#first-step-compatible-computer","text":"Now you are ready to start the Build Steps .","title":"First Step: Compatible Computer"},{"location":"build/step1/","text":"Step 1: Compatible Computer \u2301 Time Estimate 5 minutes, if you already have a Mac with Big Sur macOS 30-60 minutes, if you need to install macOS updates Summary The minimum macOS required depends on your phone iOS. If you are procuring a Mac, you'll want to have Big Sur as the operating system. The newest macOS 11.x (Big Sur) will be required for iOS 14.5 (coming soon) The previous macOS 10.15.x (Catalina) works up through iOS 14.4.x The next oldest macOS 10.14.x (Mojave) only works for phones with iOS 13.2 or earlier If your macOS does not meet the minimum, check to see if you can update your macOS If you cannot update your existing computer, you'll need to check into a borrowed computer, patcher tool, or perhaps a new/used computer. FAQs \"Can I use a PC or Windows computer? I don't own an Apple computer.\" Please read this FAQ about using a Virtual Machine . \"Can I borrow someone else's Apple computer?\" Please see this FAQ about Borrowing a Computer . \"How often do I need to use the computer?\" Computer access is required when you are initially installing the Loop app or updating to a newer Loop release. You do NOT need access to an Apple computer to update your phone iOS or to troubleshoot or change Loop settings, such as basal profiles or carb ratios. New M1 Chip Apple Computers \u2301 The newest Apple computers, released in November 2020, are compatible with Loop building. These new computers will make Loop building extremely fast. MacOS \u2301 The minimum macOS depends on the iOS of your iPhone/iPod. The latest macOS, Big Sur (11.x) can be used to build Loop for any of the phone iOS versions listed below and may be required to build on any iPhone with an iOS version starting with iOS 14.5. The Mojave macOS can not be used if your phone is updated past iOS 13.2. If you have iOS 14.5 (not yet out) or newer , the minimum macOS is expected to be Big Sur (11.x) If you have iOS 14 to 14.4.x , the minimum macOS is 10.15. 4 (Catalina), newer is ok (Catalina or Big Sur) If you have iOS 13.4 to 13.7 , the minimum macOS is 10.15.2 (Catalina), newer is ok (Catalina or Big Sur) If you have iOS 12.4 to 13.2 , the minimum macOS is 10.14.4 (Mojave), newer is ok (Catalina or Big Sur) iOS Dictates Your Computer Needs Put simply for Loopers...the more up-to-date you keep your phone iOS, the more up-to-date your computer and macOS will need to be to enable a fresh build of Loop. A new build is required at least once a year. You can't avoid iOS updates forever...you just need to be aware of how they relate to each other if your computer is \"getting on the older side\". There will be more information presented on iOS in Build Step 8: Download Xcode . Do not use any of the beta macOS versions. (If you don't know what that means, don't worry...that means you aren't using one.) Check Your macOS \u2301 You need an Apple computer that has at least the minimum macOS version described above. To find out which version you have installed, click on the little Apple icon in your computer's upper left corner and select About this Mac . It doesn't matter if the computer is a MacBook, iMac, macMini, etc...just so long as it has the minimum macOS you'll need. If your computer does not have the required minimum macOS version, you'll need to check the Software Update button on that screen to see if you can update. If your computer does not give you the option to update to a newer macOS (in other words you are stuck on older versions)...it is quite possible that Apple no longer provides updates for your computer. How old is too old? That will depend on your computer model and year as shown below: Check the Space Available \u2301 While you are on the screen, above, look at the top of the menu and click on the Storage Tab. You will need to know the amount of free space when it's time for Build Step 8: Download Xcode Which Macs Are Compatible with macOS Big Sur? \u2301 This is the preferred operating system for Loop. MacBook, 2015 or newer MacBook Air, 2013 or newer MacBook Pro, late 2013 or newer Mac Mini, 2014 or newer iMac, 2014 or newer iMac Pro, 2017 or newer Mac Pro, 2013 or newer get the full list from Apple for Big Sur Which Macs Are Compatible with macOS Catalina? \u2301 This is an acceptable operating system for Loop if you limit your phone iOS to be 14.4.x or earlier. MacBook, 2015 or newer MacBook Air, 2012 or newer MacBook Pro, 2012 or newer Mac mini, 2012 or newer iMac, 2012 or newer iMac Pro, 2017 or newer Mac Pro, 2013 or newer get the full list from Apple for Catalina Next Step: Compatible iPhone/iPod Touch \u2301 Now you are ready to move onto Step 2 to check if you have a Compatible iPhone/iPod touch .","title":"Step 1 Compatible Computer"},{"location":"build/step1/#step-1-compatible-computer","text":"Time Estimate 5 minutes, if you already have a Mac with Big Sur macOS 30-60 minutes, if you need to install macOS updates Summary The minimum macOS required depends on your phone iOS. If you are procuring a Mac, you'll want to have Big Sur as the operating system. The newest macOS 11.x (Big Sur) will be required for iOS 14.5 (coming soon) The previous macOS 10.15.x (Catalina) works up through iOS 14.4.x The next oldest macOS 10.14.x (Mojave) only works for phones with iOS 13.2 or earlier If your macOS does not meet the minimum, check to see if you can update your macOS If you cannot update your existing computer, you'll need to check into a borrowed computer, patcher tool, or perhaps a new/used computer. FAQs \"Can I use a PC or Windows computer? I don't own an Apple computer.\" Please read this FAQ about using a Virtual Machine . \"Can I borrow someone else's Apple computer?\" Please see this FAQ about Borrowing a Computer . \"How often do I need to use the computer?\" Computer access is required when you are initially installing the Loop app or updating to a newer Loop release. You do NOT need access to an Apple computer to update your phone iOS or to troubleshoot or change Loop settings, such as basal profiles or carb ratios.","title":"Step 1: Compatible Computer"},{"location":"build/step1/#new-m1-chip-apple-computers","text":"The newest Apple computers, released in November 2020, are compatible with Loop building. These new computers will make Loop building extremely fast.","title":"New M1 Chip Apple Computers"},{"location":"build/step1/#macos","text":"The minimum macOS depends on the iOS of your iPhone/iPod. The latest macOS, Big Sur (11.x) can be used to build Loop for any of the phone iOS versions listed below and may be required to build on any iPhone with an iOS version starting with iOS 14.5. The Mojave macOS can not be used if your phone is updated past iOS 13.2. If you have iOS 14.5 (not yet out) or newer , the minimum macOS is expected to be Big Sur (11.x) If you have iOS 14 to 14.4.x , the minimum macOS is 10.15. 4 (Catalina), newer is ok (Catalina or Big Sur) If you have iOS 13.4 to 13.7 , the minimum macOS is 10.15.2 (Catalina), newer is ok (Catalina or Big Sur) If you have iOS 12.4 to 13.2 , the minimum macOS is 10.14.4 (Mojave), newer is ok (Catalina or Big Sur) iOS Dictates Your Computer Needs Put simply for Loopers...the more up-to-date you keep your phone iOS, the more up-to-date your computer and macOS will need to be to enable a fresh build of Loop. A new build is required at least once a year. You can't avoid iOS updates forever...you just need to be aware of how they relate to each other if your computer is \"getting on the older side\". There will be more information presented on iOS in Build Step 8: Download Xcode . Do not use any of the beta macOS versions. (If you don't know what that means, don't worry...that means you aren't using one.)","title":"MacOS"},{"location":"build/step1/#check-your-macos","text":"You need an Apple computer that has at least the minimum macOS version described above. To find out which version you have installed, click on the little Apple icon in your computer's upper left corner and select About this Mac . It doesn't matter if the computer is a MacBook, iMac, macMini, etc...just so long as it has the minimum macOS you'll need. If your computer does not have the required minimum macOS version, you'll need to check the Software Update button on that screen to see if you can update. If your computer does not give you the option to update to a newer macOS (in other words you are stuck on older versions)...it is quite possible that Apple no longer provides updates for your computer. How old is too old? That will depend on your computer model and year as shown below:","title":"Check Your macOS"},{"location":"build/step1/#check-the-space-available","text":"While you are on the screen, above, look at the top of the menu and click on the Storage Tab. You will need to know the amount of free space when it's time for Build Step 8: Download Xcode","title":"Check the Space Available"},{"location":"build/step1/#which-macs-are-compatible-with-macos-big-sur","text":"This is the preferred operating system for Loop. MacBook, 2015 or newer MacBook Air, 2013 or newer MacBook Pro, late 2013 or newer Mac Mini, 2014 or newer iMac, 2014 or newer iMac Pro, 2017 or newer Mac Pro, 2013 or newer get the full list from Apple for Big Sur","title":"Which Macs Are Compatible with macOS Big Sur?"},{"location":"build/step1/#which-macs-are-compatible-with-macos-catalina","text":"This is an acceptable operating system for Loop if you limit your phone iOS to be 14.4.x or earlier. MacBook, 2015 or newer MacBook Air, 2012 or newer MacBook Pro, 2012 or newer Mac mini, 2012 or newer iMac, 2012 or newer iMac Pro, 2017 or newer Mac Pro, 2013 or newer get the full list from Apple for Catalina","title":"Which Macs Are Compatible with macOS Catalina?"},{"location":"build/step1/#next-step-compatible-iphoneipod-touch","text":"Now you are ready to move onto Step 2 to check if you have a Compatible iPhone/iPod touch .","title":"Next Step: Compatible iPhone/iPod Touch"},{"location":"build/step10/","text":"Step 10: Test Settings \u2301 Time Estimate 2 hours to read the rest of LoopDocs (particularly the \"Set up App\", \"Operate\", and \"FAQ\" sections) and LoopTips thoroughly and thoughtfully 15 minutes to take this quiz to make sure you've familiarized yourself with Loop's expected behavior 1-3 days to test settings for safety and to get the most out of Loop Summary A small amount of effort to test/validate basal rates, ISF (correction factor), and carb ratios will eliminate a lot of uncertainty when you start Looping Keep an open mind that settings may need to change as you start Loop Hormones, illness, and failed sites can still happen FAQs \"My endo makes my pump settings, so do I really need to test them?\" Well, nobody is going to force you, but testing your settings even just a couple days will give you a tremendous advantage going into Loop. Your endo may have adjusted your settings in a very different context, with different constraints. What is safe and ideal in traditional pump therapy, may not be the best selection for the Loop app. So, keep an open mind and be willing to adjust settings with the Loop app. \"I have great control, why would I need to test my settings?\" Awesome for you! However, it is quite possible that your \"great control\" comes with a lot of little adjustments all the time. We all got used to needing little bumps and nudges of insulin or carbs over time...and sometimes those bumps and nudges are covering for underlying settings that need adjustment. Testing your settings will help...especially if you are coming from a treatment style that involves memorizing your insulin doses for meals...you may not know your actual carb ratio or ISF as a result of \"just knowing\" your boluses. \"I can't basal test with my 2-year-old. What can I do?\" That is pretty tough. Consult your endo, watch your patterns, and do the best you can...little kiddos are a difficult group to test settings. Loop is just a fancy calculator underneath the hood. The math problems that it is solving depend on the settings that you provide. It's a good idea to make sure you do a bit of settings testing before using Loop. Basal Rates \u2301 If the rates are properly set, Basal insulin will keep your blood glucose steady without food present. You can test your basal by having a relaxing 4-6 hours without eating at least two hours before you begin the test. Does your blood sugar stay steady? Or do you climb and need a correction? Or do you go low and need to eat? Setting basal is a crucial step to setting yourself up for Loop success. It determines how much of the insulin delivered (from basal and bolus) is counted as insulin on board (IOB). Insulin Sensitivity Factor \u2301 The Insulin Sensitivity Facto (ISF), sometimes called Correction Factor, is how much one unit of insulin will bring down your blood glucose (BG). The higher the value of this setting, the more sensitive to insulin you are. An ISF of 30 means one unit of insulin lowers your BG 30 mg/dL in the absence of food or activity, if your basal rates are correct. You can test this setting, after you get determine you basal rates. Simply bring yourself to a higher BG with a glucose tab or other small quick carbs. Wait until you see yourself plateau again at the higher BG, then make a correction. Wait 4-6 hours (again no food) and see where your correction lands your blood sugar. Divide the BG drop by the amount of correction insulin you delivered and that\u2019s your ISF. Note, you can have more than one ISF in a 24 hour period. (Most of Loop configurations enable time-of-day settings - tap the + sign to add another row.) Carb Ratio \u2301 The Carb Ratio (CR) is the amount of carbs covered by one unit of insulin. Ideally, a good carb ratio will restore your BG close to its starting point within 3 hours of the meal . (High fat/protein meals may cause BGs to be impacted longer.) If you are spiking higher than you\u2019d like after a meal, but still coming back to the starting BG, consider prebolusing your meal by 15-20 minutes rather than changing the carb ratio. Other Resources \u2301 Check LoopTips.org for a discussion on how to check all these settings and why they are important . If you\u2019re fascinated by this topic, read the book 'Think Like A Pancreas' for a really great discussion. Finally, remember settings can change periodically. Hormone cycles, steroids, illness, etc. may lead to a need to change settings . Next Step: Make Plans for Loop Data \u2301 Now you are ready to move onto Step 11 to Make Plans for Loop Data .","title":"Step 10 Test Settings"},{"location":"build/step10/#step-10-test-settings","text":"Time Estimate 2 hours to read the rest of LoopDocs (particularly the \"Set up App\", \"Operate\", and \"FAQ\" sections) and LoopTips thoroughly and thoughtfully 15 minutes to take this quiz to make sure you've familiarized yourself with Loop's expected behavior 1-3 days to test settings for safety and to get the most out of Loop Summary A small amount of effort to test/validate basal rates, ISF (correction factor), and carb ratios will eliminate a lot of uncertainty when you start Looping Keep an open mind that settings may need to change as you start Loop Hormones, illness, and failed sites can still happen FAQs \"My endo makes my pump settings, so do I really need to test them?\" Well, nobody is going to force you, but testing your settings even just a couple days will give you a tremendous advantage going into Loop. Your endo may have adjusted your settings in a very different context, with different constraints. What is safe and ideal in traditional pump therapy, may not be the best selection for the Loop app. So, keep an open mind and be willing to adjust settings with the Loop app. \"I have great control, why would I need to test my settings?\" Awesome for you! However, it is quite possible that your \"great control\" comes with a lot of little adjustments all the time. We all got used to needing little bumps and nudges of insulin or carbs over time...and sometimes those bumps and nudges are covering for underlying settings that need adjustment. Testing your settings will help...especially if you are coming from a treatment style that involves memorizing your insulin doses for meals...you may not know your actual carb ratio or ISF as a result of \"just knowing\" your boluses. \"I can't basal test with my 2-year-old. What can I do?\" That is pretty tough. Consult your endo, watch your patterns, and do the best you can...little kiddos are a difficult group to test settings. Loop is just a fancy calculator underneath the hood. The math problems that it is solving depend on the settings that you provide. It's a good idea to make sure you do a bit of settings testing before using Loop.","title":"Step 10: Test Settings"},{"location":"build/step10/#basal-rates","text":"If the rates are properly set, Basal insulin will keep your blood glucose steady without food present. You can test your basal by having a relaxing 4-6 hours without eating at least two hours before you begin the test. Does your blood sugar stay steady? Or do you climb and need a correction? Or do you go low and need to eat? Setting basal is a crucial step to setting yourself up for Loop success. It determines how much of the insulin delivered (from basal and bolus) is counted as insulin on board (IOB).","title":"Basal Rates"},{"location":"build/step10/#insulin-sensitivity-factor","text":"The Insulin Sensitivity Facto (ISF), sometimes called Correction Factor, is how much one unit of insulin will bring down your blood glucose (BG). The higher the value of this setting, the more sensitive to insulin you are. An ISF of 30 means one unit of insulin lowers your BG 30 mg/dL in the absence of food or activity, if your basal rates are correct. You can test this setting, after you get determine you basal rates. Simply bring yourself to a higher BG with a glucose tab or other small quick carbs. Wait until you see yourself plateau again at the higher BG, then make a correction. Wait 4-6 hours (again no food) and see where your correction lands your blood sugar. Divide the BG drop by the amount of correction insulin you delivered and that\u2019s your ISF. Note, you can have more than one ISF in a 24 hour period. (Most of Loop configurations enable time-of-day settings - tap the + sign to add another row.)","title":"Insulin Sensitivity Factor"},{"location":"build/step10/#carb-ratio","text":"The Carb Ratio (CR) is the amount of carbs covered by one unit of insulin. Ideally, a good carb ratio will restore your BG close to its starting point within 3 hours of the meal . (High fat/protein meals may cause BGs to be impacted longer.) If you are spiking higher than you\u2019d like after a meal, but still coming back to the starting BG, consider prebolusing your meal by 15-20 minutes rather than changing the carb ratio.","title":"Carb Ratio"},{"location":"build/step10/#other-resources","text":"Check LoopTips.org for a discussion on how to check all these settings and why they are important . If you\u2019re fascinated by this topic, read the book 'Think Like A Pancreas' for a really great discussion. Finally, remember settings can change periodically. Hormone cycles, steroids, illness, etc. may lead to a need to change settings .","title":"Other Resources"},{"location":"build/step10/#next-step-make-plans-for-loop-data","text":"Now you are ready to move onto Step 11 to Make Plans for Loop Data .","title":"Next Step: Make Plans for Loop Data"},{"location":"build/step11/","text":"Step 11: Make Plans for your Loop Data \u2301 Time Estimate Nightscout: 1-2 hours if you've never done it before and work slowly Nightscout: 20-30 minutes if you have experience in Github and Heroku previously Tidepool: 30-40 minutes to set up account and Tidepool Mobile app Apple Health: 0 minutes, already a part of your system Summary Review the three major systems that can store and show your Loop data. Set up either Tidepool or Nightscout prior to your next endo appointment in order to provide them Looping data to review. FAQs \"Do I have to set one of these up?\" No. But, your health care provider really does need data. Insurance companies definitely demand data too...so make them happy. \"Do I need all three?\" No, you can mix-and-match. Apple Health is already built into your iPhone, so there's no setup involved anyways. Nightscout setup is really actually quite easy and Loopdocs has a complete set of instructions for Loop users . Nightscout has a lot of useful alarms and alerts, too. Tidepool is free and easy to set up, and many clinics already have Tidepool integration. Is it worth the time to setup Nightscout? I feel like I'm already doing so much outside my comfort zone.\" Yes. The feedback from the thousands of people that have come before you is YES, it is worth the minimal time investment to set up a Nightscout site. Ok, technically this step could wait until after you build Loop app...but I have your attention now, so I'm taking advantage of it. With Loop use, you will no longer be using your PDM (if you use Omnipods) and your pump (if you use Medtronic) will be so full of temp basals that the endos will have nothing to download at your next visit. This lack of data will cause a little friction with the health care industry; not good for your insurance records, not good for your endo to feel comfortable, and not good for you to know how your Loop use might be improved with settings tweaks. So let's explore options for your Loop data. There are three great options for where your Loop data can be stored and retrieved: Apple Health app Nightscout Tidepool All of the options are free and easy to setup. Take some time to familiarize yourself with these options and setup your preferred system(s). Personally, I use all three for various aspects of my data's story to me...Nightscout being the most useful day-to-day as a remote caregiver of a young Looper. Next Step: Meet Community \u2301 Now you are ready to move onto Step 12 to Meet Community .","title":"Step 11 Make plans for Loop Data"},{"location":"build/step11/#step-11-make-plans-for-your-loop-data","text":"Time Estimate Nightscout: 1-2 hours if you've never done it before and work slowly Nightscout: 20-30 minutes if you have experience in Github and Heroku previously Tidepool: 30-40 minutes to set up account and Tidepool Mobile app Apple Health: 0 minutes, already a part of your system Summary Review the three major systems that can store and show your Loop data. Set up either Tidepool or Nightscout prior to your next endo appointment in order to provide them Looping data to review. FAQs \"Do I have to set one of these up?\" No. But, your health care provider really does need data. Insurance companies definitely demand data too...so make them happy. \"Do I need all three?\" No, you can mix-and-match. Apple Health is already built into your iPhone, so there's no setup involved anyways. Nightscout setup is really actually quite easy and Loopdocs has a complete set of instructions for Loop users . Nightscout has a lot of useful alarms and alerts, too. Tidepool is free and easy to set up, and many clinics already have Tidepool integration. Is it worth the time to setup Nightscout? I feel like I'm already doing so much outside my comfort zone.\" Yes. The feedback from the thousands of people that have come before you is YES, it is worth the minimal time investment to set up a Nightscout site. Ok, technically this step could wait until after you build Loop app...but I have your attention now, so I'm taking advantage of it. With Loop use, you will no longer be using your PDM (if you use Omnipods) and your pump (if you use Medtronic) will be so full of temp basals that the endos will have nothing to download at your next visit. This lack of data will cause a little friction with the health care industry; not good for your insurance records, not good for your endo to feel comfortable, and not good for you to know how your Loop use might be improved with settings tweaks. So let's explore options for your Loop data. There are three great options for where your Loop data can be stored and retrieved: Apple Health app Nightscout Tidepool All of the options are free and easy to setup. Take some time to familiarize yourself with these options and setup your preferred system(s). Personally, I use all three for various aspects of my data's story to me...Nightscout being the most useful day-to-day as a remote caregiver of a young Looper.","title":"Step 11: Make Plans for your Loop Data"},{"location":"build/step11/#next-step-meet-community","text":"Now you are ready to move onto Step 12 to Meet Community .","title":"Next Step: Meet Community"},{"location":"build/step12/","text":"Step 12: Meet the Community \u2301 Time Estimate Read about your Social Media Options : 5 minutes Join one or more groups: 10 minutes Summary Learn how to use the search tools in Looped, Zulipchat, Loopdocs, and Looptips Learn the motto \"Help us help you\". Learn what information helps in solving a problem in building or in using Loop. Avoid vague phrases and the word \"it\"; aim for details and specifics and use screenshots. FAQs \"I'm worried I'll ask a stupid question\" Don't worry. All the mentors started out as novices. Focus instead on asking a thorough question. A thorough question explains what you've already tried or read, has screenshots of what you are confused by, and any other details you can provide. Online Groups \u2301 There's a whole wonderful community of people already Looping who are willing to help you through the process. This link on Social Media Options walks you through those groups and how to join. The Loop help found at these sites is provided by volunteers. None of the people are paid to answer questions or spend time troubleshooting. They do it because they want to help others. Please decrease their support burden by doing some simple steps before turning to others for help. Please click the image below to watch this video full of tips to make the most of your online resources. Please watch this video (just under 7 minutes) to learn about using announcements and searches in Facebook groups and the LoopDocs pages. Note, the LoopDocs menus were reorganized after this video was prepared. The information on using LoopDocs starts on the home page and continues as you step through the build pages, which includes the gear information. Screenshots \u2301 Please take screenshots of your issue and use them in your posts. On an Apple computer, press shift-command-4 keys at the same time and a little crosshairs tool will appear. Click-and-drag across the area you'd like to include in the screenshot. When you let go of the button, the screenshot will be saved to your desktop with a file name starting with the name \"Screen Shot\". To capture an entire window, press shift-command-4 keys at the same time followed by pressing the space bar and then click on the window of interest. Use screenshots instead of cell phone images whenever possible. Screenshots are higher resolution and easier to read. Take a wider screenshot than you may initially think you need. Especially if you are asking for help with settings or Xcode build errors. Nightscout and Xcode have lots of valuable information off-to-the-side that many people dismiss, when it can be valuable for troubleshooters. Descriptive Language \u2301 Descriptive language doesn't mean the four-letter words that get you frowns at the cocktail parties. Instead, this phrase means to use the most accurate, detailed words you can when asking for help. In summary, try to avoid the word \"it\" and instead use details and information to help fill in the story about why you're asking for help, what you've already tried, and what happened when you tried those things (including screenshots). Let's illustrate with a couple of examples. Example 1 \u2301 Loop users who have been around for several years will remember this bug - fortunately it got fixed a long time ago. Loop no longer allows you to enter your correction range in the wrong order, i.e., 110 to 90, which used to cause the behavior described in this example. The error was fixed quickly, but to get the fix, a rebuild was required. Bad: \"It's not working.\" <----makes me wonder what \"it\" is? What part of \"it\" isn't working exactly? The app? The BG control? The pump integration? Alarms? Bolusing? CGM? Ok: \"My Loop app won't open.\" <---- Ok, so now I know the Loop app itself seems to be the problem, but still don't know if this is a build error or an error that has happened after building. The solutions might be different. Better: \"My Loop app was working yesterday just fine, and now today it's not doing the things like I expect.\" <----- Getting closer. Now, I know this is not a build error and that it sounds like a more recent issue. I'm starting to narrow down the potential causes. This is about as much detail as it takes for me, as a volunteer, to consider helping. I might not have to ask 42 questions, but instead only 4 questions to find the remaining information for troubleshooting. If there were more details, it would save time. Awesome: \"My Loop app was working yesterday. Around lunch time, I went into the settings screen and made some adjustments and ever since it just turns white and closes no matter what I try.\" <---- DEFINITELY getting closer. Now I have a strong suspicion about where the bug is happening and can help with a couple links. GOLD MEDAL WORTHY: \"My Loop app was working yesterday. Around lunch time, I went into the settings screen and made some adjustments to correction ranges. Ever since I did that, the app immediately turns white and shuts down. I have tried restarting my phone, but it has not fixed the problem. I tried searching the docs for 'loop closing' but didn't see results that matched my issue.\" <----- This person is doing an outstanding job of describing the problem. Lots of good details. Has shown initiative to try to use the resources already. Throw in a screenshot, if it was appropriate, and this person will have done an excellent job of helping all of us help him/her. Example 2 \u2301 Bad: \"My Loop app won't build.\" <----- What step are you on? What kind of computer are you using? What macOS? What Xcode version? Have you built successfully before or is this new? Ok: \"I'm trying to update my Loop app to the automatic-bolus branch, and am getting a few errors that I don't understand.\" <----- Wow, sure would be nice to know what those error messages are. Are they red or yellow? A screenshot sure would help here. Better: \"I have a macOS Big Sur 11.2.3 computer with Xcode 12.3. Downloaded Loop-automatic-bolus branch this morning and I'm getting some red errors about an exit code that I don't understand.\" <----- Cool, now I don't have to ask if they updated their macOS like the directions say to do, but I don't know the phone iOS, so I can't rule out Xcode being old. Screenshots are needed to see exact error message. Awesome: \"I have a macOS Big Sur 11.2.3 computer with Xcode 12.3 and my phone is running iOS 14.4. Downloaded Loop-automatic-bolus branch this morning and I'm getting some red errors about an exit code that I don't understand. I've tried everything in the docs and nothing worked.\" <---- While I'm super happy they \"tried everything\", I'm no closer to knowing what the exact error message is nor which \"stuff\" exactly they tried. But this time the iOS is included, and iOS 12.4 requires Xcode 12.4. GOLD MEDAL WORTHY: \"I have a macOS Big Sur 11.2.3 computer with Xcode 12.3 and my phone is running iOS 14.4. Downloaded Loop-automatic-bolus branch this morning and I'm getting some red errors about an exit code 645 that I don't understand. Here's the screenshot of the error message. I tried searching the docs for \"exit code 645\" and didn't see any responses that helped. \" <---- This is the kind of detail that will get you to an answer very fast. Be ok with links \u2301 Often, the best answer to your question for help will be answered with a link. Please don't take offense to getting a quick link back to LoopDocs or LoopTips. This is most often because the question is already answered there and the person is simply saving time by not typing out what already exists elsewhere. There's a ton of information between these two sites, so it can be easy to overlook something if you're not sure what to search for. The mentors know if something is in the docs and they are experts at using the search tool to find the answer and drop the link as a quick response. If you've searched the docs and read the info already, then please include that in your post. That way you don't get linked back to the same part you're already confused about. Plus, letting us know when these docs can be improved is very useful. Next Step: Download Loop Code \u2301 Now you are ready to move onto Step 13 to Download Loop Code .","title":"Step 12 Meet Community"},{"location":"build/step12/#step-12-meet-the-community","text":"Time Estimate Read about your Social Media Options : 5 minutes Join one or more groups: 10 minutes Summary Learn how to use the search tools in Looped, Zulipchat, Loopdocs, and Looptips Learn the motto \"Help us help you\". Learn what information helps in solving a problem in building or in using Loop. Avoid vague phrases and the word \"it\"; aim for details and specifics and use screenshots. FAQs \"I'm worried I'll ask a stupid question\" Don't worry. All the mentors started out as novices. Focus instead on asking a thorough question. A thorough question explains what you've already tried or read, has screenshots of what you are confused by, and any other details you can provide.","title":"Step 12: Meet the Community"},{"location":"build/step12/#online-groups","text":"There's a whole wonderful community of people already Looping who are willing to help you through the process. This link on Social Media Options walks you through those groups and how to join. The Loop help found at these sites is provided by volunteers. None of the people are paid to answer questions or spend time troubleshooting. They do it because they want to help others. Please decrease their support burden by doing some simple steps before turning to others for help. Please click the image below to watch this video full of tips to make the most of your online resources. Please watch this video (just under 7 minutes) to learn about using announcements and searches in Facebook groups and the LoopDocs pages. Note, the LoopDocs menus were reorganized after this video was prepared. The information on using LoopDocs starts on the home page and continues as you step through the build pages, which includes the gear information.","title":"Online Groups"},{"location":"build/step12/#screenshots","text":"Please take screenshots of your issue and use them in your posts. On an Apple computer, press shift-command-4 keys at the same time and a little crosshairs tool will appear. Click-and-drag across the area you'd like to include in the screenshot. When you let go of the button, the screenshot will be saved to your desktop with a file name starting with the name \"Screen Shot\". To capture an entire window, press shift-command-4 keys at the same time followed by pressing the space bar and then click on the window of interest. Use screenshots instead of cell phone images whenever possible. Screenshots are higher resolution and easier to read. Take a wider screenshot than you may initially think you need. Especially if you are asking for help with settings or Xcode build errors. Nightscout and Xcode have lots of valuable information off-to-the-side that many people dismiss, when it can be valuable for troubleshooters.","title":"Screenshots"},{"location":"build/step12/#descriptive-language","text":"Descriptive language doesn't mean the four-letter words that get you frowns at the cocktail parties. Instead, this phrase means to use the most accurate, detailed words you can when asking for help. In summary, try to avoid the word \"it\" and instead use details and information to help fill in the story about why you're asking for help, what you've already tried, and what happened when you tried those things (including screenshots). Let's illustrate with a couple of examples.","title":"Descriptive Language"},{"location":"build/step12/#example-1","text":"Loop users who have been around for several years will remember this bug - fortunately it got fixed a long time ago. Loop no longer allows you to enter your correction range in the wrong order, i.e., 110 to 90, which used to cause the behavior described in this example. The error was fixed quickly, but to get the fix, a rebuild was required. Bad: \"It's not working.\" <----makes me wonder what \"it\" is? What part of \"it\" isn't working exactly? The app? The BG control? The pump integration? Alarms? Bolusing? CGM? Ok: \"My Loop app won't open.\" <---- Ok, so now I know the Loop app itself seems to be the problem, but still don't know if this is a build error or an error that has happened after building. The solutions might be different. Better: \"My Loop app was working yesterday just fine, and now today it's not doing the things like I expect.\" <----- Getting closer. Now, I know this is not a build error and that it sounds like a more recent issue. I'm starting to narrow down the potential causes. This is about as much detail as it takes for me, as a volunteer, to consider helping. I might not have to ask 42 questions, but instead only 4 questions to find the remaining information for troubleshooting. If there were more details, it would save time. Awesome: \"My Loop app was working yesterday. Around lunch time, I went into the settings screen and made some adjustments and ever since it just turns white and closes no matter what I try.\" <---- DEFINITELY getting closer. Now I have a strong suspicion about where the bug is happening and can help with a couple links. GOLD MEDAL WORTHY: \"My Loop app was working yesterday. Around lunch time, I went into the settings screen and made some adjustments to correction ranges. Ever since I did that, the app immediately turns white and shuts down. I have tried restarting my phone, but it has not fixed the problem. I tried searching the docs for 'loop closing' but didn't see results that matched my issue.\" <----- This person is doing an outstanding job of describing the problem. Lots of good details. Has shown initiative to try to use the resources already. Throw in a screenshot, if it was appropriate, and this person will have done an excellent job of helping all of us help him/her.","title":"Example 1"},{"location":"build/step12/#example-2","text":"Bad: \"My Loop app won't build.\" <----- What step are you on? What kind of computer are you using? What macOS? What Xcode version? Have you built successfully before or is this new? Ok: \"I'm trying to update my Loop app to the automatic-bolus branch, and am getting a few errors that I don't understand.\" <----- Wow, sure would be nice to know what those error messages are. Are they red or yellow? A screenshot sure would help here. Better: \"I have a macOS Big Sur 11.2.3 computer with Xcode 12.3. Downloaded Loop-automatic-bolus branch this morning and I'm getting some red errors about an exit code that I don't understand.\" <----- Cool, now I don't have to ask if they updated their macOS like the directions say to do, but I don't know the phone iOS, so I can't rule out Xcode being old. Screenshots are needed to see exact error message. Awesome: \"I have a macOS Big Sur 11.2.3 computer with Xcode 12.3 and my phone is running iOS 14.4. Downloaded Loop-automatic-bolus branch this morning and I'm getting some red errors about an exit code that I don't understand. I've tried everything in the docs and nothing worked.\" <---- While I'm super happy they \"tried everything\", I'm no closer to knowing what the exact error message is nor which \"stuff\" exactly they tried. But this time the iOS is included, and iOS 12.4 requires Xcode 12.4. GOLD MEDAL WORTHY: \"I have a macOS Big Sur 11.2.3 computer with Xcode 12.3 and my phone is running iOS 14.4. Downloaded Loop-automatic-bolus branch this morning and I'm getting some red errors about an exit code 645 that I don't understand. Here's the screenshot of the error message. I tried searching the docs for \"exit code 645\" and didn't see any responses that helped. \" <---- This is the kind of detail that will get you to an answer very fast.","title":"Example 2"},{"location":"build/step12/#be-ok-with-links","text":"Often, the best answer to your question for help will be answered with a link. Please don't take offense to getting a quick link back to LoopDocs or LoopTips. This is most often because the question is already answered there and the person is simply saving time by not typing out what already exists elsewhere. There's a ton of information between these two sites, so it can be easy to overlook something if you're not sure what to search for. The mentors know if something is in the docs and they are experts at using the search tool to find the answer and drop the link as a quick response. If you've searched the docs and read the info already, then please include that in your post. That way you don't get linked back to the same part you're already confused about. Plus, letting us know when these docs can be improved is very useful.","title":"Be ok with links"},{"location":"build/step12/#next-step-download-loop-code","text":"Now you are ready to move onto Step 13 to Download Loop Code .","title":"Next Step: Download Loop Code"},{"location":"build/step13/","text":"Step 13: Download Loop Code \u2301 Time Estimate 10 minutes to read this page 1 minute to download Loop code Summary There are two branches suitable for new Loopers FAQs \"What the heck is a branch?\" That's a great question. We have a page all about Branch FAQs \"How can I tell which version I have downloaded if I'm unsure?\" The downloaded Loop folder's name will give you an indication of which branch you downloaded. The folder name will be in the format Loop-BranchName . \"When do I need to download new Loop code?\" Anytime you want to update your Loop app to get new features, you'll simply download the code again by clicking on the links below. The links always go to the most recent version of each of the branches. It's a good idea is to delete your old downloads before making a new one, just to avoid confusion. Pick a Branch to Download \u2301 You\u2019ll need to download the Loop code. You will then build the app on your computer with Xcode. Once the app is built. in order to build the app on your computer. Various versions of Loop code are available. Both master and automatic-bolus are pretty stable and widely used. The Compare Version webpage explains the differences between master and automatic-bolus. Click on one of the links below to download Loop code and then follow the rest of the steps until you have a new version on your device. (These links always point to the most recent version of the code.) Loop: master branch Loop: automatic-bolus branch Advanced Users Only Only build the dev branch if you're a developer/advanced user: Loop: dev branch Note, the dev branch will soon require iOS 14 on your device Once you install the dev branch on a device, you might have to delete the app to return to master or automatic-bolus Repeat: only build the dev branch if you're a developer/advanced user The dev branch user interface is different, i.e., the documentation in LoopDocs does not match the screens you will see if you build the dev branch Store and Name Your Download Properly \u2301 It is best practice to leave your Loop code in your Downloads folder. If you store your Loop code in a different folder than Downloads (such as your Documents folder or Desktop), make sure the specified folder is not an iCloud drive. Storing your Loop code in an iCloud drive folder will prevent Loop from building successfully. How do you know if a folder is an iCloud drive? Check your System Preferences. If your System Preferences for iCloud is set as shown below, your Documents and Desktop folders are iCloud drives and NOT appropriate places to save your Loop download. Depending on your browser and settings, your Loop download may or may not automatically unzip. If it does not unzip automatically, you can right-click on the zip file and choose to \"Open With\" Archive Utility. This will create a blue folder called Loop-master . HOWEVER, if you already have an existing Loop-master folder from a previous download, the name of the next download will be something like Loop-master (1) . Next Step: Build Loop App \u2301 Now you are ready to move onto Step 14 to Build Loop App .","title":"Step 13 Download Loop code"},{"location":"build/step13/#step-13-download-loop-code","text":"Time Estimate 10 minutes to read this page 1 minute to download Loop code Summary There are two branches suitable for new Loopers FAQs \"What the heck is a branch?\" That's a great question. We have a page all about Branch FAQs \"How can I tell which version I have downloaded if I'm unsure?\" The downloaded Loop folder's name will give you an indication of which branch you downloaded. The folder name will be in the format Loop-BranchName . \"When do I need to download new Loop code?\" Anytime you want to update your Loop app to get new features, you'll simply download the code again by clicking on the links below. The links always go to the most recent version of each of the branches. It's a good idea is to delete your old downloads before making a new one, just to avoid confusion.","title":"Step 13: Download Loop Code"},{"location":"build/step13/#pick-a-branch-to-download","text":"You\u2019ll need to download the Loop code. You will then build the app on your computer with Xcode. Once the app is built. in order to build the app on your computer. Various versions of Loop code are available. Both master and automatic-bolus are pretty stable and widely used. The Compare Version webpage explains the differences between master and automatic-bolus. Click on one of the links below to download Loop code and then follow the rest of the steps until you have a new version on your device. (These links always point to the most recent version of the code.) Loop: master branch Loop: automatic-bolus branch Advanced Users Only Only build the dev branch if you're a developer/advanced user: Loop: dev branch Note, the dev branch will soon require iOS 14 on your device Once you install the dev branch on a device, you might have to delete the app to return to master or automatic-bolus Repeat: only build the dev branch if you're a developer/advanced user The dev branch user interface is different, i.e., the documentation in LoopDocs does not match the screens you will see if you build the dev branch","title":"Pick a Branch to Download"},{"location":"build/step13/#store-and-name-your-download-properly","text":"It is best practice to leave your Loop code in your Downloads folder. If you store your Loop code in a different folder than Downloads (such as your Documents folder or Desktop), make sure the specified folder is not an iCloud drive. Storing your Loop code in an iCloud drive folder will prevent Loop from building successfully. How do you know if a folder is an iCloud drive? Check your System Preferences. If your System Preferences for iCloud is set as shown below, your Documents and Desktop folders are iCloud drives and NOT appropriate places to save your Loop download. Depending on your browser and settings, your Loop download may or may not automatically unzip. If it does not unzip automatically, you can right-click on the zip file and choose to \"Open With\" Archive Utility. This will create a blue folder called Loop-master . HOWEVER, if you already have an existing Loop-master folder from a previous download, the name of the next download will be something like Loop-master (1) .","title":"Store and Name Your Download Properly"},{"location":"build/step13/#next-step-build-loop-app","text":"Now you are ready to move onto Step 14 to Build Loop App .","title":"Next Step: Build Loop App"},{"location":"build/step14/","text":"Step 14: Build Loop App \u2301 Time Estimate 60-80 minutes for first time builders 10-15 minutes for a repeat builders Summary Open the Loop code you downloaded in Step 13 Connect the phone to the computer Trust the computer (on the phone) Select your phone from the top of the device list in Xcode Register the phone (if first time building to phone) Sign the targets Press the build button Enter computer password four times during the build (for first build on computer) Watch in awe as you just built your very own Loop app FAQs \"I got a build error! YIKES...what do I do?\" Check out the Build Errors page for solutions. \"The build seems to take a long time; is that normal?\" Yes, the first build of a new download will take quite a long time. Just be patient, one of the build steps may take much longer than all the others. The build process always ends with either a \"Build Succeeded\" or \"Build Failed\" message; so just wait it out until you see one of those displayed. If you are away from you computer when the build succeeds, you might miss the \"Build Succeeded\" message, but you will see \"Running Loop on <your phone name>\" at the very top of the Xcode window - and the Loop app will be open on your phone. The final step of a successful build is for Xcode to copy the completed build to your iPhone; if your phone is locked, Xcode pops up a message letting you know. Unlock your phone to continue. Open Loop Project in Xcode \u2301 Open a Finder window. Open the Downloads folder. Open your \"Loop\" code folder. If you downloaded the master branch, your folder name should be Loop-master . If you downloaded the automatic-bolus branch, your folder name should be Loop-automatic-bolus . Open your \"Loop\" code folder and double click on Loop.xcodeproj. A warning will appear asking if you want to \"Trust and Open\" the \"Loop\" project downloaded from the internet. Click \"Trust and Open\" to start the Xcode application. Xcode will get itself organized; this may take a few minutes. Wait for the indexing to complete. Once Xcode has finished indexing, the Loop project's various folders and files will appear in the far left column. We are now going to make three important sets of clicks: First click: At the very top of all the folders and files listed, click on the blue icon next to the word \"Loop\". This will populate the middle part of the Xcode window with some information. Second (set of) clicks: Now click on the box in the middle screen to reveal the targets column underneath that box. The four targets we will sign in the upcoming steps are now easily viewable. The four targets are Loop, Loop Status Extension, Watch App, and WatchApp Extension. Select the Loop target, shown in the screenshot below. It will be highlighted in blue to let you know it is selected. Third Click: With the Loop target selected, click on \"Signing & Capabilities\" up near the top of the screen. After you click on that, you should see a \"Signing\" section occupying the bulk of the middle window. If you are missing the \"Signing & Capabilities\" section and didn't have to click somewhere else to see that part, you are running a much older version of Xcode (Xcode 10 or earlier). Please update Xcode and possibly macOS now. Connect Your iPhone to Computer \u2301 Connect your iPhone via cable to the computer, select your iPhone from the very top of the drop-down list. Your iPhone\u2019s personal name should be at the top of the list. Don't accidentally select the generic iOS simulators listed below your iPhone's name. Helpful Tips If this is the first time your iPhone has been plugged into this computer, you will need to open the iPhone and select \"Trust this Computer\" before your device will be useable in the menu selection. If this is the first time your watch has been paired to the iPhone, you will need to select \"Trust this Computer\" on your watch. Most Common Mistake The most common mistake in this step is not selecting your actual phone as shown in the second screenshot below. The default list is just a name of general phone models under a subheading called \"iOS Simulators\"...don't be fooled by those. Your ACTUAL phone will be up above that list of all the various simulator phone models. You may need to scroll to the top of the list to see it. Make sure you select your actual phone, not just a simulator phone model. Free Account \u2301 Free Developer Account Users: READ ME If you are using a free developer account, you will need to do an extra step before you can successfully sign the targets. As a free developer, you are restricted from building apps that have Siri or push notification capabilities built-in. Loop has both of these capabilities, so you will need to disable them before signing and building your app. The push notification capability is used for setting remote overrides; disabling it will not affect other notifications on the Loop phone, e.g., \"Loop Failure\", \"Pump Reservoir Low\", etc. Click on the small x next to the Siri and push notification lines located at the bottom of the Signing & Capabilities box. You need to do this in both the Loop and WatchApp Extension targets. Sign the Targets \u2301 Once you select your device (your iPhone's name), you are ready to start signing the targets. Start with the Loop target, the first one on the target list. Under the \"Signing\" area, ensure that you have \"All\" selected near the top and then select the dropdown menu where it currently says \"none\". Choose the team you'd like to sign with. Make sure you keep the \"automatically manage signing\" box checked in the signing area. If you select a team name with (personal team), your app will expire after 7 days and you must disable Push Notification and Siri as mentioned above. If you select a team name without (personal team), your app will last a full year. If you never signed up for a Free Developer Account , you will not have a (personal team) showing. Once you choose your signing team, Xcode will automatically generate provisioning profiles and signing certificates. If this is the first time you are building on this iPhone with this developer account, you may be prompted to register the device. Simply click on the \"Register Device\" button to confirm. Note - you must be connected to the Internet for this step because your computer needs to communicate with Apple to register that device. A successfully signed target will have a provisioning profile and signing certificate similar to the screenshot below. Click on each of the three remaining targets shown in the red box below, and repeat the signing steps by choosing the same team name as you selected in the first target. The four targets that must be signed prior to building the Loop app are Loop, Loop Status Extension, Watch App, and WatchApp Extension. Advanced Users Only There is one more target, Loop Intent Extension, which must be signed to build the dev branch. Please only build the dev branch if you're a developer/advanced user interested in testing Once you install the dev branch on a device, you should delete the Loop app, including all your settings, if you decide to return to master or automatic-bolus Repeat: only build the dev branch if you're a developer/advanced user The dev branch user interface is different, i.e., the documentation in LoopDocs does not match the screens you will see if you build the dev branch Code Customizations \u2301 New Loop users : Customizations are not a required part of any Loop build. As you gain experience using your Loop app, you may want to customize some of the features. First time builders are encouraged to build with the standard, default code. You can always update your Loop app to add customizations at a later time, using the same download. Subsequent build time is much faster than the initial build for a given download. If you want any custom configurations to your Loop or Loop Apple Watch apps, follow the step-by-step instructions on the Code Customizations page prior to pressing the Build button. When you've finished your customizations, come on back to this section and continue with the rest of the build. Pair Your Apple Watch \u2301 New Apple Watch users : If you have an unopened Apple watch and want to use it with Loop, first pair the watch with the iPhone before continuing to the next steps. If you get a new watch after building the Loop app, you'll need to redo your Loop build. (Don't worry, it's as easy as pressing play on your saved Loop project.) Existing Apple Watch users : Please update your watchOS prior to building the Loop app. The current version of Loop requires watchOS 4.1 or newer. SAFETY INTERMISSION \u2301 STOP STOP STOP ... This intermission is about safety. Some new users input settings and start using the Loop app without fully understanding the effects of the configuration values. That is a bad idea. DO NOT WING THE SETUP Sorry to shout, but better to get your attention now before a mistake is made. Continue to use these docs to finish setting up your app after it builds . DO NOT ENTER ONE LOOP APP SETTING WITHOUT HAVING THE DOCS OPEN AND FOLLOWING ALONG AT THE SAME TIME. The Loop app automatically doses insulin based on your configuration settings and your meal entries. The section in these docs called \"Set up App\" (look for it now at the top of this webpage - it's a menu title) needs to be used to input all the settings in your Loop app once it is built. READ ALONG WITH THE DOCS to enter those settings. There are important safety tips and advice in there. And then after you finish setup, you need to read the \"Operate\" section BEFORE YOU OPERATE LOOP. Don't bolus for a meal, or enter a meal, until you've read through the Operate section. Please heed this advice about using the setup and operate sections. People have ignored this advice and gotten themselves, or their child, into a dangerous situation by entering incorrect settings and going straight to Closed Loop before understanding how Loop operates. They skim and think that's good enough. You should not skim where your health, or your child's health, is concerned. you should read these documents carefully and UNDERSTAND them before you proceed. There is a lot of information. The two most important warnings are highlighted here. TOP TWO SAFETY MISTAKES YOU SHOULD AVOID Do not enter settings if you are unsure of the correct value or what the setting means. Don't just guess an ISF, carb ratio, basal rate, suspend threshold or delivery limits. If you don't know your settings or know what the terms mean, stop and try one of these steps: Search the docs for the term: all the settings terms are defined in the docs. Ask your endo if you don't have established values for those settings. Still confused - this is a time to post on a Loop Social Media site rather than guess. Example post: \"I've read the docs but I'm still confused about xxx\". You may get a link back to a specific section of one page. Read that section first. If that doesn't clarify things, then reply in that same post with what confuses you. Please - pick one site; work with one mentor; do not post in multiple places at once. Once carb entries are saved using the Carb Entry to Meal Bolus Menus or the Edit Carbohydrates Menu , Loop will provide increased insulin to handle that entry while in closed loop. If your settings are wrong, the amount of insulin will be wrong. The Loop app is an automated insulin delivery system and if it thinks you have carbs on board, it will try to give you appropriate insulin for those carbs. You must delete or edit a saved carb entry if you no longer want Loop to provide insulin for it. The Apple Health Permissions should be configured so that Loop can write carbohydrates (report to other apps), but Loop should NOT have permission to read carbohydrates. This prevents inadvertent entries from other apps or by a mistaken manual entry, e.g., entering a Blood Glucose entry in the carbohydrate section of Apple Health. Now that the safety intermission is done, you can continue on with the last step in building your app. Build Loop \u2301 Have you signed the four targets? Are you done with any customizations? Has your Apple watch been paired and updated? Is your iPhone unlocked and plugged into the computer? Let\u2019s finish the installation of the Loop app onto your iPhone. Double-check to make sure your iPhone's name is still selected and then press the \u201cBuild\u201d button to start Xcode on its way. Helpful Tips The final step of a successful build is for Xcode to copy the completed build to your iPhone; if your phone is locked, Xcode pops up a message letting you know. Unlock your phone to continue. You\u2019ll see the progression of the build in the status window (top middle of Xcode). New builds can take 40-60 minutes, depending on the speed of the computer and the internet. Just be patient. The progress will get stay on one step/task for a very long time, and then the others will fly by. Not every step is equal in duration. Do not give up on the build. Xcode will ALWAYS tell you eventually that the build either succeeded or failed via a short (self-disappearing) pop-up message on the computer display. If you miss the message, you can look at the top of the Xcode window to see a \"Running Loop...\" (success) or \"Build Failed\" (failure) message where the step progress was previously counting down. Are you the impatient type? If you just simply can't bear the uncertainty of not seeing that things are progressing, you can take a peek \"under the hood\" and watch the individual build steps by clicking on the Report Navigator icon and then the build row at the top of the list. You can watch the slow list of scheme building while you wait. First Time Builder or First Time on this Computer Sometime during your first build on a computer, be ready for a codesign/keychain access prompt that you will see part-way through the build process. When you see this prompt, shown above, enter your computer password (the one you use to log in) and then select \"Always Allow\". It is normal for this prompt to come up four times in a row even after you enter the correct password. In frustration, people think the prompt must be broken because it keeps reappearing and then people will press deny or cancel. Don't press deny. Keep entering your computer password and pressing the \"Always Allow\" button as many times as it takes (four times to be exact; one for each target in Xcode). After four times of successful password entry, the build will continue. While you are waiting... While you are waiting for the build to complete, check out two pages: Red Loop Troubleshooting And if you plan to use an Omnipod: Pod Pairing Toubleshooting Ok, back to the building instructions. Build Finished \u2301 First Time Building on a New Device? If this is the first time you have installed an app on your iPhone using your developer account, you may get a warning like the one shown below after a successful build. Don't worry, Loop usually installed just fine on the phone but needs you to do an extra step on the phone before the Loop app can open. Just follow the directions shown in the warning for what you need to do on your iPhone. Go to Settings->General->Device Management (or profiles, Profiles & Device Management on newer iOS) and enable trust for your Developer Account. If you are missing the Device Management/Profiles option in your iPhone settings, then head over to this Build Error section to find the solution. Build Succeeded \u2301 Congrats! If the build is successful, you'll see the message \"Running Loop...\" across the top of the Xcode window. Pick up your phone and look at it. You can unplug your phone from the computer now. You will get an Xcode message window that says \"Lost connection to the debugger on <your phone name>\". Just click OK. Your brand new Loop app will automatically open a screen asking you to allow Loop to send you notifications. The Health app permissions screen will be visible in the background, but you must answer the Notification request first. Click Allow to enable Loop to send you notifications. Now the Health permissions screen is active. Click on the Turn All Categories On line and then immediately turn OFF the permission to read Carbohydrates . The end result is that Health should have permission to read and write Blood Glucose and Insulin Delivery; permission to write Carbohydrates ( NOT read carbs ); and permission to read Sleep Data. When the permissions are set correctly, i.e., match the image below, click Allow in the upper right corner. Next, you will use the Set up App section of this website to keep proceeding safely. FAQ: But what about those yellow alerts that remain in Xcode? Should I worry about them? If you see yellow alerts after your build is done...those are not an issue. Whether your build succeeded or failed...the yellow warnings play no role in either outcome. Don't try to resolve them or fret about them. They mean nothing to the successful use of your Loop app. Build Failed \u2301 If you get a message that your build failed and see RED ERROR messages, go to the Build Errors page to find the steps to fix your build error. Most build errors are covered on that page along with instructions on how to fix them and how to ask for help. Once you've resolved the issue and start the build process again, Xcode will continue to show a red circle on the top line from the previous failure. Don't worry about it. As long as the steps of the build are showing across the top line, Xcode is still working on the build. When the build succeeds, the red circle will disappear. Summary \u2301 If your build failed, you need to proceed to the Build Errors page to find the solution. Please go there first to find the help you need. If your build was successful but your phone was locked, you will see an Xcode message window that says \"Unlock <your phone name> to Continue\". Simply unlock your phone and the app will be copied onto your phone and automatically open. If there were no build errors, you're done building your Loop app. If your phone is still plugged into you computer, you can unplug it. You will get an Xcode message window that says \"Lost connection to the debugger on <your phone name>\". Just click OK. The next step is the begin the Set up App process. Next Steps \u2301 Go to the Set up App menu to configure your Loop and follow that up with the first Operate page and work those pages as you learn to run Loop safely.","title":"Step 14 Build Loop app"},{"location":"build/step14/#step-14-build-loop-app","text":"Time Estimate 60-80 minutes for first time builders 10-15 minutes for a repeat builders Summary Open the Loop code you downloaded in Step 13 Connect the phone to the computer Trust the computer (on the phone) Select your phone from the top of the device list in Xcode Register the phone (if first time building to phone) Sign the targets Press the build button Enter computer password four times during the build (for first build on computer) Watch in awe as you just built your very own Loop app FAQs \"I got a build error! YIKES...what do I do?\" Check out the Build Errors page for solutions. \"The build seems to take a long time; is that normal?\" Yes, the first build of a new download will take quite a long time. Just be patient, one of the build steps may take much longer than all the others. The build process always ends with either a \"Build Succeeded\" or \"Build Failed\" message; so just wait it out until you see one of those displayed. If you are away from you computer when the build succeeds, you might miss the \"Build Succeeded\" message, but you will see \"Running Loop on <your phone name>\" at the very top of the Xcode window - and the Loop app will be open on your phone. The final step of a successful build is for Xcode to copy the completed build to your iPhone; if your phone is locked, Xcode pops up a message letting you know. Unlock your phone to continue.","title":"Step 14: Build Loop App"},{"location":"build/step14/#open-loop-project-in-xcode","text":"Open a Finder window. Open the Downloads folder. Open your \"Loop\" code folder. If you downloaded the master branch, your folder name should be Loop-master . If you downloaded the automatic-bolus branch, your folder name should be Loop-automatic-bolus . Open your \"Loop\" code folder and double click on Loop.xcodeproj. A warning will appear asking if you want to \"Trust and Open\" the \"Loop\" project downloaded from the internet. Click \"Trust and Open\" to start the Xcode application. Xcode will get itself organized; this may take a few minutes. Wait for the indexing to complete. Once Xcode has finished indexing, the Loop project's various folders and files will appear in the far left column. We are now going to make three important sets of clicks: First click: At the very top of all the folders and files listed, click on the blue icon next to the word \"Loop\". This will populate the middle part of the Xcode window with some information. Second (set of) clicks: Now click on the box in the middle screen to reveal the targets column underneath that box. The four targets we will sign in the upcoming steps are now easily viewable. The four targets are Loop, Loop Status Extension, Watch App, and WatchApp Extension. Select the Loop target, shown in the screenshot below. It will be highlighted in blue to let you know it is selected. Third Click: With the Loop target selected, click on \"Signing & Capabilities\" up near the top of the screen. After you click on that, you should see a \"Signing\" section occupying the bulk of the middle window. If you are missing the \"Signing & Capabilities\" section and didn't have to click somewhere else to see that part, you are running a much older version of Xcode (Xcode 10 or earlier). Please update Xcode and possibly macOS now.","title":"Open Loop Project in Xcode"},{"location":"build/step14/#connect-your-iphone-to-computer","text":"Connect your iPhone via cable to the computer, select your iPhone from the very top of the drop-down list. Your iPhone\u2019s personal name should be at the top of the list. Don't accidentally select the generic iOS simulators listed below your iPhone's name. Helpful Tips If this is the first time your iPhone has been plugged into this computer, you will need to open the iPhone and select \"Trust this Computer\" before your device will be useable in the menu selection. If this is the first time your watch has been paired to the iPhone, you will need to select \"Trust this Computer\" on your watch. Most Common Mistake The most common mistake in this step is not selecting your actual phone as shown in the second screenshot below. The default list is just a name of general phone models under a subheading called \"iOS Simulators\"...don't be fooled by those. Your ACTUAL phone will be up above that list of all the various simulator phone models. You may need to scroll to the top of the list to see it. Make sure you select your actual phone, not just a simulator phone model.","title":"Connect Your iPhone to Computer"},{"location":"build/step14/#free-account","text":"Free Developer Account Users: READ ME If you are using a free developer account, you will need to do an extra step before you can successfully sign the targets. As a free developer, you are restricted from building apps that have Siri or push notification capabilities built-in. Loop has both of these capabilities, so you will need to disable them before signing and building your app. The push notification capability is used for setting remote overrides; disabling it will not affect other notifications on the Loop phone, e.g., \"Loop Failure\", \"Pump Reservoir Low\", etc. Click on the small x next to the Siri and push notification lines located at the bottom of the Signing & Capabilities box. You need to do this in both the Loop and WatchApp Extension targets.","title":"Free Account"},{"location":"build/step14/#sign-the-targets","text":"Once you select your device (your iPhone's name), you are ready to start signing the targets. Start with the Loop target, the first one on the target list. Under the \"Signing\" area, ensure that you have \"All\" selected near the top and then select the dropdown menu where it currently says \"none\". Choose the team you'd like to sign with. Make sure you keep the \"automatically manage signing\" box checked in the signing area. If you select a team name with (personal team), your app will expire after 7 days and you must disable Push Notification and Siri as mentioned above. If you select a team name without (personal team), your app will last a full year. If you never signed up for a Free Developer Account , you will not have a (personal team) showing. Once you choose your signing team, Xcode will automatically generate provisioning profiles and signing certificates. If this is the first time you are building on this iPhone with this developer account, you may be prompted to register the device. Simply click on the \"Register Device\" button to confirm. Note - you must be connected to the Internet for this step because your computer needs to communicate with Apple to register that device. A successfully signed target will have a provisioning profile and signing certificate similar to the screenshot below. Click on each of the three remaining targets shown in the red box below, and repeat the signing steps by choosing the same team name as you selected in the first target. The four targets that must be signed prior to building the Loop app are Loop, Loop Status Extension, Watch App, and WatchApp Extension. Advanced Users Only There is one more target, Loop Intent Extension, which must be signed to build the dev branch. Please only build the dev branch if you're a developer/advanced user interested in testing Once you install the dev branch on a device, you should delete the Loop app, including all your settings, if you decide to return to master or automatic-bolus Repeat: only build the dev branch if you're a developer/advanced user The dev branch user interface is different, i.e., the documentation in LoopDocs does not match the screens you will see if you build the dev branch","title":"Sign the Targets"},{"location":"build/step14/#code-customizations","text":"New Loop users : Customizations are not a required part of any Loop build. As you gain experience using your Loop app, you may want to customize some of the features. First time builders are encouraged to build with the standard, default code. You can always update your Loop app to add customizations at a later time, using the same download. Subsequent build time is much faster than the initial build for a given download. If you want any custom configurations to your Loop or Loop Apple Watch apps, follow the step-by-step instructions on the Code Customizations page prior to pressing the Build button. When you've finished your customizations, come on back to this section and continue with the rest of the build.","title":"Code Customizations"},{"location":"build/step14/#pair-your-apple-watch","text":"New Apple Watch users : If you have an unopened Apple watch and want to use it with Loop, first pair the watch with the iPhone before continuing to the next steps. If you get a new watch after building the Loop app, you'll need to redo your Loop build. (Don't worry, it's as easy as pressing play on your saved Loop project.) Existing Apple Watch users : Please update your watchOS prior to building the Loop app. The current version of Loop requires watchOS 4.1 or newer.","title":"Pair Your Apple Watch"},{"location":"build/step14/#safety-intermission","text":"STOP STOP STOP ... This intermission is about safety. Some new users input settings and start using the Loop app without fully understanding the effects of the configuration values. That is a bad idea. DO NOT WING THE SETUP Sorry to shout, but better to get your attention now before a mistake is made. Continue to use these docs to finish setting up your app after it builds . DO NOT ENTER ONE LOOP APP SETTING WITHOUT HAVING THE DOCS OPEN AND FOLLOWING ALONG AT THE SAME TIME. The Loop app automatically doses insulin based on your configuration settings and your meal entries. The section in these docs called \"Set up App\" (look for it now at the top of this webpage - it's a menu title) needs to be used to input all the settings in your Loop app once it is built. READ ALONG WITH THE DOCS to enter those settings. There are important safety tips and advice in there. And then after you finish setup, you need to read the \"Operate\" section BEFORE YOU OPERATE LOOP. Don't bolus for a meal, or enter a meal, until you've read through the Operate section. Please heed this advice about using the setup and operate sections. People have ignored this advice and gotten themselves, or their child, into a dangerous situation by entering incorrect settings and going straight to Closed Loop before understanding how Loop operates. They skim and think that's good enough. You should not skim where your health, or your child's health, is concerned. you should read these documents carefully and UNDERSTAND them before you proceed. There is a lot of information. The two most important warnings are highlighted here. TOP TWO SAFETY MISTAKES YOU SHOULD AVOID Do not enter settings if you are unsure of the correct value or what the setting means. Don't just guess an ISF, carb ratio, basal rate, suspend threshold or delivery limits. If you don't know your settings or know what the terms mean, stop and try one of these steps: Search the docs for the term: all the settings terms are defined in the docs. Ask your endo if you don't have established values for those settings. Still confused - this is a time to post on a Loop Social Media site rather than guess. Example post: \"I've read the docs but I'm still confused about xxx\". You may get a link back to a specific section of one page. Read that section first. If that doesn't clarify things, then reply in that same post with what confuses you. Please - pick one site; work with one mentor; do not post in multiple places at once. Once carb entries are saved using the Carb Entry to Meal Bolus Menus or the Edit Carbohydrates Menu , Loop will provide increased insulin to handle that entry while in closed loop. If your settings are wrong, the amount of insulin will be wrong. The Loop app is an automated insulin delivery system and if it thinks you have carbs on board, it will try to give you appropriate insulin for those carbs. You must delete or edit a saved carb entry if you no longer want Loop to provide insulin for it. The Apple Health Permissions should be configured so that Loop can write carbohydrates (report to other apps), but Loop should NOT have permission to read carbohydrates. This prevents inadvertent entries from other apps or by a mistaken manual entry, e.g., entering a Blood Glucose entry in the carbohydrate section of Apple Health. Now that the safety intermission is done, you can continue on with the last step in building your app.","title":"SAFETY INTERMISSION"},{"location":"build/step14/#build-loop","text":"Have you signed the four targets? Are you done with any customizations? Has your Apple watch been paired and updated? Is your iPhone unlocked and plugged into the computer? Let\u2019s finish the installation of the Loop app onto your iPhone. Double-check to make sure your iPhone's name is still selected and then press the \u201cBuild\u201d button to start Xcode on its way. Helpful Tips The final step of a successful build is for Xcode to copy the completed build to your iPhone; if your phone is locked, Xcode pops up a message letting you know. Unlock your phone to continue. You\u2019ll see the progression of the build in the status window (top middle of Xcode). New builds can take 40-60 minutes, depending on the speed of the computer and the internet. Just be patient. The progress will get stay on one step/task for a very long time, and then the others will fly by. Not every step is equal in duration. Do not give up on the build. Xcode will ALWAYS tell you eventually that the build either succeeded or failed via a short (self-disappearing) pop-up message on the computer display. If you miss the message, you can look at the top of the Xcode window to see a \"Running Loop...\" (success) or \"Build Failed\" (failure) message where the step progress was previously counting down. Are you the impatient type? If you just simply can't bear the uncertainty of not seeing that things are progressing, you can take a peek \"under the hood\" and watch the individual build steps by clicking on the Report Navigator icon and then the build row at the top of the list. You can watch the slow list of scheme building while you wait. First Time Builder or First Time on this Computer Sometime during your first build on a computer, be ready for a codesign/keychain access prompt that you will see part-way through the build process. When you see this prompt, shown above, enter your computer password (the one you use to log in) and then select \"Always Allow\". It is normal for this prompt to come up four times in a row even after you enter the correct password. In frustration, people think the prompt must be broken because it keeps reappearing and then people will press deny or cancel. Don't press deny. Keep entering your computer password and pressing the \"Always Allow\" button as many times as it takes (four times to be exact; one for each target in Xcode). After four times of successful password entry, the build will continue. While you are waiting... While you are waiting for the build to complete, check out two pages: Red Loop Troubleshooting And if you plan to use an Omnipod: Pod Pairing Toubleshooting Ok, back to the building instructions.","title":"Build Loop"},{"location":"build/step14/#build-finished","text":"First Time Building on a New Device? If this is the first time you have installed an app on your iPhone using your developer account, you may get a warning like the one shown below after a successful build. Don't worry, Loop usually installed just fine on the phone but needs you to do an extra step on the phone before the Loop app can open. Just follow the directions shown in the warning for what you need to do on your iPhone. Go to Settings->General->Device Management (or profiles, Profiles & Device Management on newer iOS) and enable trust for your Developer Account. If you are missing the Device Management/Profiles option in your iPhone settings, then head over to this Build Error section to find the solution.","title":"Build Finished"},{"location":"build/step14/#build-succeeded","text":"Congrats! If the build is successful, you'll see the message \"Running Loop...\" across the top of the Xcode window. Pick up your phone and look at it. You can unplug your phone from the computer now. You will get an Xcode message window that says \"Lost connection to the debugger on <your phone name>\". Just click OK. Your brand new Loop app will automatically open a screen asking you to allow Loop to send you notifications. The Health app permissions screen will be visible in the background, but you must answer the Notification request first. Click Allow to enable Loop to send you notifications. Now the Health permissions screen is active. Click on the Turn All Categories On line and then immediately turn OFF the permission to read Carbohydrates . The end result is that Health should have permission to read and write Blood Glucose and Insulin Delivery; permission to write Carbohydrates ( NOT read carbs ); and permission to read Sleep Data. When the permissions are set correctly, i.e., match the image below, click Allow in the upper right corner. Next, you will use the Set up App section of this website to keep proceeding safely. FAQ: But what about those yellow alerts that remain in Xcode? Should I worry about them? If you see yellow alerts after your build is done...those are not an issue. Whether your build succeeded or failed...the yellow warnings play no role in either outcome. Don't try to resolve them or fret about them. They mean nothing to the successful use of your Loop app.","title":"Build Succeeded"},{"location":"build/step14/#build-failed","text":"If you get a message that your build failed and see RED ERROR messages, go to the Build Errors page to find the steps to fix your build error. Most build errors are covered on that page along with instructions on how to fix them and how to ask for help. Once you've resolved the issue and start the build process again, Xcode will continue to show a red circle on the top line from the previous failure. Don't worry about it. As long as the steps of the build are showing across the top line, Xcode is still working on the build. When the build succeeds, the red circle will disappear.","title":"Build Failed"},{"location":"build/step14/#summary","text":"If your build failed, you need to proceed to the Build Errors page to find the solution. Please go there first to find the help you need. If your build was successful but your phone was locked, you will see an Xcode message window that says \"Unlock <your phone name> to Continue\". Simply unlock your phone and the app will be copied onto your phone and automatically open. If there were no build errors, you're done building your Loop app. If your phone is still plugged into you computer, you can unplug it. You will get an Xcode message window that says \"Lost connection to the debugger on <your phone name>\". Just click OK. The next step is the begin the Set up App process.","title":"Summary"},{"location":"build/step14/#next-steps","text":"Go to the Set up App menu to configure your Loop and follow that up with the first Operate page and work those pages as you learn to run Loop safely.","title":"Next Steps"},{"location":"build/step2/","text":"Step 2: Compatible iPhone or iPod touch \u2301 Time Estimate 5 minutes, if your iPhone or iPod touch is at iOS 12.4 or newer; iOS 14.4.2 or higher is recommended 20 minutes, if need to update your compatible device to a new iOS 10 minutes, if you need to order a compatible device from Apple website 0 minutes, if you own an Android and won't buy Apple products; check out AndroidAPS Documention Summary Check your iOS version and make sure you have iOS 12.4 minimum WARNING, although the current version of Loop can be built with iOS 12.4, using newer iOS is strongly recommended If using Dexcom CGM, your Looping iPhone/iPod touch will need the Dexcom app installed on it to Loop without an internet connection. This is a good time to Turn Off Automatic Updates in your iPhone/iPod settings FAQs \"Can I use an android?\" No. Check out AndroidAPS Documention . \"Can I use an iPad?\" No. iPads do not support Apple Health and Loop uses Apple Health. \"Does my iPhone need a scell plan?\" No. Loop works using communication via Bluetooth and the RileyLink compatible device with your CGM and pump; no internet connection required. However, without a cell plan, connection to the internet relies on WiFi availability. If access to Dexcom Follow or Nightscout monitoring of Loop is a priority, then a cell plan may be desired. Which Devices Are Compatible? \u2301 Loop requires an iPhone or iPod touch. Loop uses the Apple Health app to store and retrieve your blood glucose and insulin data and to store your carbohydrate records. iPads do not have the Apple Health app, so iPads will not work with Loop. You need a minimum version of the mobile operating software, called the phone's \"iOS\", to be installed on your iPhone or iPod touch. Loop is compatible with iPhone and iPod touch devices with iOS 12.4 or newer. The next version of Loop may require a minimum of iOS 14. Compatible Devices \u2301 These devices are compatible with iOS 14, which is expected to be the minimum iOS required to build the next version of Loop. iPhone 12, all variants iPhone 11, all variants iPhone X, all variants iPhone 8, all variants iPhone 7, all variants iPhone 6s, all variants - but note the \"s\" iPhone SE (2016 or later model) iPod Touch, 7th generation Devices That Will Soon Be Incompatible \u2301 iPhone 5s, 6, 6+ iPod Touch, 6th generation Apple stopped providing iOS updates for these devices at iOS 12.4. Apple released iOS 13 and iOS 14 in the recent past and these older devices cannot be updated to use these newer iOS versions. This does not pose a problem currently...you can still build Loop's master and automatic-bolus branch so long as your device has iOS 12.4 at a minimum. HOWEVER, there are upcoming Loop changes that will require users to have iOS 14 on their devices to build Loop. There is no set timeframe for when that minimum requirement will change. When that happens, the docs will be updated and an announcement made in all the Loop Social Media sites. Side note for people who are seasoned Loop users and know about branches and such: Currently (April 2021), Loop's dev branch and several popular forks require devices to have iOS 13 or newer, and it is expected dev will soon require iOS 14. There's no set timeframe for when dev will next be merged into master. Find Your Device's iOS \u2301 Your phone's iOS version can be found under the Settings app, General, About as shown below. Do not use any of the beta iOS versions. (Don't worry...if you don't know what that means, then you aren't using one.) Turn Off Automatic Updates \u2301 This is important - this allows you to choose when to update your phone. We recommend that updates be installed as soon as the All-Clear is given. Updates are important. An iOS update has never prevented Loop from working But an iOS update often requires an Xcode update to build Loop on that device Rarely, but it has happened, that Xcode update requires a Loop code update If a problem is found, the solution is typically posted pretty quickly Most people who Loop want to keep Looping - so do yourself a favor and turn off automatic updates Google the instructions for your device if you cannot figure it out It's fine to automatically download the updates Do not enable automatic installation of the updates Check on your favorite Loop Social Media site to see if a newly released iOS is causing an issue with Loop or your CGM before accepting the update from Apple The \"All-Clear\" or \"WAIT there's a problem\" is normally posted within a few days Next Step: Compatible Pump \u2301 Now you are ready to move onto Step 3 to check if you have a Compatible pump .","title":"Step 2 Compatible iPhone/iPod touch"},{"location":"build/step2/#step-2-compatible-iphone-or-ipod-touch","text":"Time Estimate 5 minutes, if your iPhone or iPod touch is at iOS 12.4 or newer; iOS 14.4.2 or higher is recommended 20 minutes, if need to update your compatible device to a new iOS 10 minutes, if you need to order a compatible device from Apple website 0 minutes, if you own an Android and won't buy Apple products; check out AndroidAPS Documention Summary Check your iOS version and make sure you have iOS 12.4 minimum WARNING, although the current version of Loop can be built with iOS 12.4, using newer iOS is strongly recommended If using Dexcom CGM, your Looping iPhone/iPod touch will need the Dexcom app installed on it to Loop without an internet connection. This is a good time to Turn Off Automatic Updates in your iPhone/iPod settings FAQs \"Can I use an android?\" No. Check out AndroidAPS Documention . \"Can I use an iPad?\" No. iPads do not support Apple Health and Loop uses Apple Health. \"Does my iPhone need a scell plan?\" No. Loop works using communication via Bluetooth and the RileyLink compatible device with your CGM and pump; no internet connection required. However, without a cell plan, connection to the internet relies on WiFi availability. If access to Dexcom Follow or Nightscout monitoring of Loop is a priority, then a cell plan may be desired.","title":"Step 2: Compatible iPhone or iPod touch"},{"location":"build/step2/#which-devices-are-compatible","text":"Loop requires an iPhone or iPod touch. Loop uses the Apple Health app to store and retrieve your blood glucose and insulin data and to store your carbohydrate records. iPads do not have the Apple Health app, so iPads will not work with Loop. You need a minimum version of the mobile operating software, called the phone's \"iOS\", to be installed on your iPhone or iPod touch. Loop is compatible with iPhone and iPod touch devices with iOS 12.4 or newer. The next version of Loop may require a minimum of iOS 14.","title":"Which Devices Are Compatible?"},{"location":"build/step2/#compatible-devices","text":"These devices are compatible with iOS 14, which is expected to be the minimum iOS required to build the next version of Loop. iPhone 12, all variants iPhone 11, all variants iPhone X, all variants iPhone 8, all variants iPhone 7, all variants iPhone 6s, all variants - but note the \"s\" iPhone SE (2016 or later model) iPod Touch, 7th generation","title":"Compatible Devices"},{"location":"build/step2/#devices-that-will-soon-be-incompatible","text":"iPhone 5s, 6, 6+ iPod Touch, 6th generation Apple stopped providing iOS updates for these devices at iOS 12.4. Apple released iOS 13 and iOS 14 in the recent past and these older devices cannot be updated to use these newer iOS versions. This does not pose a problem currently...you can still build Loop's master and automatic-bolus branch so long as your device has iOS 12.4 at a minimum. HOWEVER, there are upcoming Loop changes that will require users to have iOS 14 on their devices to build Loop. There is no set timeframe for when that minimum requirement will change. When that happens, the docs will be updated and an announcement made in all the Loop Social Media sites. Side note for people who are seasoned Loop users and know about branches and such: Currently (April 2021), Loop's dev branch and several popular forks require devices to have iOS 13 or newer, and it is expected dev will soon require iOS 14. There's no set timeframe for when dev will next be merged into master.","title":"Devices That Will Soon Be Incompatible"},{"location":"build/step2/#find-your-devices-ios","text":"Your phone's iOS version can be found under the Settings app, General, About as shown below. Do not use any of the beta iOS versions. (Don't worry...if you don't know what that means, then you aren't using one.)","title":"Find Your Device's iOS"},{"location":"build/step2/#turn-off-automatic-updates","text":"This is important - this allows you to choose when to update your phone. We recommend that updates be installed as soon as the All-Clear is given. Updates are important. An iOS update has never prevented Loop from working But an iOS update often requires an Xcode update to build Loop on that device Rarely, but it has happened, that Xcode update requires a Loop code update If a problem is found, the solution is typically posted pretty quickly Most people who Loop want to keep Looping - so do yourself a favor and turn off automatic updates Google the instructions for your device if you cannot figure it out It's fine to automatically download the updates Do not enable automatic installation of the updates Check on your favorite Loop Social Media site to see if a newly released iOS is causing an issue with Loop or your CGM before accepting the update from Apple The \"All-Clear\" or \"WAIT there's a problem\" is normally posted within a few days","title":"Turn Off Automatic Updates"},{"location":"build/step2/#next-step-compatible-pump","text":"Now you are ready to move onto Step 3 to check if you have a Compatible pump .","title":"Next Step: Compatible Pump"},{"location":"build/step3/","text":"Step 3: Compatible Pump \u2301 Time Estimate Omnipod users: 3 seconds to remember which PDM you've been using. Medtronic users: 10 minutes to put a battery in and look at model and firmware Other pump users: 5 days to email friends asking them to check closets for their old Medtronic pump or call your insurance to start prior authorization for Omnipod Summary If you have a big clunky PDM with a built-in BG meter...you can use your pods for Loop. (These pods have a clear needle cap.) If you have a slim touch screen android-looking PDM...you can NOT use your pods for Loop. (These pods have a blue needle cap.) If you have a Medtronic, check the list to ensure compatible model/firmware. FAQs \"How can I find a compatible Medtronic pump?\" Refer to Finding a Medtronic Pump \"What are the differences between Medtronic pump models?\" This question is also answered in the Extra Details section below. \"But what about the other types of pumps?\" No other pumps work with Loop at this time. If you have a DanaRS, DanaR, Accu-Chek Insight, Accu-Chek Combo, you could check out AndroidAPS looping system . If you have a Medtronic 512 or 712, you could check out OpenAPS as that system supports the 512 and 712 models in addition to the other Loop-compatible Medtronic pumps. Neither of those systems currently support Omnipod for looping. \"Can I change the firmware of my Medtronic pump?\" Do you work at Medtronic with insider access to the secret tools and firmware versions to do that? Might lose your job, but I'd bet you could do it then. We don't have access to that though. Pumps Compatible with Loop \u2301 There are two types of pumps compatible with Loop. Older Medtronic pumps Eros Omnipod pumps Check Medtronic Pump Version \u2301 Medtronic 515 or 715 (any firmware) Medtronic 522 or 722 (any firmware) Medtronic 523 or 723 (firmware 2.4 or lower) Medtronic Worldwide Veo 554 or 754 (firmware 2.6A or lower) Medtronic Canadian/Australian Veo 554 or 754 (firmware 2.7A or lower) If you have one of the pumps listed above, you are good to go on Loop! Congrats! Extra Details on Medtronic \u2301 There are a number of Medtronic insulin pumps manufactured between 2006 \u2013 2012 which are Loop compatible. Compatibility has two requirements: (1) pump model and (2) firmware. Medtronic Pump Model \u2301 To determine your pump model, look at the backside of your pump. There should be a sticker on the underside of the pump. On the right-hand side of the sticker, it says REF MMT-XXXXXX MMT ---> Pump Manufacturer Model (MiniMed Medtronic) 722 ---> Pump Model Number NA ---> Pump Region (NA=North America, CA=Canada/Australia, WW=Worldwide) S ---> Pump Color (S=Smoke, L=Clear/Lucite, B=Blue, P=Pink/Purple) Some pumps may have an \u201cL\u201d or \u201cS\u201d or \"R\" before the pump region, e.g. a model number like MMT-722LNAS. This does not affect Loop compatibility. Medtronic Pump Firmware \u2301 A pump\u2019s firmware is the internal software that runs your pump. Older Medtronic firmware allows Loop to act as a \u201cremote control\u201d to set temp basals and report back pump data. Newer firmware disabled that \u201cremote control\u201d access and therefore cannot be used with these DIY closed-loop systems. There is currently no ability to downgrade a pump\u2019s firmware or replace it with older firmware. Before you buy a used pump, make sure you are getting one with compatible firmware. The firmware on all 515/715 and 522/722 model Medtronic pumps is compatible with Loop. You will only need to check the firmware version for 523/723 and 554/754 model Medtronic pumps. Medtronic 515 or 715 --> any firmware Medtronic 522 or 722 --> any firmware Medtronic 523 or 723 --> firmware 2.4 or lower Medtronic Worldwide Veo 554 or 754 --> firmware 2.6A or lower Medtronic Canadian/Australian Veo 554 or 754 --> firmware 2.7A or lower To find your pump\u2019s firmware you will need to power it on. If the pump has not been powered on for some time (i.e., has been in storage without a battery for a while), it will run through a start-up count and the firmware version will appear on the bottom right of the pump\u2019s screen. Don\u2019t turn away, as the version number will only be displayed for a little while before the screen moves onto other information displays. If the pump has been active recently or has a reservoir installed, follow these steps: Press the button on your pump. Scroll down with the button to the bottom of the status display. Read the bottom line of the display. Medtronic Pump Differences \u2301 If you are in the position of being able to shop around for different pump models, there are some slight differences between the Loop-compatible Medtronic pumps. 500 vs 700 : The difference between the Medtronic 500 series and the 700 series pumps is the size of the insulin reservoirs. The 500 series pumps use a 180 unit reservoir, and the 700 series pumps use a 300 unit reservoir (or smaller 180 unit reservoir, if you want). x15/x22 vs x23/x54 : The differences noteworthy between the x15 and x22 pumps versus the x23 and x54 series pumps are: The x23/x54 pumps will allow for smaller insulin deliveries in certain situations, if the smaller scroll rate is selected in the Bolus>Setup>Scroll Rate menu. Loop will have the insulin delivery automatically rounded by the pump to the units available in the pump model, and any smaller adjustments (to make up for the rounding) will be made through Loop\u2019s use of temp basals. If you want the smaller increments of basal rates, you can still enter those values in the Loop app's settings and Loop will use those values for the purposes of insulin delivery calculations. Pump Model Basal increments Bolus increments Range 515/715 and 522/722 0.05 0.1 0.1 0.1 deliveries of less than 10 units greater than 10 units 523/723 and 554/754 0.025 0.05 0.1 0.025 0.05 0.1 between 0.025 to 0.975 units between 1 to 9.95 units greater than 10 units Additionally, because of the way Loop fetches information from the pump, the x23/x54 series of pumps are slightly better at conserving battery life through the use of the MySentry packets to collect information from the pump. x22 pumps do not use MySentry. The x23/x54 series pumps are also faster at delivering boluses greater than 10 units. On an x23 pump, a 13-unit bolus takes 5:00 minutes to complete. On an x22 pump, a 13-unit bolus takes 8:40 minutes to complete. Finding a Medtronic Pump \u2301 Finding a compatible Medtronic pump is probably the most difficult part for most new Loopers. Our suggestions: Talk to friends in the diabetic community. Ask your endocrinologist. Ask at a local JDRF chapter meeting if someone has an old backup pump they'd be willing to donate to you. Join diabetic supply groups on Facebook; both for-trade and for-sale groups. Check Craigslist often and be willing to expand your search area to include larger cities. Check out the HelpAround, NextDoor, OfferUp, and/or LetGo apps for pumps. Search Medwow for used Medtronic pumps. Medwow has been fairly frustrating for most people; poor response rate and high prices. The most success appears to come from either one-on-one discussions with fellow diabetics/doctors or using apps (Craigslist, NextDoor, LetGo, HelpAround). If you are using Craigslist, you may wish to use an app on your iPhone to make the searching easier. There are apps to search multiple cities at once for your keywords and set up alerts. Safe Purchasing \u2301 If you choose to purchase from a remote or unknown seller, here are some tips for safe purchasing: Use PayPal and purchase using the \"Goods and Services\" payment option. This costs nothing for the buyer, but the seller will lose 2.95% of the sale to PayPal fees. PayPal offers some protection for both buyer and seller in the event of fraud. Ask for photos of the pump. Check to make sure the serial number of the pump on the backside matches the serial number of the pump showing in the display menu. Ask for a short video of the pump, or at least a photo of the pump turned on, so that you can see the pump's firmware and model number. Cracks and some wear on these pumps are expected. These pumps are not usually free of marks. Many people are successfully looping on pumps that have cracks and rub marks, but you may want to ask if you are concerned about any you see in photos. Beware if the bottom of the reservoir/motor sleeve has the drive support cap pushed out, as shown here . Those pumps will generally not work (or only work intermittently), however some people have successfully repaired those pumps as shown in that link. Just be aware that it should be checked in advance. Repairs to cracks or missing bits of plastic on battery cap area and reservoir caps are possible and not very difficult in most situations. You can read more about how to repair those here . Ask for shipping that includes a tracking number. USPS Priority Mail's smallest box is a great option. It's only $7.20 domestically in the US and includes tracking. Ask the seller to add a small bit of packing protection such as bubble wrap around the pump to keep it safe during shipping. Make sure you get a tracking number within a reasonable period of time after you have paid. Red flags that may indicate a scam: Asking for payment through \"friends and family\" on PayPal, especially if you don't know the person or have any solid references for them. Paying in that way offers you no buyer protection. It's just like giving the seller cash, so you had better trust the seller. Offering an \"almost new\" pump is a big red flag. These pumps should be at least 5-years-old by now. Do you really think a 5 year old pump should be unused and sitting in shrink wrap at this point? This seems highly suspicious. There are some out there, but they are very infrequent. Not able to provide new pictures of the pump when requested. Sure they posted some pictures with the ad, but what if they just downloaded them from other people's ads? The seller should be able to furnish a couple of \"new\" photos at your request. A good one to ask for is the battery and reservoir tops so you can see the condition of those. Pump Supplies \u2301 Medtronic will not typically sell pump supplies directly to customers who have not previously purchased a registered Medtronic pump. Ask your insurance about purchasing pump supplies through a durable medical equipment (DME) provider. Typically, the DME provider will coordinate with your insurance and doctor's office to get the necessary insurance approval and prescriptions for the supplies. If you are brand new to Medtronic infusion sites, you may want to ask for help from friends to try a variety of infusion sets before purchasing a full 90-day supply of any type in particular. Omnipod Pumps \u2301 Reminder and Disclaimer The use of Eros pods with Loop is not supported by Insulet, although they are aware it is happening. Do not call Insulet asking for help with your Loop build, setup, or operation. This project is not FDA-approved. You are fully responsible for your use of this project and do so at your own risk. Please read these documents and familiarize yourself with Loop before using. Eros - Loop Will Work with These Pods \u2301 Eros pods were launched in 2013 and continue to be sold by Insulet. As far as we know, there have been no plans or timelines announced for the discontinuation of Eros pods for existing customers. Insulet doesn't specifically call these \"Eros\" anymore, they just use the term \"omnipod system\". For clarity, from Insulet's webpage : Eros system has that PDM we all recognize from the last several years. DASH - Loop Will Not Work with DASH Pods \u2301 Insulet has announced their DASH system as an eventual replacement for the Eros/Omnipod System. The DASH system has the newer, slimmer locked-android PDM and built-in BLE communications in POD. Loop will not be compatible with the DASH system. Next Step: Compatible CGM \u2301 Now you are ready to move onto Step 4 to check if you have a Compatible CGM .","title":"Step 3 Compatible Pump"},{"location":"build/step3/#step-3-compatible-pump","text":"Time Estimate Omnipod users: 3 seconds to remember which PDM you've been using. Medtronic users: 10 minutes to put a battery in and look at model and firmware Other pump users: 5 days to email friends asking them to check closets for their old Medtronic pump or call your insurance to start prior authorization for Omnipod Summary If you have a big clunky PDM with a built-in BG meter...you can use your pods for Loop. (These pods have a clear needle cap.) If you have a slim touch screen android-looking PDM...you can NOT use your pods for Loop. (These pods have a blue needle cap.) If you have a Medtronic, check the list to ensure compatible model/firmware. FAQs \"How can I find a compatible Medtronic pump?\" Refer to Finding a Medtronic Pump \"What are the differences between Medtronic pump models?\" This question is also answered in the Extra Details section below. \"But what about the other types of pumps?\" No other pumps work with Loop at this time. If you have a DanaRS, DanaR, Accu-Chek Insight, Accu-Chek Combo, you could check out AndroidAPS looping system . If you have a Medtronic 512 or 712, you could check out OpenAPS as that system supports the 512 and 712 models in addition to the other Loop-compatible Medtronic pumps. Neither of those systems currently support Omnipod for looping. \"Can I change the firmware of my Medtronic pump?\" Do you work at Medtronic with insider access to the secret tools and firmware versions to do that? Might lose your job, but I'd bet you could do it then. We don't have access to that though.","title":"Step 3: Compatible Pump"},{"location":"build/step3/#pumps-compatible-with-loop","text":"There are two types of pumps compatible with Loop. Older Medtronic pumps Eros Omnipod pumps","title":"Pumps Compatible with Loop"},{"location":"build/step3/#check-medtronic-pump-version","text":"Medtronic 515 or 715 (any firmware) Medtronic 522 or 722 (any firmware) Medtronic 523 or 723 (firmware 2.4 or lower) Medtronic Worldwide Veo 554 or 754 (firmware 2.6A or lower) Medtronic Canadian/Australian Veo 554 or 754 (firmware 2.7A or lower) If you have one of the pumps listed above, you are good to go on Loop! Congrats!","title":"Check Medtronic Pump Version"},{"location":"build/step3/#extra-details-on-medtronic","text":"There are a number of Medtronic insulin pumps manufactured between 2006 \u2013 2012 which are Loop compatible. Compatibility has two requirements: (1) pump model and (2) firmware.","title":"Extra Details on Medtronic"},{"location":"build/step3/#medtronic-pump-model","text":"To determine your pump model, look at the backside of your pump. There should be a sticker on the underside of the pump. On the right-hand side of the sticker, it says REF MMT-XXXXXX MMT ---> Pump Manufacturer Model (MiniMed Medtronic) 722 ---> Pump Model Number NA ---> Pump Region (NA=North America, CA=Canada/Australia, WW=Worldwide) S ---> Pump Color (S=Smoke, L=Clear/Lucite, B=Blue, P=Pink/Purple) Some pumps may have an \u201cL\u201d or \u201cS\u201d or \"R\" before the pump region, e.g. a model number like MMT-722LNAS. This does not affect Loop compatibility.","title":"Medtronic Pump Model"},{"location":"build/step3/#medtronic-pump-firmware","text":"A pump\u2019s firmware is the internal software that runs your pump. Older Medtronic firmware allows Loop to act as a \u201cremote control\u201d to set temp basals and report back pump data. Newer firmware disabled that \u201cremote control\u201d access and therefore cannot be used with these DIY closed-loop systems. There is currently no ability to downgrade a pump\u2019s firmware or replace it with older firmware. Before you buy a used pump, make sure you are getting one with compatible firmware. The firmware on all 515/715 and 522/722 model Medtronic pumps is compatible with Loop. You will only need to check the firmware version for 523/723 and 554/754 model Medtronic pumps. Medtronic 515 or 715 --> any firmware Medtronic 522 or 722 --> any firmware Medtronic 523 or 723 --> firmware 2.4 or lower Medtronic Worldwide Veo 554 or 754 --> firmware 2.6A or lower Medtronic Canadian/Australian Veo 554 or 754 --> firmware 2.7A or lower To find your pump\u2019s firmware you will need to power it on. If the pump has not been powered on for some time (i.e., has been in storage without a battery for a while), it will run through a start-up count and the firmware version will appear on the bottom right of the pump\u2019s screen. Don\u2019t turn away, as the version number will only be displayed for a little while before the screen moves onto other information displays. If the pump has been active recently or has a reservoir installed, follow these steps: Press the button on your pump. Scroll down with the button to the bottom of the status display. Read the bottom line of the display.","title":"Medtronic Pump Firmware"},{"location":"build/step3/#medtronic-pump-differences","text":"If you are in the position of being able to shop around for different pump models, there are some slight differences between the Loop-compatible Medtronic pumps. 500 vs 700 : The difference between the Medtronic 500 series and the 700 series pumps is the size of the insulin reservoirs. The 500 series pumps use a 180 unit reservoir, and the 700 series pumps use a 300 unit reservoir (or smaller 180 unit reservoir, if you want). x15/x22 vs x23/x54 : The differences noteworthy between the x15 and x22 pumps versus the x23 and x54 series pumps are: The x23/x54 pumps will allow for smaller insulin deliveries in certain situations, if the smaller scroll rate is selected in the Bolus>Setup>Scroll Rate menu. Loop will have the insulin delivery automatically rounded by the pump to the units available in the pump model, and any smaller adjustments (to make up for the rounding) will be made through Loop\u2019s use of temp basals. If you want the smaller increments of basal rates, you can still enter those values in the Loop app's settings and Loop will use those values for the purposes of insulin delivery calculations. Pump Model Basal increments Bolus increments Range 515/715 and 522/722 0.05 0.1 0.1 0.1 deliveries of less than 10 units greater than 10 units 523/723 and 554/754 0.025 0.05 0.1 0.025 0.05 0.1 between 0.025 to 0.975 units between 1 to 9.95 units greater than 10 units Additionally, because of the way Loop fetches information from the pump, the x23/x54 series of pumps are slightly better at conserving battery life through the use of the MySentry packets to collect information from the pump. x22 pumps do not use MySentry. The x23/x54 series pumps are also faster at delivering boluses greater than 10 units. On an x23 pump, a 13-unit bolus takes 5:00 minutes to complete. On an x22 pump, a 13-unit bolus takes 8:40 minutes to complete.","title":"Medtronic Pump Differences"},{"location":"build/step3/#finding-a-medtronic-pump","text":"Finding a compatible Medtronic pump is probably the most difficult part for most new Loopers. Our suggestions: Talk to friends in the diabetic community. Ask your endocrinologist. Ask at a local JDRF chapter meeting if someone has an old backup pump they'd be willing to donate to you. Join diabetic supply groups on Facebook; both for-trade and for-sale groups. Check Craigslist often and be willing to expand your search area to include larger cities. Check out the HelpAround, NextDoor, OfferUp, and/or LetGo apps for pumps. Search Medwow for used Medtronic pumps. Medwow has been fairly frustrating for most people; poor response rate and high prices. The most success appears to come from either one-on-one discussions with fellow diabetics/doctors or using apps (Craigslist, NextDoor, LetGo, HelpAround). If you are using Craigslist, you may wish to use an app on your iPhone to make the searching easier. There are apps to search multiple cities at once for your keywords and set up alerts.","title":"Finding a Medtronic Pump"},{"location":"build/step3/#safe-purchasing","text":"If you choose to purchase from a remote or unknown seller, here are some tips for safe purchasing: Use PayPal and purchase using the \"Goods and Services\" payment option. This costs nothing for the buyer, but the seller will lose 2.95% of the sale to PayPal fees. PayPal offers some protection for both buyer and seller in the event of fraud. Ask for photos of the pump. Check to make sure the serial number of the pump on the backside matches the serial number of the pump showing in the display menu. Ask for a short video of the pump, or at least a photo of the pump turned on, so that you can see the pump's firmware and model number. Cracks and some wear on these pumps are expected. These pumps are not usually free of marks. Many people are successfully looping on pumps that have cracks and rub marks, but you may want to ask if you are concerned about any you see in photos. Beware if the bottom of the reservoir/motor sleeve has the drive support cap pushed out, as shown here . Those pumps will generally not work (or only work intermittently), however some people have successfully repaired those pumps as shown in that link. Just be aware that it should be checked in advance. Repairs to cracks or missing bits of plastic on battery cap area and reservoir caps are possible and not very difficult in most situations. You can read more about how to repair those here . Ask for shipping that includes a tracking number. USPS Priority Mail's smallest box is a great option. It's only $7.20 domestically in the US and includes tracking. Ask the seller to add a small bit of packing protection such as bubble wrap around the pump to keep it safe during shipping. Make sure you get a tracking number within a reasonable period of time after you have paid. Red flags that may indicate a scam: Asking for payment through \"friends and family\" on PayPal, especially if you don't know the person or have any solid references for them. Paying in that way offers you no buyer protection. It's just like giving the seller cash, so you had better trust the seller. Offering an \"almost new\" pump is a big red flag. These pumps should be at least 5-years-old by now. Do you really think a 5 year old pump should be unused and sitting in shrink wrap at this point? This seems highly suspicious. There are some out there, but they are very infrequent. Not able to provide new pictures of the pump when requested. Sure they posted some pictures with the ad, but what if they just downloaded them from other people's ads? The seller should be able to furnish a couple of \"new\" photos at your request. A good one to ask for is the battery and reservoir tops so you can see the condition of those.","title":"Safe Purchasing"},{"location":"build/step3/#pump-supplies","text":"Medtronic will not typically sell pump supplies directly to customers who have not previously purchased a registered Medtronic pump. Ask your insurance about purchasing pump supplies through a durable medical equipment (DME) provider. Typically, the DME provider will coordinate with your insurance and doctor's office to get the necessary insurance approval and prescriptions for the supplies. If you are brand new to Medtronic infusion sites, you may want to ask for help from friends to try a variety of infusion sets before purchasing a full 90-day supply of any type in particular.","title":"Pump Supplies"},{"location":"build/step3/#omnipod-pumps","text":"Reminder and Disclaimer The use of Eros pods with Loop is not supported by Insulet, although they are aware it is happening. Do not call Insulet asking for help with your Loop build, setup, or operation. This project is not FDA-approved. You are fully responsible for your use of this project and do so at your own risk. Please read these documents and familiarize yourself with Loop before using.","title":"Omnipod Pumps"},{"location":"build/step3/#eros-loop-will-work-with-these-pods","text":"Eros pods were launched in 2013 and continue to be sold by Insulet. As far as we know, there have been no plans or timelines announced for the discontinuation of Eros pods for existing customers. Insulet doesn't specifically call these \"Eros\" anymore, they just use the term \"omnipod system\". For clarity, from Insulet's webpage : Eros system has that PDM we all recognize from the last several years.","title":"Eros - Loop Will Work with These Pods"},{"location":"build/step3/#dash-loop-will-not-work-with-dash-pods","text":"Insulet has announced their DASH system as an eventual replacement for the Eros/Omnipod System. The DASH system has the newer, slimmer locked-android PDM and built-in BLE communications in POD. Loop will not be compatible with the DASH system.","title":"DASH - Loop Will Not Work with DASH Pods"},{"location":"build/step3/#next-step-compatible-cgm","text":"Now you are ready to move onto Step 4 to check if you have a Compatible CGM .","title":"Next Step: Compatible CGM"},{"location":"build/step4/","text":"Step 4: Compatible CGM \u2301 Time Estimate 10 minutes to read this page Summary Loop is compatible with: Dexcom G4 Share, G5, or G6 CGM systems Medtronic sensors connected to a Loop-compatible Medtronic pumps FAQs \"What about Libre sensors?\" You will need to seek out a modified version of Loop (search posts and then ask about \"forks\" that support your CGM in a Loop Social Media site.) \"What about Eversense?\" Eversense's application does not integrate with Apple Health nor has the communications protocols for Eversense been reverse engineered for iOS. Therefore, Eversense is not currently compatible with Loop. A continuous glucose monitor (CGM) provides Loop with blood glucose readings. These readings allow Loop to model the current glucose trend and predict future blood glucose based on carbohydrate input and your Loop settings. The following are the types of CGMs compatible with Loop. CGM readings are a required part of looping. If your Loop app is unable to retrieve blood glucose (BG) data, it will not be able to loop. Dexcom G5 and G6 CGM \u2301 Dexcom G5 and G6 CGM data is transmitted directly to the Dexcom app on your iPhone via Bluetooth. Neither of these two systems require the use of a stand-alone receiver. For Loop to function without an internet connection, you will need the Dexcom app running on the same device as Loop. Dexcom G4 CGM with Share Receiver \u2301 The Dexcom G4 Share system transmits CGM data from the transmitter to a Dexcom G4 Share Receiver. The receiver, in turn, connects to the Dexcom Share2 app on your iPhone via Bluetooth. The Share2 app uploads CGM data to the Dexcom servers from your phone. For Loop to function without an internet connection, you will need the Dexcom app running on the same device as Loop. Medtronic CGM \u2301 The Minimed Enlite CGM, available with the Medtronic 522/722, 523/723, and 554/754, wirelessly sends blood glucose readings to the pump. Loop can read the Medtronic CGM data directly from the pump using a RileyLink compatible device. Offline Use \u2301 Offline use means using Loop when there is no cell data or internet available. Loop does not require any special setup to operate offline. For offline Loop use, the iPhone's Bluetooth still needs to be active; and for Dexcom users, the Share2, G5, or G6 app also needs to be running on your Loop phone. If you put your iPhone into Airplane mode, remember to turn Bluetooth back on to keep your Loop running. If your offline use is failing, chances are you have forgotten to update your transmitter ID in Loop settings when you changed transmitters. Dexcom Share \u2301 Loop is capable of downloading Dexcom Share data for use in modeling BG. However, this is not a typical configuration and requires internet connection for both the phone with the Dexcom app and the phone with the Loop app. As will be discussed during the Loop Set Up Steps for adding a CGM, you usually enter the Dexcom transmitter ID and leave the Dexcom Share setting blank. CGMs Not Natively Supported in Loop \u2301 There are other CGM, such as Libre (with BluCon or Miao Miao), Eversense and Medtronic Guardian sensors. Loop does not natively support those CGMs. If you would like to use one of those alternate CGMs and Loop, you will need to look into third-party integrations to allow Loop to access the blood glucose data. First search for previous posts on the topic and then ask questions in a Loop Social Media site. Currently, there are no solutions for Eversense or Guardian CGM to be used with Loop, but some Uploaders to Nightscout are available using an Android phone. Next Step: Order a RileyLink Compatible Device \u2301 Now you are ready to move onto Step 5 to Order a RileyLink Compatible Device .","title":"Step 4 Compatible CGM"},{"location":"build/step4/#step-4-compatible-cgm","text":"Time Estimate 10 minutes to read this page Summary Loop is compatible with: Dexcom G4 Share, G5, or G6 CGM systems Medtronic sensors connected to a Loop-compatible Medtronic pumps FAQs \"What about Libre sensors?\" You will need to seek out a modified version of Loop (search posts and then ask about \"forks\" that support your CGM in a Loop Social Media site.) \"What about Eversense?\" Eversense's application does not integrate with Apple Health nor has the communications protocols for Eversense been reverse engineered for iOS. Therefore, Eversense is not currently compatible with Loop. A continuous glucose monitor (CGM) provides Loop with blood glucose readings. These readings allow Loop to model the current glucose trend and predict future blood glucose based on carbohydrate input and your Loop settings. The following are the types of CGMs compatible with Loop. CGM readings are a required part of looping. If your Loop app is unable to retrieve blood glucose (BG) data, it will not be able to loop.","title":"Step 4: Compatible CGM"},{"location":"build/step4/#dexcom-g5-and-g6-cgm","text":"Dexcom G5 and G6 CGM data is transmitted directly to the Dexcom app on your iPhone via Bluetooth. Neither of these two systems require the use of a stand-alone receiver. For Loop to function without an internet connection, you will need the Dexcom app running on the same device as Loop.","title":"Dexcom G5 and G6 CGM"},{"location":"build/step4/#dexcom-g4-cgm-with-share-receiver","text":"The Dexcom G4 Share system transmits CGM data from the transmitter to a Dexcom G4 Share Receiver. The receiver, in turn, connects to the Dexcom Share2 app on your iPhone via Bluetooth. The Share2 app uploads CGM data to the Dexcom servers from your phone. For Loop to function without an internet connection, you will need the Dexcom app running on the same device as Loop.","title":"Dexcom G4 CGM with Share Receiver"},{"location":"build/step4/#medtronic-cgm","text":"The Minimed Enlite CGM, available with the Medtronic 522/722, 523/723, and 554/754, wirelessly sends blood glucose readings to the pump. Loop can read the Medtronic CGM data directly from the pump using a RileyLink compatible device.","title":"Medtronic CGM"},{"location":"build/step4/#offline-use","text":"Offline use means using Loop when there is no cell data or internet available. Loop does not require any special setup to operate offline. For offline Loop use, the iPhone's Bluetooth still needs to be active; and for Dexcom users, the Share2, G5, or G6 app also needs to be running on your Loop phone. If you put your iPhone into Airplane mode, remember to turn Bluetooth back on to keep your Loop running. If your offline use is failing, chances are you have forgotten to update your transmitter ID in Loop settings when you changed transmitters.","title":"Offline Use"},{"location":"build/step4/#dexcom-share","text":"Loop is capable of downloading Dexcom Share data for use in modeling BG. However, this is not a typical configuration and requires internet connection for both the phone with the Dexcom app and the phone with the Loop app. As will be discussed during the Loop Set Up Steps for adding a CGM, you usually enter the Dexcom transmitter ID and leave the Dexcom Share setting blank.","title":"Dexcom Share"},{"location":"build/step4/#cgms-not-natively-supported-in-loop","text":"There are other CGM, such as Libre (with BluCon or Miao Miao), Eversense and Medtronic Guardian sensors. Loop does not natively support those CGMs. If you would like to use one of those alternate CGMs and Loop, you will need to look into third-party integrations to allow Loop to access the blood glucose data. First search for previous posts on the topic and then ask questions in a Loop Social Media site. Currently, there are no solutions for Eversense or Guardian CGM to be used with Loop, but some Uploaders to Nightscout are available using an Android phone.","title":"CGMs Not Natively Supported in Loop"},{"location":"build/step4/#next-step-order-a-rileylink-compatible-device","text":"Now you are ready to move onto Step 5 to Order a RileyLink Compatible Device .","title":"Next Step: Order a RileyLink Compatible Device"},{"location":"build/step5/","text":"Step 5: Order a RileyLink Compatible Device \u2301 Time Estimate 15-20 minutes to read about RileyLink compatible devices 15 minutes to order a device Summary Decide what kind of RileyLink compatible device to buy Order your compatible device FAQs What is a RileyLink Compatible Device? RileyLink refers to both the communication protocol and the name of the original device. Other DIY Loopers have created RileyLink Compatible Devices that use the RileyLink protocol. At the current time, RileyLink, OrangeLink and EmaLink devices are available for purchase and all can be used interchangeably with Loop. Do I have to buy one? These are open-source hardware devices, but it takes special skills to build them yourself. It is recommended you buy one (or two). \"What happens if I lose my RileyLink compatible device or walk away from it?\" Within a half hour, your pump returns to normal scheduled basal rate \"Can I swap out RileyLink compatible devices at any time?\" Yes, you can. You do not need to start a new pod or rebuild the Loop app. Tap on the pump menu in Loop settings to search for new devices and enable Loop to create a Bluetooth connection. You can swap between RileyLink, OrangeLink, EmaLink or some future RileyLink compatible device. \"How close does the RileyLink compatible device need to be to me? Do I have to carry it with me?\" See RileyLink Compatible Device Range . What is a RileyLink Compatible Device \u2301 The RileyLink compatible device is an open-source hardware device that can bridge Bluetooth Low Energy (BLE) to the radio-frequency wireless communication used by select Medtronic and Omnipod pumps. What does that mean to you? It means the device is the communication highway between your insulin pump, CGM, and iPhone. DIY Loop will not work without a RileyLink compatible device. RileyLink Compatible Devices \u2301 The RileyLink protocol defines a specific bluetooth interface and way of opening a Sub-GHz radio channel to pumps. All RileyLink compatible devices follow the RileyLink protocol. There used to be just one option, the original RileyLink. Now there are more options, so you have to make a decision. Depending on your choice, be sure to have the correct charger and cables or batteries handy and add spare compatible supplies to your diabetes go-bag. One thing that might affect your choice is where you live and whether you want to charge the device or change batteries If you are in the US, shipping for RileyLink and OrangeLink is less expensive The EmaLink ships from Europe A Comparison Chart is provided by the GetRileyLink organization for all the RileyLink compatible devices listed below RileyLink Designed by Pete Schwamb, available from GetRileyLink Rechargable battery (max 36 hours per charge) Must order either Omnipod or Medtronic version OrangeLink Designed by Vic Wu, available from GetRileyLink Uses 2 AAA batteries, batteries typically last weeks or more, depending on batteries/pump type Works with either Omnipod or Medtronic Uses new chipsets, reported to have longer range Matches Apple Airpod form factor, so you can use airpod cases EmaLink Designed by Sorin Kupas-Spunei to increase range, offer smaller sizes Rechargable battery (various case/battery sizes available) Micro/Nano: 2 to 3 days Standard: 6 to 7 days Maxx: 12 to 14 days Must order either Omnipod or Medtronic version This EmaLink Information includes photos of various EmaLink configurations as well as photos showing relative sizes of EmaLink, OrangeLink and RileyLink This device ships from Europe, and is available by sending a private message via github to Sorin (sks01) or you can use this Ema Order Sheet Sometimes, a group-buy is organized on Facebook to minimize shipping costs More information \u2301 There is an entire FAQs page on RileyLink Compatible Devices . Waiting for your RileyLink Compatible Device \u2301 While you are waiting for the RileyLink compatible device to arrive, you can proceed with these build directions all the way through Step 14. After that, you'll have to wait for your device. You can't properly enter any settings or pump info in the Loop app without it. The population of DIY loopers (Loop and Android APS) has grown enough that you might be able to find someone local to loan you their spare. Next Step: Enroll in Apple Developer Program \u2301 Now you are ready to move onto Step 6 to enroll in the Apple Developer Program .","title":"Step 5 Order a RileyLink"},{"location":"build/step5/#step-5-order-a-rileylink-compatible-device","text":"Time Estimate 15-20 minutes to read about RileyLink compatible devices 15 minutes to order a device Summary Decide what kind of RileyLink compatible device to buy Order your compatible device FAQs What is a RileyLink Compatible Device? RileyLink refers to both the communication protocol and the name of the original device. Other DIY Loopers have created RileyLink Compatible Devices that use the RileyLink protocol. At the current time, RileyLink, OrangeLink and EmaLink devices are available for purchase and all can be used interchangeably with Loop. Do I have to buy one? These are open-source hardware devices, but it takes special skills to build them yourself. It is recommended you buy one (or two). \"What happens if I lose my RileyLink compatible device or walk away from it?\" Within a half hour, your pump returns to normal scheduled basal rate \"Can I swap out RileyLink compatible devices at any time?\" Yes, you can. You do not need to start a new pod or rebuild the Loop app. Tap on the pump menu in Loop settings to search for new devices and enable Loop to create a Bluetooth connection. You can swap between RileyLink, OrangeLink, EmaLink or some future RileyLink compatible device. \"How close does the RileyLink compatible device need to be to me? Do I have to carry it with me?\" See RileyLink Compatible Device Range .","title":"Step 5: Order a RileyLink Compatible Device"},{"location":"build/step5/#what-is-a-rileylink-compatible-device","text":"The RileyLink compatible device is an open-source hardware device that can bridge Bluetooth Low Energy (BLE) to the radio-frequency wireless communication used by select Medtronic and Omnipod pumps. What does that mean to you? It means the device is the communication highway between your insulin pump, CGM, and iPhone. DIY Loop will not work without a RileyLink compatible device.","title":"What is a RileyLink Compatible Device"},{"location":"build/step5/#rileylink-compatible-devices","text":"The RileyLink protocol defines a specific bluetooth interface and way of opening a Sub-GHz radio channel to pumps. All RileyLink compatible devices follow the RileyLink protocol. There used to be just one option, the original RileyLink. Now there are more options, so you have to make a decision. Depending on your choice, be sure to have the correct charger and cables or batteries handy and add spare compatible supplies to your diabetes go-bag. One thing that might affect your choice is where you live and whether you want to charge the device or change batteries If you are in the US, shipping for RileyLink and OrangeLink is less expensive The EmaLink ships from Europe A Comparison Chart is provided by the GetRileyLink organization for all the RileyLink compatible devices listed below RileyLink Designed by Pete Schwamb, available from GetRileyLink Rechargable battery (max 36 hours per charge) Must order either Omnipod or Medtronic version OrangeLink Designed by Vic Wu, available from GetRileyLink Uses 2 AAA batteries, batteries typically last weeks or more, depending on batteries/pump type Works with either Omnipod or Medtronic Uses new chipsets, reported to have longer range Matches Apple Airpod form factor, so you can use airpod cases EmaLink Designed by Sorin Kupas-Spunei to increase range, offer smaller sizes Rechargable battery (various case/battery sizes available) Micro/Nano: 2 to 3 days Standard: 6 to 7 days Maxx: 12 to 14 days Must order either Omnipod or Medtronic version This EmaLink Information includes photos of various EmaLink configurations as well as photos showing relative sizes of EmaLink, OrangeLink and RileyLink This device ships from Europe, and is available by sending a private message via github to Sorin (sks01) or you can use this Ema Order Sheet Sometimes, a group-buy is organized on Facebook to minimize shipping costs","title":"RileyLink Compatible Devices"},{"location":"build/step5/#more-information","text":"There is an entire FAQs page on RileyLink Compatible Devices .","title":"More information"},{"location":"build/step5/#waiting-for-your-rileylink-compatible-device","text":"While you are waiting for the RileyLink compatible device to arrive, you can proceed with these build directions all the way through Step 14. After that, you'll have to wait for your device. You can't properly enter any settings or pump info in the Loop app without it. The population of DIY loopers (Loop and Android APS) has grown enough that you might be able to find someone local to loan you their spare.","title":"Waiting for your RileyLink Compatible Device"},{"location":"build/step5/#next-step-enroll-in-apple-developer-program","text":"Now you are ready to move onto Step 6 to enroll in the Apple Developer Program .","title":"Next Step: Enroll in Apple Developer Program"},{"location":"build/step6/","text":"Step 6: Enroll in Apple Developer Program \u2301 Time Estimate 15-20 minutes to complete the enrollment forms up to 2 days to wait for confirmation email that enrollment has been activated Summary There are two options: Paid ($99/year) or Free (re-build weekly) Paid Developer Account: Go to the Apple Developer website to enroll in an individual account. Free: No action required at this time. FAQs \"Can I use someone else's Apple Developer account?\" Please refer to this Answer . \"Do I use my Apple ID or my child's Apple ID to enroll in the Apple Developer program?\" The Apple ID you use to enroll in the developer program does not need to be the same Apple ID as the Looper uses on their iPhone. For example, a parent installing Loop on their child's iPhone should configure a separate Apple ID for their child, but should use their own Apple ID to build the Loop app for that child. Typically for the developer enrollment, use the Apple ID of the person who will be building the app. \"How long does it take to have my Apple Development account active after I enroll?\" After you enroll, make sure you look for a confirmation email. Apple says it can take up to 24-48 hours to confirm and setup a new Apple developer account. However, some people have had the process take minutes. One SURE way to make it take longer is to use a different credit card to pay for the Apple Developer account enrollment than is already associated with that Apple ID. When you do that, finishing the enrollment process may be a hassle. Loopers Need Their Own Apple ID \u2301 It is important to understand that the Apple ID is distinct from the Apple Developer ID. Apple ID Parents should set up a different Apple ID for each of their looper children and looper children should not use the parent Apple ID. Please use Apple's Instructions for adding an Apple ID for your child. Sharing the Apple ID prevents Apple Health features from working properly. Sharing an Apple ID among two or more loopers can cause safety issues. You don't want Sally to be dosed for Joe's lunch in addition to her own and vice versa. In fact, the recommendation for Health Permissions has changed because this has happened. The Apple Health record is a convenient record of blood glucose, insulin and carbohydrates and should be associated with only one individual. To build your Loop app, you will need to use an Apple developer account. You have two options for an individual account: free or paid. Free Developer Account \u2301 If you decide to use a FREE developer account, here's what you need to know: Loop apps signed with a free developer account will expire after 7 days. On the 7th day, your Loop app will simply turn white when you open it and then immediately close. To rebuild the Loop app, you will have to find a computer and rebuild the app onto your iPhone again. You cannot rebuild the app on day 5 (when it is convenient, for example), hoping to reset the 7-day clock. The app will still expire on the 7th day from when it was first signed and created. If you decide to switch to a paid account after trying out the free account, you will need to rebuild your Loop app to sign it with the new paid account. Furthermore, switching from a Free to a Paid account requires entering all the settings again (and starting a fresh pod). You will have to do an extra step during the build process to remove Siri and Apple Push capabilities to build with free accounts. Because free accounts do not have access to Apple Push notifications, you will also not be able to use remote overrides through Nightscout. Paid Developer Account \u2301 If you decide to use a PAID developer account, here's what you need to know: Loop apps signed with a paid developer account will last for a full year. The paid developer account is $99 per year. The default setting is to auto-renew annually. You can change that selection in your developer account settings at any time. If your household has multiple Loop users, only one developer account is needed. That one developer account can be used to sign multiple Loop apps. Switching from Free to Paid Memberships \u2301 There is no problem trying a free account first before you decide to buy a paid developer account. If you start with a free account, you'll build a Loop app (let's call it FreeLoop). When you switch to a paid account, you'll be building a totally new and separate Loop app onto your phone (let's call it PaidLoop). The two apps will look identical on your phone, but they will be functionally separate from each other. Make sure you are successful building the PaidLoop app before deleting the FreeLoop app from your phone. Use the search feature on your phone to find both apps. One will have your configuration settings (FreeLoop), the other will not (PaidLoop). Before deleting the FreeLoop, either record all the settings or take screen shots of all the relevant settings screens. PaidLoop will know nothing about the settings and information you had stored in FreeLoop, so you will need to re-enter all your settings (basal rates, ISF, carb ratios, etc.) and configurations into the new PaidLoop. It will also not connect or control any pods you are currently using with the old FreeLoop app. The one exception is Nightscout credentials, which are stored in your keychain. If you entered your Nightscout credentials into FreeLoop, they will persist across app removal and be used by PaidLoop. Enrolling \u2301 Paid account enrollment is all done through Apple's Developer Program website. Go to the Apple Developer website to enroll in an individual paid account. If you choose to use the free account, you don't have to do anything on that website. You'll just wait for Step 8 Xcode Preferences and we will get your free account then. Next Step: Install Xcode \u2301 Now you are ready to skip to Step 8 to Install Xcode . And if you've been counting - yes, Step 7 is no longer required.","title":"Step 6 Enroll in Apple Developer Program"},{"location":"build/step6/#step-6-enroll-in-apple-developer-program","text":"Time Estimate 15-20 minutes to complete the enrollment forms up to 2 days to wait for confirmation email that enrollment has been activated Summary There are two options: Paid ($99/year) or Free (re-build weekly) Paid Developer Account: Go to the Apple Developer website to enroll in an individual account. Free: No action required at this time. FAQs \"Can I use someone else's Apple Developer account?\" Please refer to this Answer . \"Do I use my Apple ID or my child's Apple ID to enroll in the Apple Developer program?\" The Apple ID you use to enroll in the developer program does not need to be the same Apple ID as the Looper uses on their iPhone. For example, a parent installing Loop on their child's iPhone should configure a separate Apple ID for their child, but should use their own Apple ID to build the Loop app for that child. Typically for the developer enrollment, use the Apple ID of the person who will be building the app. \"How long does it take to have my Apple Development account active after I enroll?\" After you enroll, make sure you look for a confirmation email. Apple says it can take up to 24-48 hours to confirm and setup a new Apple developer account. However, some people have had the process take minutes. One SURE way to make it take longer is to use a different credit card to pay for the Apple Developer account enrollment than is already associated with that Apple ID. When you do that, finishing the enrollment process may be a hassle.","title":"Step 6: Enroll in Apple Developer Program"},{"location":"build/step6/#loopers-need-their-own-apple-id","text":"It is important to understand that the Apple ID is distinct from the Apple Developer ID. Apple ID Parents should set up a different Apple ID for each of their looper children and looper children should not use the parent Apple ID. Please use Apple's Instructions for adding an Apple ID for your child. Sharing the Apple ID prevents Apple Health features from working properly. Sharing an Apple ID among two or more loopers can cause safety issues. You don't want Sally to be dosed for Joe's lunch in addition to her own and vice versa. In fact, the recommendation for Health Permissions has changed because this has happened. The Apple Health record is a convenient record of blood glucose, insulin and carbohydrates and should be associated with only one individual. To build your Loop app, you will need to use an Apple developer account. You have two options for an individual account: free or paid.","title":"Loopers Need Their Own Apple ID"},{"location":"build/step6/#free-developer-account","text":"If you decide to use a FREE developer account, here's what you need to know: Loop apps signed with a free developer account will expire after 7 days. On the 7th day, your Loop app will simply turn white when you open it and then immediately close. To rebuild the Loop app, you will have to find a computer and rebuild the app onto your iPhone again. You cannot rebuild the app on day 5 (when it is convenient, for example), hoping to reset the 7-day clock. The app will still expire on the 7th day from when it was first signed and created. If you decide to switch to a paid account after trying out the free account, you will need to rebuild your Loop app to sign it with the new paid account. Furthermore, switching from a Free to a Paid account requires entering all the settings again (and starting a fresh pod). You will have to do an extra step during the build process to remove Siri and Apple Push capabilities to build with free accounts. Because free accounts do not have access to Apple Push notifications, you will also not be able to use remote overrides through Nightscout.","title":"Free Developer Account"},{"location":"build/step6/#paid-developer-account","text":"If you decide to use a PAID developer account, here's what you need to know: Loop apps signed with a paid developer account will last for a full year. The paid developer account is $99 per year. The default setting is to auto-renew annually. You can change that selection in your developer account settings at any time. If your household has multiple Loop users, only one developer account is needed. That one developer account can be used to sign multiple Loop apps.","title":"Paid Developer Account"},{"location":"build/step6/#switching-from-free-to-paid-memberships","text":"There is no problem trying a free account first before you decide to buy a paid developer account. If you start with a free account, you'll build a Loop app (let's call it FreeLoop). When you switch to a paid account, you'll be building a totally new and separate Loop app onto your phone (let's call it PaidLoop). The two apps will look identical on your phone, but they will be functionally separate from each other. Make sure you are successful building the PaidLoop app before deleting the FreeLoop app from your phone. Use the search feature on your phone to find both apps. One will have your configuration settings (FreeLoop), the other will not (PaidLoop). Before deleting the FreeLoop, either record all the settings or take screen shots of all the relevant settings screens. PaidLoop will know nothing about the settings and information you had stored in FreeLoop, so you will need to re-enter all your settings (basal rates, ISF, carb ratios, etc.) and configurations into the new PaidLoop. It will also not connect or control any pods you are currently using with the old FreeLoop app. The one exception is Nightscout credentials, which are stored in your keychain. If you entered your Nightscout credentials into FreeLoop, they will persist across app removal and be used by PaidLoop.","title":"Switching from Free to Paid Memberships"},{"location":"build/step6/#enrolling","text":"Paid account enrollment is all done through Apple's Developer Program website. Go to the Apple Developer website to enroll in an individual paid account. If you choose to use the free account, you don't have to do anything on that website. You'll just wait for Step 8 Xcode Preferences and we will get your free account then.","title":"Enrolling"},{"location":"build/step6/#next-step-install-xcode","text":"Now you are ready to skip to Step 8 to Install Xcode . And if you've been counting - yes, Step 7 is no longer required.","title":"Next Step: Install Xcode"},{"location":"build/step7/","text":"Step 7: Skip Step 7 \u2301 In the olden days, Loop could only be built on a computer using another tool called carthage that could only be installed with another tool called homebrew. No longer needed. In Jan 2021, when the version of carthage advanced from 0.36.0 to 0.36.1; Loop-building came to a halt. The developers responded and now you don't need to install carthage. That means you can skip this page. If you have previously built, so have previously done this step check Build Errors: Carthage . Next Step: Download Xcode \u2301 Now you are ready to move onto Step 8 to download Xcode .","title":"Step 7 Skip Step 7"},{"location":"build/step7/#step-7-skip-step-7","text":"In the olden days, Loop could only be built on a computer using another tool called carthage that could only be installed with another tool called homebrew. No longer needed. In Jan 2021, when the version of carthage advanced from 0.36.0 to 0.36.1; Loop-building came to a halt. The developers responded and now you don't need to install carthage. That means you can skip this page. If you have previously built, so have previously done this step check Build Errors: Carthage .","title":"Step 7: Skip Step 7"},{"location":"build/step7/#next-step-download-xcode","text":"Now you are ready to move onto Step 8 to download Xcode .","title":"Next Step: Download Xcode"},{"location":"build/step8/","text":"Step 8: Download Xcode \u2301 Time Estimate 45 minutes to 2 hours, depending on internet connection...but you don't need to babysit the download. Summary Check iPhone/iPod iOS version The iOS version determines minimum Xcode version The minimum Xcode version determines minimum macOS version If necessary, update macOS Download Xcode from your computer's App Store application FAQs \"Why isn't my Xcode installing?\" The two most common reasons are: lack of internet connection or not enough free space on the computer hard drive Xcode is a large download, and it needs space to properly unpack and install itself For a new Xcode installation, at least 50GB of free space on your hard drive is required If you get low on free space, you may have installation failures Check the Space Available This step may take more time than the other steps, because the download takes a while. The good news is that you don't have to watch it. Instead, you can simply walk away once the download starts. If your laptop goes to sleep when you close the lid or when the screen saver starts - be sure to disable the screen saver and leave the laptop open. This is a big download, so don't expected this to be fast. Xcode is a free application for Apple computers. Xcode will turn the Loop \"raw\" code into an iOS application and install it onto your iPhone/iPod. Make sure you have at least the minimum required macOS for this version of Xcode. Install Xcode \u2301 If you've done your homework (read this entire page) and are ready to download and install Xcode, here are the instructions: Open your App Store in your computer and search for Xcode You will be downloading it brand new or updating an existing installation If the version number you need is bigger than what is shown, stop and review the rest of this page This image is old - latest Xcode version is 12.4 (March 17, 2021) How do all the minimum versions relate to each other? \u2301 Most people will update their iOS on their iPhones more often than they update their macOS or Xcode. You know how it goes...you're tapping on your phone one day and it says there's a new version of iOS available for your phone. Want to update it now? Or be reminded of it later? Or maybe you even have the setting on your phone set to automatically install iOS updates. Because the update looks so innocuous and we all lead busy lives, we forget that there might be consequences to iOS updates. Loop and iOS Updates Please Wait - Disable the automatic iOS update. As far as we know, an iOS update has never prevented Loop from working But an iOS update often requires an Xcode update to build Loop on that device Rarely, but it has happened, that Xcode update requires a Loop code update If a problem is found, the solution is typically posted pretty quickly Check on your favorite social media platform to see if a newly released iOS is causing an issue with Loop or your CGM before accepting the update from Apple The \"All-Clear\" or \"WAIT there's a problem\" is normally posted within a few days Minimum Xcode Version The minimum version of Xcode you need is dependent on your version of iOS If your phone is running iOS 14.x, that requires at least Xcode 12.x If your phone is running iOS 14.1, Xcode 12.1 works, but so does 12.4 If your phone is running iOS 12.4, Xcode 12.4 on a mac with macOS 11.2.2 (Big Sur) builds Loop just fine If you are running iOS 14, we recommended you update to at least iOS 14.4, Xcode to 12.4; some iOS 14 updates were pretty important All iOS 14 versions require macOS 10.15.4 as a minimum Can't find the required Xcode version If your computer is running macOS 10.15.2, the App Store won't show Xcode version 12 You must use iOS to determine which Xcode, which determines which macOS Update your computer to at least that minimum macOS first Don't be the person who posts for help saying, \"I'm trying to update my Loop app but am getting errors.\" When asked what Xcode version they have and if they've updated, they respond, \"I don't have any Xcode updates available in the App Store...so I must be running the most current version.\" Actually, they forgot to check for macOS updates and therefore cannot see the needed Xcode update yet. The chart below is a helpful map of how to read of the minimum versions you'll need based on your iOS. (Note: this graphic is not updated with every iOS update - go to the link provided and use this figure as a map to read the minimum requirements.) Every attempt will be made to update the words promptly - that's much easier than updating the figure. macOS: If you are running an iPhone with iOS 14, you need to make sure your macOS is 10.15.4 at a minimum as the first step. If you don't have the minimum version, go to Step 1 Compatible Computer and follow directions for updating your macOS. Xcode: Now that your macOS is updated to at least 10.15.4, the App Store in your computer will have Xcode 12.4 (or newer) available for you to download/update. (Source for the chart is Wikipedia . Remember - follow the link and scroll down to the figure to actually check versions - the graphic shown below is a map of how to read the figure at Wikipedia.) What happens if you try using too old of Xcode? \u2301 Breaking News If you try to build with a version of Xcode older than 11.4.1 you will get a Revoke Certificate message when you try to sign targets Go to Revoke Certificate Issue to see the error message You should update Xcode (on March 27, 2021, Xcode is at version 12.4) Go to Install macOS and Xcode updates It isn't some catastrophic failure if you try to build with an outdated Xcode without realizing it. If the build fails, nothing happens to your phone (or Loop on your phone if you are rebuilding). Nothing is copied from the computer to the phone until after you see the Build Succeeded message. You'll see a pretty obvious error message during your Loop build that says \"Could not locate device support files.\" That messages is telling you that your iOS on the phone requires you to get a newer version of Xcode to be able to build Loop onto that phone. So, if you see that error message, realize you may have to update your macOS to be able to see the newest Xcode version that you will need. Make sure to check that chart to see what your minimum versions are for the iOS you are running on your iPhone. Next Step: Xcode Preferences \u2301 Now you are ready to move onto Step 9 to work on Xcode Preferences .","title":"Step 8 Download Xcode"},{"location":"build/step8/#step-8-download-xcode","text":"Time Estimate 45 minutes to 2 hours, depending on internet connection...but you don't need to babysit the download. Summary Check iPhone/iPod iOS version The iOS version determines minimum Xcode version The minimum Xcode version determines minimum macOS version If necessary, update macOS Download Xcode from your computer's App Store application FAQs \"Why isn't my Xcode installing?\" The two most common reasons are: lack of internet connection or not enough free space on the computer hard drive Xcode is a large download, and it needs space to properly unpack and install itself For a new Xcode installation, at least 50GB of free space on your hard drive is required If you get low on free space, you may have installation failures Check the Space Available This step may take more time than the other steps, because the download takes a while. The good news is that you don't have to watch it. Instead, you can simply walk away once the download starts. If your laptop goes to sleep when you close the lid or when the screen saver starts - be sure to disable the screen saver and leave the laptop open. This is a big download, so don't expected this to be fast. Xcode is a free application for Apple computers. Xcode will turn the Loop \"raw\" code into an iOS application and install it onto your iPhone/iPod. Make sure you have at least the minimum required macOS for this version of Xcode.","title":"Step 8: Download Xcode"},{"location":"build/step8/#install-xcode","text":"If you've done your homework (read this entire page) and are ready to download and install Xcode, here are the instructions: Open your App Store in your computer and search for Xcode You will be downloading it brand new or updating an existing installation If the version number you need is bigger than what is shown, stop and review the rest of this page This image is old - latest Xcode version is 12.4 (March 17, 2021)","title":"Install Xcode"},{"location":"build/step8/#how-do-all-the-minimum-versions-relate-to-each-other","text":"Most people will update their iOS on their iPhones more often than they update their macOS or Xcode. You know how it goes...you're tapping on your phone one day and it says there's a new version of iOS available for your phone. Want to update it now? Or be reminded of it later? Or maybe you even have the setting on your phone set to automatically install iOS updates. Because the update looks so innocuous and we all lead busy lives, we forget that there might be consequences to iOS updates. Loop and iOS Updates Please Wait - Disable the automatic iOS update. As far as we know, an iOS update has never prevented Loop from working But an iOS update often requires an Xcode update to build Loop on that device Rarely, but it has happened, that Xcode update requires a Loop code update If a problem is found, the solution is typically posted pretty quickly Check on your favorite social media platform to see if a newly released iOS is causing an issue with Loop or your CGM before accepting the update from Apple The \"All-Clear\" or \"WAIT there's a problem\" is normally posted within a few days Minimum Xcode Version The minimum version of Xcode you need is dependent on your version of iOS If your phone is running iOS 14.x, that requires at least Xcode 12.x If your phone is running iOS 14.1, Xcode 12.1 works, but so does 12.4 If your phone is running iOS 12.4, Xcode 12.4 on a mac with macOS 11.2.2 (Big Sur) builds Loop just fine If you are running iOS 14, we recommended you update to at least iOS 14.4, Xcode to 12.4; some iOS 14 updates were pretty important All iOS 14 versions require macOS 10.15.4 as a minimum Can't find the required Xcode version If your computer is running macOS 10.15.2, the App Store won't show Xcode version 12 You must use iOS to determine which Xcode, which determines which macOS Update your computer to at least that minimum macOS first Don't be the person who posts for help saying, \"I'm trying to update my Loop app but am getting errors.\" When asked what Xcode version they have and if they've updated, they respond, \"I don't have any Xcode updates available in the App Store...so I must be running the most current version.\" Actually, they forgot to check for macOS updates and therefore cannot see the needed Xcode update yet. The chart below is a helpful map of how to read of the minimum versions you'll need based on your iOS. (Note: this graphic is not updated with every iOS update - go to the link provided and use this figure as a map to read the minimum requirements.) Every attempt will be made to update the words promptly - that's much easier than updating the figure. macOS: If you are running an iPhone with iOS 14, you need to make sure your macOS is 10.15.4 at a minimum as the first step. If you don't have the minimum version, go to Step 1 Compatible Computer and follow directions for updating your macOS. Xcode: Now that your macOS is updated to at least 10.15.4, the App Store in your computer will have Xcode 12.4 (or newer) available for you to download/update. (Source for the chart is Wikipedia . Remember - follow the link and scroll down to the figure to actually check versions - the graphic shown below is a map of how to read the figure at Wikipedia.)","title":"How do all the minimum versions relate to each other?"},{"location":"build/step8/#what-happens-if-you-try-using-too-old-of-xcode","text":"Breaking News If you try to build with a version of Xcode older than 11.4.1 you will get a Revoke Certificate message when you try to sign targets Go to Revoke Certificate Issue to see the error message You should update Xcode (on March 27, 2021, Xcode is at version 12.4) Go to Install macOS and Xcode updates It isn't some catastrophic failure if you try to build with an outdated Xcode without realizing it. If the build fails, nothing happens to your phone (or Loop on your phone if you are rebuilding). Nothing is copied from the computer to the phone until after you see the Build Succeeded message. You'll see a pretty obvious error message during your Loop build that says \"Could not locate device support files.\" That messages is telling you that your iOS on the phone requires you to get a newer version of Xcode to be able to build Loop onto that phone. So, if you see that error message, realize you may have to update your macOS to be able to see the newest Xcode version that you will need. Make sure to check that chart to see what your minimum versions are for the iOS you are running on your iPhone.","title":"What happens if you try using too old of Xcode?"},{"location":"build/step8/#next-step-xcode-preferences","text":"Now you are ready to move onto Step 9 to work on Xcode Preferences .","title":"Next Step: Xcode Preferences"},{"location":"build/step9/","text":"Step 9: Xcode Preferences \u2301 Time Estimate about 10-15 minutes to install the Command Line Tools 5 minutes to add your Apple ID, assuming you remember your password Summary Open Xcode Preferences and add your Apple ID under the Accounts tab. Verify that Command Line Tools has been properly installed under Xcode Preferences under the Locations tab. FAQs \"I still only see an account with (personal team) beside it even though I enrolled in the paid Developer Account program...what should I do?\" You should check your spam email box in case Apple sent you an email there. Make sure you've waited the 48 hours that Apple says it may take to get your account approved. If it's been 48 hours and you still don't see anything in your email, contact Apple support and ask them about the status of your enrollment. It may be held up by something on their end. Since you've been working in order, you will now have Xcode installed on your computer from Step 8. You will also have enrolled in the Apple Developer program with a paid account, if that was your selection, in Step 6. Now we need to tell Xcode about your Developer Account. But first a few more steps. Did your computer reboot following the Xcode installation. If not, reboot now. Open Xcode from your Applications folder. If it offers to start a new project with you, just close that window. Command Line Tools \u2301 There may be a short delay the very first time you open Xcode because it will install a package of tools. Don't close that window out, let it finish...we will need those Command Line Tools. Helpful tip: When the Command Line Tools installation is done and the pop-up window closes, check that your Command Line Tools installed correctly. Open Xcode's Preferences by clicking on the word Xcode in the top menu bar (just to the right of the Apple icon in the upper-left corner) and selecting Preferences in the drop-down menu. The keyboard shortcut to open Xcode Preferences is command-comma if that's easier for you. Then select the Locations tab of Preferences window and you'll see the dropdown menu for Command Line Tools. Make sure the Xcode version listed matches what you just installed. If it's blank, use the blue arrows to the right of the Command Line Tools row to select it. Simulator Download \u2301 Starting with Xcode 12, the simulators are no longer being downloaded automatically. You may be required to download them yourself. While still on the Xcode Preferences window, after adding command line tools using the Locations tab, click on the Components tab. It should look similar to the first figure below. Choose the iOS operating system closest to the one on your phone and click the down arrow to install it. (If your phone has iOS 14.4, and the biggest number simulator you see is iOS 14.3, download that one. If you phone has iOS 13.3, first we recommend updating, but if you choose not to, then select iOS 13.3 from the list.) Then scroll down to find the watchOS lines and choose the operating system on your watch (or biggest number if you don't have a watch paired) and click the down arrow to install it. Simulator download is now initiated. You can continue with the next steps, but let download complete before trying to build. Add Apple ID \u2301 Go to the Xcode Preferences window from above, click on the Accounts tab and then press the + in the lower-left corner to add an Apple ID account. If you want to use a free developer account, you will simply enter your Apple ID in this section and Xcode will automatically enroll your Apple ID in the free developer program. If you enrolled in the paid account already and have confirmation that your account is active, enter the Apple ID of the paid developer account. The screenshot below shows the labeling of team names based on whether from free account vs. paid account. Free teams will have (personal team) after the name. You are now done setting up Xcode. Great job! You will not need to redo the account setup steps on any subsequent builds or updates of your Loop app. Xcode will remember these settings. Next Step: Test Settings \u2301 Now you are ready to move onto Step 10 to Test Your Settings .","title":"Step 9 Xcode Preferences"},{"location":"build/step9/#step-9-xcode-preferences","text":"Time Estimate about 10-15 minutes to install the Command Line Tools 5 minutes to add your Apple ID, assuming you remember your password Summary Open Xcode Preferences and add your Apple ID under the Accounts tab. Verify that Command Line Tools has been properly installed under Xcode Preferences under the Locations tab. FAQs \"I still only see an account with (personal team) beside it even though I enrolled in the paid Developer Account program...what should I do?\" You should check your spam email box in case Apple sent you an email there. Make sure you've waited the 48 hours that Apple says it may take to get your account approved. If it's been 48 hours and you still don't see anything in your email, contact Apple support and ask them about the status of your enrollment. It may be held up by something on their end. Since you've been working in order, you will now have Xcode installed on your computer from Step 8. You will also have enrolled in the Apple Developer program with a paid account, if that was your selection, in Step 6. Now we need to tell Xcode about your Developer Account. But first a few more steps. Did your computer reboot following the Xcode installation. If not, reboot now. Open Xcode from your Applications folder. If it offers to start a new project with you, just close that window.","title":"Step 9: Xcode Preferences"},{"location":"build/step9/#command-line-tools","text":"There may be a short delay the very first time you open Xcode because it will install a package of tools. Don't close that window out, let it finish...we will need those Command Line Tools. Helpful tip: When the Command Line Tools installation is done and the pop-up window closes, check that your Command Line Tools installed correctly. Open Xcode's Preferences by clicking on the word Xcode in the top menu bar (just to the right of the Apple icon in the upper-left corner) and selecting Preferences in the drop-down menu. The keyboard shortcut to open Xcode Preferences is command-comma if that's easier for you. Then select the Locations tab of Preferences window and you'll see the dropdown menu for Command Line Tools. Make sure the Xcode version listed matches what you just installed. If it's blank, use the blue arrows to the right of the Command Line Tools row to select it.","title":"Command Line Tools"},{"location":"build/step9/#simulator-download","text":"Starting with Xcode 12, the simulators are no longer being downloaded automatically. You may be required to download them yourself. While still on the Xcode Preferences window, after adding command line tools using the Locations tab, click on the Components tab. It should look similar to the first figure below. Choose the iOS operating system closest to the one on your phone and click the down arrow to install it. (If your phone has iOS 14.4, and the biggest number simulator you see is iOS 14.3, download that one. If you phone has iOS 13.3, first we recommend updating, but if you choose not to, then select iOS 13.3 from the list.) Then scroll down to find the watchOS lines and choose the operating system on your watch (or biggest number if you don't have a watch paired) and click the down arrow to install it. Simulator download is now initiated. You can continue with the next steps, but let download complete before trying to build.","title":"Simulator Download"},{"location":"build/step9/#add-apple-id","text":"Go to the Xcode Preferences window from above, click on the Accounts tab and then press the + in the lower-left corner to add an Apple ID account. If you want to use a free developer account, you will simply enter your Apple ID in this section and Xcode will automatically enroll your Apple ID in the free developer program. If you enrolled in the paid account already and have confirmation that your account is active, enter the Apple ID of the paid developer account. The screenshot below shows the labeling of team names based on whether from free account vs. paid account. Free teams will have (personal team) after the name. You are now done setting up Xcode. Great job! You will not need to redo the account setup steps on any subsequent builds or updates of your Loop app. Xcode will remember these settings.","title":"Add Apple ID"},{"location":"build/step9/#next-step-test-settings","text":"Now you are ready to move onto Step 10 to Test Your Settings .","title":"Next Step: Test Settings"},{"location":"build/updating/","text":"Updating Loop \u2301 Time Estimate 25 minutes, if already have updates done 40-90 minutes, if need to install Apple update(s) Summary Install macOS and Xcode updates based on your phone iOS Check your Developer Account Download Updated Loop code Recommended Actions a. Delete old provisioning profiles b. Clean cache and derived data Build like normal Resolve Build Errors if needed FAQs \"What is an update?\" Anytime you want to change branches, add or change a customizations, or grab updates to the same branch you built before...that is an update of your Loop app. \"Do I delete my old Loop app first?\" Definitely not ! If you keep your Loop app on your phone, your Loop settings (and existing pod) will continue to work the same after the update. Seamless. \"Do I need to start a new pod when I update?\" No. Your existing pod session will continue seamlessly if you are using the same Developer Account to sign the Loop app targets as you did the last time you built. \"What if I'm using a new/different developer account?\" If you aren't building with the same developer account used when your existing app was built (this includes going from free to paid), then you will be installing a brand new (second) Loop app on your phone. Your existing pod won't work with the new app, so you might want to time this transition when you are due to change pods. Delete the old app once you get the new one all set up. \"What if it is a new computer but the same developer account?\" No big deal...repeat Build Steps 1, 8 and 9 with your new computer. When to Update Loop \u2301 The apps built and signed by you in Xcode with a paid developer account will only last for 12 months before they expire and need rebuilding. So, at least once per year you will have to rebuild your app and go through this update process. Under ordinary circumstances, you do not have to update your Loop app until you are ready to grab new features. However, we encourage regular updates when a new version is released because they often contain bug fixes or improvements which may increase operational stability. Also, if you have updated your phone iOS since the last build, you should download a new copy of the code. Step 1: Install macOS and Xcode updates \u2301 Verify macOS Between Loop app builds, there's a high likelihood that Apple has updated one or more of the systems involved in your Loop app. If you don't have the minimum macOS, you cannot build on that phone. (Note, the current macOS will build the Loop app for all these iOS versions.) For iOS 14.5 (not yet released), minimum is expected to be macOS 11.x (Big Sur) For iOS 14.x, minimum is macOS 10.15.4 (Catalina) For iOS 13.4 through 13.7, minimum is macOS 10.15.2 (Catalina) For iOS 13.0 through 13.2, minimum is macOS 10.14.4 (Mojave) For iOS 12.4, minimum is macOS 10.14.3 (Mojave) Verify Xcode Now that you have updated your macOS, you should have the ability to see the most recent version of Xcode. The information for which Xcode is required is found in Build Step 8 . (It's not repeated because that way we only have to update it on one page. In the time of rapid iOS changes, that's the best way to keep the information accurate.) If you see that you need to update (and you probably do), then keep following instruction on that page and the next one (Build Step 9) and then return to this page. Follow Build Step 9 after updating Xcode Make sure to restart your computer after updating Xcode and follow the instructions in Build Step 9. There's a known issue that happens often enough to be frustrating if you skip those steps. Either a build error about missing simulators or a \"device not connected\" (even when phone is connected). It's not always required...but this is a good easy ounce of problem prevention. If you think you are immune from needing to update and want to skip Step 1 on this page, at least review the compatibility chart in Build Step 8 to make sure your macOS and Xcode meet their minimums based on your device's iOS before proceeding. Many people try to build without meeting the minimum versions - don't be that person. Step 2: Check your Developer Account \u2301 Apple updates its License Agreement for the Developer Program frequently. You need to login to your developer account to manually check if there is a new agreeement to accept. If you see a big red or orange banner across the top of your Developer Account announcing a new license agreement like shown below...please read and accept it before building Loop. Step 3: Download Updated Loop Code \u2301 After you've finished the updates to your devices listed above, you can move onto downloading updated Loop code. You will not be simply using your old downloaded Loop code (and in fact, you can delete those old folders now if you want). There is a fast and easy menu-driven script available to build Loop that works once you've updated your macOS and Xcode to versions compatible with your iPhone iOS. It works for both master and automatic-bolus branches. The Build Select Script webpage has instructions on how to use the script. That script allows you to perform the rest of the steps on this page with a menu-driven interface. Before you head over there, finish reading this page so you understand all the steps that are needed. The steps are explained again over there, but not in quite so much detail. If you prefer the zip download method, follow the links from Build Step 13 , then return to this page. Step 4a: Delete old provisioning profiles \u2301 Infrequent Builder, App Expires soon \u2301 If your app will expire soon or you build infrequently, then Delete Profiles . Not sure when your app expires? Here are instructions to check your Loop Expiration Date . Frequent Builder \u2301 If you build frequently, you do not need to delete the profiles every time. One user reported deleting profiles gave a Revoke Certificate message - follow the link to see other reasons why that might happen. Background Information \u2301 Older versions of Xcode used to automatically create a new \"provisioning profile\" as part of the Loop building process. That provisioning profile, among other things, sets the expiration date for your app. If you sign with a paid team, that profile is set to expire in 12 months. If you sign with a free team, that profile is set to expire in 7 days. You can always check the expiration date immediately after a successful build of your loop app by clicking the little \"i\" icon next the \"Provisioning Profile\" line in the target signing area. Add 12 months to the \"created\" date (paid account), or 7 days (free account), and you'll have your app's date of future spontaneous death, which you can record in your calendar. Here's what started happening about September 2019 with Xcode 11, the provisioning profiles were being reused so the date was not updated each time you built. This change resulted in many people's apps expiring unexpectedly (and therefore dying suddenly) starting in September 2020 despite having updated/rebuilt recently and having current developer accounts (either manually renewed or automatically renewed, doesn't matter). Once you follow the steps in the orange box below, Xcode will have no memory of the old provisioning profiles and will be forced to create a brand new one with the next Loop build. Therefore, you'll get a brand spanking new \"created\" date that will match the build date. Simple and straight-forward. (Leave Terminal app open to do Step 4b afterwards too.) Delete Profiles \u2301 How to delete old provisioning profiles Find your Terminal app (search in Applications) Open your Terminal app Copy and paste the line in the little grey box below into the Terminal prompt. Press enter after you paste it. rm ~/Library/MobileDevice/Provisioning\\ Profiles/*.mobileprovision You won't see anything special after you enter the command...your Terminal screen should look as boring as shown below when successful. Revoke Certificate Issue \u2301 What does it look like if you run into the Revoke Certificate message? When you prepare to Sign the Targets with Xcode, you'll see the message highlighted in the figure below. More information is shown in the orange box below. Revoke certificate The important part of this message is: \". . . signing certificate . . . private key is not installed in your keychain . . .\" WAIT - You might not need to revoke your certificate You might get this if you logged in as a different user, have a new computer or if your computer had to undergo a factory reset You can transfer your keychain to your new computer (or just revoke and keep going) To transfer your keychain, check this Apple Documentation Link Your version of Xcode is way out-of-date Mentors have seen this with people trying to build with Xcode 11.4 or earlier Update Xcode to the most recent version If you revoke and keep going: If you do hit Revoke Certificate, you'll be given a new one Even with the new certificate, your Apple Developer ID is not affected You can re-build on the existing Loop app on your device(s) and maintain all your settings with the new certificate. Be aware that you will have to rebuild to every device that used the certificate you just revoked and if you have other apps built with this certificate, they will stop working too. Step 4b: Clean cache and derived data \u2301 This may not be necessary, but it is one of the first steps to try if you do get a build error. Since you already have Terminal app open, you can prevent one of the possible sources of build errors in advance by cleaning out straggler data from previous Loop builds. Clean cache and derived data Using Terminal app that should still be open from Step 4a Copy and paste this command and press return: rm -rf ~/Library/Caches/org.carthage.CarthageKit Note: you won't see any message back if the command runs successfully. Copy and paste this command and press return: rm -rf ~/Library/Developer/Xcode/DerivedData Note: you won't see any message back if the command runs successfully. You won't see anything special after you enter the commands...your Terminal screen should look as boring as it did in the previous step 4a. Step 5: Build like normal \u2301 From here, go straight to Step 14 Build Loop app and do just like you did the first time. Open the new Loop code that you just downloaded a couple steps above, plug in the phone, select your phone, sign four targets, code customizations (if wanted), and then build button. Easy peasy. Double check expiration date If you want to make sure that step 4 above (deleting the provisioning profiles) went well, check the \"created\" date on your provisioning profile after you sign your Loop target for this rebuild. It should have the current date as the \"created\" date and your Loop app, if you successfully build, will function for 12 more months (for paid accounts) so long as you keep your developer account paid/automatically renewed. To find out expiration date later, use this procedure . Step 6: Resolve Build Errors if needed \u2301 Check Build Errors Page If you get a build error, check the Build Errors page . You might be able to resolve it yourself. Even if your exact error isn't there, the information you need to provide when asking for help is listed on that page. And that information is critical to allow mentors to help troubleshoot your build error.","title":"Updating/Rebuilding your Loop"},{"location":"build/updating/#updating-loop","text":"Time Estimate 25 minutes, if already have updates done 40-90 minutes, if need to install Apple update(s) Summary Install macOS and Xcode updates based on your phone iOS Check your Developer Account Download Updated Loop code Recommended Actions a. Delete old provisioning profiles b. Clean cache and derived data Build like normal Resolve Build Errors if needed FAQs \"What is an update?\" Anytime you want to change branches, add or change a customizations, or grab updates to the same branch you built before...that is an update of your Loop app. \"Do I delete my old Loop app first?\" Definitely not ! If you keep your Loop app on your phone, your Loop settings (and existing pod) will continue to work the same after the update. Seamless. \"Do I need to start a new pod when I update?\" No. Your existing pod session will continue seamlessly if you are using the same Developer Account to sign the Loop app targets as you did the last time you built. \"What if I'm using a new/different developer account?\" If you aren't building with the same developer account used when your existing app was built (this includes going from free to paid), then you will be installing a brand new (second) Loop app on your phone. Your existing pod won't work with the new app, so you might want to time this transition when you are due to change pods. Delete the old app once you get the new one all set up. \"What if it is a new computer but the same developer account?\" No big deal...repeat Build Steps 1, 8 and 9 with your new computer.","title":"Updating Loop"},{"location":"build/updating/#when-to-update-loop","text":"The apps built and signed by you in Xcode with a paid developer account will only last for 12 months before they expire and need rebuilding. So, at least once per year you will have to rebuild your app and go through this update process. Under ordinary circumstances, you do not have to update your Loop app until you are ready to grab new features. However, we encourage regular updates when a new version is released because they often contain bug fixes or improvements which may increase operational stability. Also, if you have updated your phone iOS since the last build, you should download a new copy of the code.","title":"When to Update Loop"},{"location":"build/updating/#step-1-install-macos-and-xcode-updates","text":"Verify macOS Between Loop app builds, there's a high likelihood that Apple has updated one or more of the systems involved in your Loop app. If you don't have the minimum macOS, you cannot build on that phone. (Note, the current macOS will build the Loop app for all these iOS versions.) For iOS 14.5 (not yet released), minimum is expected to be macOS 11.x (Big Sur) For iOS 14.x, minimum is macOS 10.15.4 (Catalina) For iOS 13.4 through 13.7, minimum is macOS 10.15.2 (Catalina) For iOS 13.0 through 13.2, minimum is macOS 10.14.4 (Mojave) For iOS 12.4, minimum is macOS 10.14.3 (Mojave) Verify Xcode Now that you have updated your macOS, you should have the ability to see the most recent version of Xcode. The information for which Xcode is required is found in Build Step 8 . (It's not repeated because that way we only have to update it on one page. In the time of rapid iOS changes, that's the best way to keep the information accurate.) If you see that you need to update (and you probably do), then keep following instruction on that page and the next one (Build Step 9) and then return to this page. Follow Build Step 9 after updating Xcode Make sure to restart your computer after updating Xcode and follow the instructions in Build Step 9. There's a known issue that happens often enough to be frustrating if you skip those steps. Either a build error about missing simulators or a \"device not connected\" (even when phone is connected). It's not always required...but this is a good easy ounce of problem prevention. If you think you are immune from needing to update and want to skip Step 1 on this page, at least review the compatibility chart in Build Step 8 to make sure your macOS and Xcode meet their minimums based on your device's iOS before proceeding. Many people try to build without meeting the minimum versions - don't be that person.","title":"Step 1: Install macOS and Xcode updates"},{"location":"build/updating/#step-2-check-your-developer-account","text":"Apple updates its License Agreement for the Developer Program frequently. You need to login to your developer account to manually check if there is a new agreeement to accept. If you see a big red or orange banner across the top of your Developer Account announcing a new license agreement like shown below...please read and accept it before building Loop.","title":"Step 2: Check your Developer Account"},{"location":"build/updating/#step-3-download-updated-loop-code","text":"After you've finished the updates to your devices listed above, you can move onto downloading updated Loop code. You will not be simply using your old downloaded Loop code (and in fact, you can delete those old folders now if you want). There is a fast and easy menu-driven script available to build Loop that works once you've updated your macOS and Xcode to versions compatible with your iPhone iOS. It works for both master and automatic-bolus branches. The Build Select Script webpage has instructions on how to use the script. That script allows you to perform the rest of the steps on this page with a menu-driven interface. Before you head over there, finish reading this page so you understand all the steps that are needed. The steps are explained again over there, but not in quite so much detail. If you prefer the zip download method, follow the links from Build Step 13 , then return to this page.","title":"Step 3: Download Updated Loop Code"},{"location":"build/updating/#step-4a-delete-old-provisioning-profiles","text":"","title":"Step 4a: Delete old provisioning profiles"},{"location":"build/updating/#infrequent-builder-app-expires-soon","text":"If your app will expire soon or you build infrequently, then Delete Profiles . Not sure when your app expires? Here are instructions to check your Loop Expiration Date .","title":"Infrequent Builder, App Expires soon"},{"location":"build/updating/#frequent-builder","text":"If you build frequently, you do not need to delete the profiles every time. One user reported deleting profiles gave a Revoke Certificate message - follow the link to see other reasons why that might happen.","title":"Frequent Builder"},{"location":"build/updating/#background-information","text":"Older versions of Xcode used to automatically create a new \"provisioning profile\" as part of the Loop building process. That provisioning profile, among other things, sets the expiration date for your app. If you sign with a paid team, that profile is set to expire in 12 months. If you sign with a free team, that profile is set to expire in 7 days. You can always check the expiration date immediately after a successful build of your loop app by clicking the little \"i\" icon next the \"Provisioning Profile\" line in the target signing area. Add 12 months to the \"created\" date (paid account), or 7 days (free account), and you'll have your app's date of future spontaneous death, which you can record in your calendar. Here's what started happening about September 2019 with Xcode 11, the provisioning profiles were being reused so the date was not updated each time you built. This change resulted in many people's apps expiring unexpectedly (and therefore dying suddenly) starting in September 2020 despite having updated/rebuilt recently and having current developer accounts (either manually renewed or automatically renewed, doesn't matter). Once you follow the steps in the orange box below, Xcode will have no memory of the old provisioning profiles and will be forced to create a brand new one with the next Loop build. Therefore, you'll get a brand spanking new \"created\" date that will match the build date. Simple and straight-forward. (Leave Terminal app open to do Step 4b afterwards too.)","title":"Background Information"},{"location":"build/updating/#delete-profiles","text":"How to delete old provisioning profiles Find your Terminal app (search in Applications) Open your Terminal app Copy and paste the line in the little grey box below into the Terminal prompt. Press enter after you paste it. rm ~/Library/MobileDevice/Provisioning\\ Profiles/*.mobileprovision You won't see anything special after you enter the command...your Terminal screen should look as boring as shown below when successful.","title":"Delete Profiles"},{"location":"build/updating/#revoke-certificate-issue","text":"What does it look like if you run into the Revoke Certificate message? When you prepare to Sign the Targets with Xcode, you'll see the message highlighted in the figure below. More information is shown in the orange box below. Revoke certificate The important part of this message is: \". . . signing certificate . . . private key is not installed in your keychain . . .\" WAIT - You might not need to revoke your certificate You might get this if you logged in as a different user, have a new computer or if your computer had to undergo a factory reset You can transfer your keychain to your new computer (or just revoke and keep going) To transfer your keychain, check this Apple Documentation Link Your version of Xcode is way out-of-date Mentors have seen this with people trying to build with Xcode 11.4 or earlier Update Xcode to the most recent version If you revoke and keep going: If you do hit Revoke Certificate, you'll be given a new one Even with the new certificate, your Apple Developer ID is not affected You can re-build on the existing Loop app on your device(s) and maintain all your settings with the new certificate. Be aware that you will have to rebuild to every device that used the certificate you just revoked and if you have other apps built with this certificate, they will stop working too.","title":"Revoke Certificate Issue"},{"location":"build/updating/#step-4b-clean-cache-and-derived-data","text":"This may not be necessary, but it is one of the first steps to try if you do get a build error. Since you already have Terminal app open, you can prevent one of the possible sources of build errors in advance by cleaning out straggler data from previous Loop builds. Clean cache and derived data Using Terminal app that should still be open from Step 4a Copy and paste this command and press return: rm -rf ~/Library/Caches/org.carthage.CarthageKit Note: you won't see any message back if the command runs successfully. Copy and paste this command and press return: rm -rf ~/Library/Developer/Xcode/DerivedData Note: you won't see any message back if the command runs successfully. You won't see anything special after you enter the commands...your Terminal screen should look as boring as it did in the previous step 4a.","title":"Step 4b: Clean cache and derived data"},{"location":"build/updating/#step-5-build-like-normal","text":"From here, go straight to Step 14 Build Loop app and do just like you did the first time. Open the new Loop code that you just downloaded a couple steps above, plug in the phone, select your phone, sign four targets, code customizations (if wanted), and then build button. Easy peasy. Double check expiration date If you want to make sure that step 4 above (deleting the provisioning profiles) went well, check the \"created\" date on your provisioning profile after you sign your Loop target for this rebuild. It should have the current date as the \"created\" date and your Loop app, if you successfully build, will function for 12 more months (for paid accounts) so long as you keep your developer account paid/automatically renewed. To find out expiration date later, use this procedure .","title":"Step 5: Build like normal"},{"location":"build/updating/#step-6-resolve-build-errors-if-needed","text":"Check Build Errors Page If you get a build error, check the Build Errors page . You might be able to resolve it yourself. Even if your exact error isn't there, the information you need to provide when asking for help is listed on that page. And that information is critical to allow mentors to help troubleshoot your build error.","title":"Step 6: Resolve Build Errors if needed"},{"location":"faqs/FAQs/","text":"General Loop FAQs \u2301 What is Loop? \u2301 Click on the image below to watch a short Introduction to Loop video . Old Video This video was created before the Omnipod version of Loop was released in April 2019 - so yes you can definitely use Omnipod Eros pumps The menus have been rearranged slightly but the overall concept of how to use Loop is demonstrated in this video The workout target shown in the video has been completely reworked as Overrides What do I need to Loop? \u2301 Loop has both hardware and software requirements. In general, to use Loop you need to have seven components. Compatible insulin pump: Medtronic or Omnipod Compatible CGM RileyLink Compatible Device Compatible iPhone/iPod Touch Apple computer, typically Catalina macOS or newer Xcode (a free Apple application) Apple Developer Membership Can I download Loop from the App store? \u2301 No. Loop is not available for download. You must build your own Loop app. Loop app will not be available in the Apple App store because that would be distribution of a medical device, and we are not in that \"business\". You can build yourself, but we are not distributors. Each step needed to successfully build your Loop app is found in these docs. The harder part will be having the patience to read all the documents before you start. New Loop users are so excited to get started that they skip reading all the great info that these docs contain. So, as you begin the build...please include time to read the documents that follow what happens after you successfully build your Loop app. If you have any questions, use the Search feature to find topics in LoopDocs. Can I use an android phone or iPad for Loop? \u2301 No, this is purely iPhone or iPod touch. The iPad does not support Apple Health which is required for Loop. Do I have to be \"tech-smart\" to build Loop? \u2301 No. You do not need any experience in code or computers to build Loop. If you have already owned an Apple computer and iPhone, you already have the required level of experience. Beyond that, simply read the directions slowly and diligently...all the information you will need are in these documents. Often times the non-tech people do better than the tech people in building Loop. Why? Because the non-tech people take the time to read slowly and look at the screenshots in the directions. The tech people often skim read and miss sentences...which then leads to build errors that have to be retraced and fixed. Is there a cheat sheet for a school nurse to use? \u2301 Sure, you can give this one a try. School nurse's cheat sheet download How long does it take to build Loop? \u2301 The answer is varied, but a few hours from start to finish, depending on where you are starting and how comfortable you are with your computer. If you'd rather break it up into several shorter bits of effort, the Build App section is divided into convenient stopping points with Time Estimates for each step. You can do one or more steps depending on what kind of time you have available. Does Loop cost money? \u2301 Yes, there are some costs, beyond the obvious costs of owning a pump and CGM. There are several options for the RileyLink Compatible Devices at this time. They typically cost around $150. This is a one-time cost and the devices should last for years (unless it goes swimming, goes through the wash, gets run over by a car, etc.). It's fine to buy one device and make sure you want to Loop, but if you can afford it, go on and get two or get two different kinds. Once you Loop, you'll want a backup. Because some of the newer versions have features some people prefer, you may find posts on The Looped Facebook Group offering to sell their RileyLink for a reduced cost. The Apple Developer License can be done for free, however, you will have to rebuild your Loop app every 7 days. That could get very tedious. The $99 annual Apple Developer program enrollment is an excellent investment. There are no other costs, ongoing or initial, to use Loop beyond what you already pay for your CGM, pump supplies and insulin. Do I need to own my own Apple computer? \u2301 You don't have to own your own Apple computer, but you do need to at least borrow one. It would be really good to have longer term ability to borrow that computer again for updating Loop later, when needed. If you are borrowing an Apple computer, look at the required minimum settings associated with your iPhone Compatible Computer and Xcode Version Can I use a PC or Windows computer to build? \u2301 Yes, you can...sort of. There is a hacked way of installing macOS on a Windows computer called \"Virtual Machine\". This link provides some helpful information. This Virtual Machine method will not work on PCs that have AMD processors either, so double check your computer before to confirm you don't have an AMD processor. If you want to try this, there are mentors on The Looped Facebook Group who can assist. How often do I need to get on the computer for Loop? \u2301 The short answer is (1) when you first build and (2) once per year minimum after that. (If you decide to use a free Apple Developer Account, you will need to get on the computer every 7 days.) The longer answer is that Loop code is updated periodically to include new features and bug fixes. When those updates are released, you'll need access to an Apple computer again to update your Loop app. Loop updates are not available through the iPhone's app store...instead you do the app update yourself with update instructions here . In general, probably a few times a year there are updates to Loop released that you'd want to take the time to install. Will I need to build a new Loop if I switch between Medtronic and Omnipod? \u2301 No. Loop will have the option to move between different pump types from within the same Loop app. You'll simply use the \"Switch from Omnipods\" or \"Delete Pump\" options to move to the other kind of pump. Can I use my Apple Developer account to build for others? \u2301 If there is more than one Looper in the family, you only need to have one Apple Developer ID and only one annual payment. The adult who builds can use their Apple Dev ID to put the app on the Looper's phone. The limit is 99 devices (phone and watch both count). Unless it's a very large family, you should have no problem supporting everyone in your family. Building Loop on the second phone is much faster than the first one. It's a good idea to let someone else in the family know how to build and have access to your Apple password in case you're out of town. It's also a good idea to build Loop on a backup phone especially for travel. The Apple Developer ID and the Apple ID are two different things. PLEASE read this: Loopers Need Their Own Apple ID . If you are helping a Looper in your local diabetes group get an update on their phone, make sure you can text each other. They need to realize the Loop app on the phone is different if the build uses a different Apple Developer ID from the one currently on their phone. So they will have to on-board the new app, enter all the settings again and delete the old app. Because of the limit on the number of devices per Developer ID, be sure to limit the number of people you help. Can I use someone else's Apple Developer account? \u2301 It's best that you build your own Loop app using your own Apple Developer ID. One developer account can only be \"linked\" to a limited number of devices. So one person \"loaning out\" their developer license to a lot of people will quickly exceed the number of allowed devices. In those cases, that person will be told they need to revoke the certificates on some devices (essentially dropping old ones to make room for new ones). If they revoke your device certificate (and they can do that without you knowing through their developer portal), your Loop app will immediately stop working and not even open. Your Loop app will also die immediately if their developer account is not renewed or expires. Moral of the story, out of all the ways to save money...borrowing someone's developer account is not a good place to save money. You don't want your Loop app to suddenly stop working. How can I find a compatible pump? supplies? \u2301 There is a whole page with detailed information about Medtronic pumps ; how to find them, how to find supplies, and assessing whether your Medtronic pump is compatible. Please check out that page for more info. You can also use Omnipod Eros (not Dash). You do not need the Omnipod Personal Diabetes Manager (PDM), just the pod supplies. Your insurance or pharmacy coverage may cover some of the cost. Can I pay someone else to do this? \u2301 NOOOO...you really need to figure this out yourself. This is an automated insulin delivery system and you really need to know how to build and operate this yourself. What if I lose my RileyLink Compatible Device? \u2301 For Medtronic users, you simply go back to old school pump use until you get a new RileyLink compatible device. You can either let your temp basal finish by itself (30 minutes or less) or cancel the temp basal on the pump's menu. For bolusing, you'd go back to using the pump's bolus commands. When you get a device (either finding your old one or getting your backup device out) and Loop running again, you'll want to do one thing. Enter in any carbs to Loop that you may have eaten in the recent past that could still be affecting blood glucose. While Loop will read whatever insulin deliveries had happened while the RileyLink compatible device was missing, it will not read any carbs you entered into the pump...so make sure to add those to Loop and backdate them to the time they were eaten. That will help make the transition smoother to Looping again. For Pod users, your Pod will finish any currently running temporary basal rate (maximum of 30 minutes) and then revert back to your scheduled basal rate. Without a RileyLink compatible device, you will be receiving normal basals, but will need to pull out pens/syringe for bolus. If you have a backup device, you can simply connect to the new device on the same Loop app and it will work with the existing pod session. If you don't have a backup device, you'll have to remove the pod and start a new pod paired with your PDM until you get a new device. What if I lose or get a new iPhone? \u2301 When you get a new iPhone, Loop will need to be built onto that new iPhone in the same way that you built on your old iPhone. Loop will not restore from any iCloud or iTunes backups, but all the settings are transferred from the backup, including the pod information if the backup is recent enough. So once the Loop app is built on the new phone, it should just keep going. Be prepared to start a new pod and enter all your settings if the transfer doesn't work. What about other pumps? When will they Loop? \u2301 Hey now...let's be grateful for what we have first. The ability to use Loop is the result of tremendous amounts of effort, time, and sacrifice by volunteers. Cracking the pumps for Loop use is a large undertaking. If and when another set of people spend a large amount of time figuring out other pumps, then they could conceivably be added to Loop. But, you don't need to let us know that you'd love to see more pumps compatible with Loop. So would we. There is just an awful lot of work that needs to happen and it is not easy nor quick. Tandem pumps are not Loop compatible. DASH pods are not Loop compatible. Newer Medtronic pumps are not Loop compatible. Can I have more than one Loop app on a phone? \u2301 Yes, technically possible. You can have multiple Loop apps built onto the same iPhone. However, having multiple Loop apps on a single phone may lead to unexpected conflicts that can negatively affect your Loop's ability to stay green (keep looping). Additionally, your Pod will only work on one Loop app at a time anyways. So for smooth looping, just keep one Loop app on any phone for looping use. Will I be able to Loop on a plane? Or in the mountains? \u2301 Yes. Loop does not require internet or cell coverage to work. So long as the Loop user has Bluetooth turned on on the iPhone (or iPod touch), then the Dexcom and RileyLink will still be able to do their work with Loop and your pump/Pod.","title":"General Loop FAQs"},{"location":"faqs/FAQs/#general-loop-faqs","text":"","title":"General Loop FAQs"},{"location":"faqs/FAQs/#what-is-loop","text":"Click on the image below to watch a short Introduction to Loop video . Old Video This video was created before the Omnipod version of Loop was released in April 2019 - so yes you can definitely use Omnipod Eros pumps The menus have been rearranged slightly but the overall concept of how to use Loop is demonstrated in this video The workout target shown in the video has been completely reworked as Overrides","title":"What is Loop?"},{"location":"faqs/FAQs/#what-do-i-need-to-loop","text":"Loop has both hardware and software requirements. In general, to use Loop you need to have seven components. Compatible insulin pump: Medtronic or Omnipod Compatible CGM RileyLink Compatible Device Compatible iPhone/iPod Touch Apple computer, typically Catalina macOS or newer Xcode (a free Apple application) Apple Developer Membership","title":"What do I need to Loop?"},{"location":"faqs/FAQs/#can-i-download-loop-from-the-app-store","text":"No. Loop is not available for download. You must build your own Loop app. Loop app will not be available in the Apple App store because that would be distribution of a medical device, and we are not in that \"business\". You can build yourself, but we are not distributors. Each step needed to successfully build your Loop app is found in these docs. The harder part will be having the patience to read all the documents before you start. New Loop users are so excited to get started that they skip reading all the great info that these docs contain. So, as you begin the build...please include time to read the documents that follow what happens after you successfully build your Loop app. If you have any questions, use the Search feature to find topics in LoopDocs.","title":"Can I download Loop from the App store?"},{"location":"faqs/FAQs/#can-i-use-an-android-phone-or-ipad-for-loop","text":"No, this is purely iPhone or iPod touch. The iPad does not support Apple Health which is required for Loop.","title":"Can I use an android phone or iPad for Loop?"},{"location":"faqs/FAQs/#do-i-have-to-be-tech-smart-to-build-loop","text":"No. You do not need any experience in code or computers to build Loop. If you have already owned an Apple computer and iPhone, you already have the required level of experience. Beyond that, simply read the directions slowly and diligently...all the information you will need are in these documents. Often times the non-tech people do better than the tech people in building Loop. Why? Because the non-tech people take the time to read slowly and look at the screenshots in the directions. The tech people often skim read and miss sentences...which then leads to build errors that have to be retraced and fixed.","title":"Do I have to be \"tech-smart\" to build Loop?"},{"location":"faqs/FAQs/#is-there-a-cheat-sheet-for-a-school-nurse-to-use","text":"Sure, you can give this one a try. School nurse's cheat sheet download","title":"Is there a cheat sheet for a school nurse to use?"},{"location":"faqs/FAQs/#how-long-does-it-take-to-build-loop","text":"The answer is varied, but a few hours from start to finish, depending on where you are starting and how comfortable you are with your computer. If you'd rather break it up into several shorter bits of effort, the Build App section is divided into convenient stopping points with Time Estimates for each step. You can do one or more steps depending on what kind of time you have available.","title":"How long does it take to build Loop?"},{"location":"faqs/FAQs/#does-loop-cost-money","text":"Yes, there are some costs, beyond the obvious costs of owning a pump and CGM. There are several options for the RileyLink Compatible Devices at this time. They typically cost around $150. This is a one-time cost and the devices should last for years (unless it goes swimming, goes through the wash, gets run over by a car, etc.). It's fine to buy one device and make sure you want to Loop, but if you can afford it, go on and get two or get two different kinds. Once you Loop, you'll want a backup. Because some of the newer versions have features some people prefer, you may find posts on The Looped Facebook Group offering to sell their RileyLink for a reduced cost. The Apple Developer License can be done for free, however, you will have to rebuild your Loop app every 7 days. That could get very tedious. The $99 annual Apple Developer program enrollment is an excellent investment. There are no other costs, ongoing or initial, to use Loop beyond what you already pay for your CGM, pump supplies and insulin.","title":"Does Loop cost money?"},{"location":"faqs/FAQs/#do-i-need-to-own-my-own-apple-computer","text":"You don't have to own your own Apple computer, but you do need to at least borrow one. It would be really good to have longer term ability to borrow that computer again for updating Loop later, when needed. If you are borrowing an Apple computer, look at the required minimum settings associated with your iPhone Compatible Computer and Xcode Version","title":"Do I need to own my own Apple computer?"},{"location":"faqs/FAQs/#can-i-use-a-pc-or-windows-computer-to-build","text":"Yes, you can...sort of. There is a hacked way of installing macOS on a Windows computer called \"Virtual Machine\". This link provides some helpful information. This Virtual Machine method will not work on PCs that have AMD processors either, so double check your computer before to confirm you don't have an AMD processor. If you want to try this, there are mentors on The Looped Facebook Group who can assist.","title":"Can I use a PC or Windows computer to build?"},{"location":"faqs/FAQs/#how-often-do-i-need-to-get-on-the-computer-for-loop","text":"The short answer is (1) when you first build and (2) once per year minimum after that. (If you decide to use a free Apple Developer Account, you will need to get on the computer every 7 days.) The longer answer is that Loop code is updated periodically to include new features and bug fixes. When those updates are released, you'll need access to an Apple computer again to update your Loop app. Loop updates are not available through the iPhone's app store...instead you do the app update yourself with update instructions here . In general, probably a few times a year there are updates to Loop released that you'd want to take the time to install.","title":"How often do I need to get on the computer for Loop?"},{"location":"faqs/FAQs/#will-i-need-to-build-a-new-loop-if-i-switch-between-medtronic-and-omnipod","text":"No. Loop will have the option to move between different pump types from within the same Loop app. You'll simply use the \"Switch from Omnipods\" or \"Delete Pump\" options to move to the other kind of pump.","title":"Will I need to build a new Loop if I switch between Medtronic and Omnipod?"},{"location":"faqs/FAQs/#can-i-use-my-apple-developer-account-to-build-for-others","text":"If there is more than one Looper in the family, you only need to have one Apple Developer ID and only one annual payment. The adult who builds can use their Apple Dev ID to put the app on the Looper's phone. The limit is 99 devices (phone and watch both count). Unless it's a very large family, you should have no problem supporting everyone in your family. Building Loop on the second phone is much faster than the first one. It's a good idea to let someone else in the family know how to build and have access to your Apple password in case you're out of town. It's also a good idea to build Loop on a backup phone especially for travel. The Apple Developer ID and the Apple ID are two different things. PLEASE read this: Loopers Need Their Own Apple ID . If you are helping a Looper in your local diabetes group get an update on their phone, make sure you can text each other. They need to realize the Loop app on the phone is different if the build uses a different Apple Developer ID from the one currently on their phone. So they will have to on-board the new app, enter all the settings again and delete the old app. Because of the limit on the number of devices per Developer ID, be sure to limit the number of people you help.","title":"Can I use my Apple Developer account to build for others?"},{"location":"faqs/FAQs/#can-i-use-someone-elses-apple-developer-account","text":"It's best that you build your own Loop app using your own Apple Developer ID. One developer account can only be \"linked\" to a limited number of devices. So one person \"loaning out\" their developer license to a lot of people will quickly exceed the number of allowed devices. In those cases, that person will be told they need to revoke the certificates on some devices (essentially dropping old ones to make room for new ones). If they revoke your device certificate (and they can do that without you knowing through their developer portal), your Loop app will immediately stop working and not even open. Your Loop app will also die immediately if their developer account is not renewed or expires. Moral of the story, out of all the ways to save money...borrowing someone's developer account is not a good place to save money. You don't want your Loop app to suddenly stop working.","title":"Can I use someone else's Apple Developer account?"},{"location":"faqs/FAQs/#how-can-i-find-a-compatible-pump-supplies","text":"There is a whole page with detailed information about Medtronic pumps ; how to find them, how to find supplies, and assessing whether your Medtronic pump is compatible. Please check out that page for more info. You can also use Omnipod Eros (not Dash). You do not need the Omnipod Personal Diabetes Manager (PDM), just the pod supplies. Your insurance or pharmacy coverage may cover some of the cost.","title":"How can I find a compatible pump? supplies?"},{"location":"faqs/FAQs/#can-i-pay-someone-else-to-do-this","text":"NOOOO...you really need to figure this out yourself. This is an automated insulin delivery system and you really need to know how to build and operate this yourself.","title":"Can I pay someone else to do this?"},{"location":"faqs/FAQs/#what-if-i-lose-my-rileylink-compatible-device","text":"For Medtronic users, you simply go back to old school pump use until you get a new RileyLink compatible device. You can either let your temp basal finish by itself (30 minutes or less) or cancel the temp basal on the pump's menu. For bolusing, you'd go back to using the pump's bolus commands. When you get a device (either finding your old one or getting your backup device out) and Loop running again, you'll want to do one thing. Enter in any carbs to Loop that you may have eaten in the recent past that could still be affecting blood glucose. While Loop will read whatever insulin deliveries had happened while the RileyLink compatible device was missing, it will not read any carbs you entered into the pump...so make sure to add those to Loop and backdate them to the time they were eaten. That will help make the transition smoother to Looping again. For Pod users, your Pod will finish any currently running temporary basal rate (maximum of 30 minutes) and then revert back to your scheduled basal rate. Without a RileyLink compatible device, you will be receiving normal basals, but will need to pull out pens/syringe for bolus. If you have a backup device, you can simply connect to the new device on the same Loop app and it will work with the existing pod session. If you don't have a backup device, you'll have to remove the pod and start a new pod paired with your PDM until you get a new device.","title":"What if I lose my RileyLink Compatible Device?"},{"location":"faqs/FAQs/#what-if-i-lose-or-get-a-new-iphone","text":"When you get a new iPhone, Loop will need to be built onto that new iPhone in the same way that you built on your old iPhone. Loop will not restore from any iCloud or iTunes backups, but all the settings are transferred from the backup, including the pod information if the backup is recent enough. So once the Loop app is built on the new phone, it should just keep going. Be prepared to start a new pod and enter all your settings if the transfer doesn't work.","title":"What if I lose or get a new iPhone?"},{"location":"faqs/FAQs/#what-about-other-pumps-when-will-they-loop","text":"Hey now...let's be grateful for what we have first. The ability to use Loop is the result of tremendous amounts of effort, time, and sacrifice by volunteers. Cracking the pumps for Loop use is a large undertaking. If and when another set of people spend a large amount of time figuring out other pumps, then they could conceivably be added to Loop. But, you don't need to let us know that you'd love to see more pumps compatible with Loop. So would we. There is just an awful lot of work that needs to happen and it is not easy nor quick. Tandem pumps are not Loop compatible. DASH pods are not Loop compatible. Newer Medtronic pumps are not Loop compatible.","title":"What about other pumps? When will they Loop?"},{"location":"faqs/FAQs/#can-i-have-more-than-one-loop-app-on-a-phone","text":"Yes, technically possible. You can have multiple Loop apps built onto the same iPhone. However, having multiple Loop apps on a single phone may lead to unexpected conflicts that can negatively affect your Loop's ability to stay green (keep looping). Additionally, your Pod will only work on one Loop app at a time anyways. So for smooth looping, just keep one Loop app on any phone for looping use.","title":"Can I have more than one Loop app on a phone?"},{"location":"faqs/FAQs/#will-i-be-able-to-loop-on-a-plane-or-in-the-mountains","text":"Yes. Loop does not require internet or cell coverage to work. So long as the Loop user has Bluetooth turned on on the iPhone (or iPod touch), then the Dexcom and RileyLink will still be able to do their work with Loop and your pump/Pod.","title":"Will I be able to Loop on a plane? Or in the mountains?"},{"location":"faqs/algorithm-faqs/","text":"Algorithm FAQs \u2301 Does Loop \"learn\" or detect changes in your insulin needs? \u2301 No. Loop assumes the settings you've provided are correct. If outside factors (such as hormones, illness, exercise, medications, etc) affect your underlying settings that determine insulin needs (basals, insulin sensitivity factor, carb ratio) you may need to manually adjust your settings. Loop will not \"learn\" or \"assume\" that your underlying needs have changed. Instead, Loop is designed to react to the changes in blood glucose and its insulin dosing decisions are based on the settings that you have entered in the app. There is a short-term retrospective analysis built into Loop which will apply a weighted-correction based on the past 60 minutes of blood glucose changes. While this does help some, larger-scale \"learning\" is not currently a part of Loop's algorithm. Perhaps in subsequent versions of Loop, auto-adjustment of settings or machine learning could be incorporated. Until then, you will need to tell Loop if your underlying settings need updating or make temporary adjustments for short term issues. To understand why your settings matter, check out Looptips.org . What does negative Active Insulin mean? \u2301 When Loop withholds or suspends some of your expected basal insulin, that starts an accumulation of insulin deficit. Similar to if you have a kinked cannula and insulin is not delivered, you'd call yourself \"lacking insulin\". That is the same concept of having negative active insulin (aka negative insulin on board). When you have negative insulin on board, it is a sign that Loop has been actively helping you prevent a low blood sugar. If you find significant negative insulin on board regularly, you probably need to adjust/test your settings .","title":"Algorithm FAQs"},{"location":"faqs/algorithm-faqs/#algorithm-faqs","text":"","title":"Algorithm FAQs"},{"location":"faqs/algorithm-faqs/#does-loop-learn-or-detect-changes-in-your-insulin-needs","text":"No. Loop assumes the settings you've provided are correct. If outside factors (such as hormones, illness, exercise, medications, etc) affect your underlying settings that determine insulin needs (basals, insulin sensitivity factor, carb ratio) you may need to manually adjust your settings. Loop will not \"learn\" or \"assume\" that your underlying needs have changed. Instead, Loop is designed to react to the changes in blood glucose and its insulin dosing decisions are based on the settings that you have entered in the app. There is a short-term retrospective analysis built into Loop which will apply a weighted-correction based on the past 60 minutes of blood glucose changes. While this does help some, larger-scale \"learning\" is not currently a part of Loop's algorithm. Perhaps in subsequent versions of Loop, auto-adjustment of settings or machine learning could be incorporated. Until then, you will need to tell Loop if your underlying settings need updating or make temporary adjustments for short term issues. To understand why your settings matter, check out Looptips.org .","title":"Does Loop \"learn\" or detect changes in your insulin needs?"},{"location":"faqs/algorithm-faqs/#what-does-negative-active-insulin-mean","text":"When Loop withholds or suspends some of your expected basal insulin, that starts an accumulation of insulin deficit. Similar to if you have a kinked cannula and insulin is not delivered, you'd call yourself \"lacking insulin\". That is the same concept of having negative active insulin (aka negative insulin on board). When you have negative insulin on board, it is a sign that Loop has been actively helping you prevent a low blood sugar. If you find significant negative insulin on board regularly, you probably need to adjust/test your settings .","title":"What does negative Active Insulin mean?"},{"location":"faqs/branch-faqs/","text":"Branch FAQs \u2301 This page is mostly suited to people who have built the app once already and then are coming back to update. In the course of updating, you may be wondering about the different branches, what the differences are, and such...so let's try to answer some of those questions as best we can. What are branches? \u2301 Yes, there are a lot of \"branches\" in Loop talk but the concept is simple. I'll use an analogy to help. Basically, they are all slightly different versions of Loop...kind of like different edits of the same book. To really understand what branches are, we should probably explain a little more about Loop's code and how development works. You can watch of video explanation of this process here . Loop developers own an account in GitHub called LoopKit . Within that account, the developers have several \"repositories\" that support Loop in particular. A repository is like a book...let's think of it like a cookbook for now. Within the LoopKit account, there are repositories for Loop itself, LoopDocs, and various other supporting \"frameworks\" that are helper repositories for Loop to build correctly. For example, Loop's repo has a lot of the info about the app itself; the outward facing things that you interact with. How information is put to you and taken in from you...that's in Loop repository code. But, there's more than just a user interface for Loop. Loop has to do a lot of complex work like Bluetooth communications, algorithm math, pump communications, etc. The Loop app has help from frameworks to do those other parts. CGMBLEkit for some of the transmitter parts of Loop, RileyLink_ios for the pump managers (talking to the pumps and decoding their information), LoopKit for the algorithm about carbs and insulin curves, etc. When you build Loop, in the background, Loop pulls those other frameworks (7 in total) into the build process using \"Carthage\". Carthage is like a personal shopper. You give it a shopping list (the cartfile in Loop code is that shopping list) and it goes and fetches that for you during the build process. Sometimes your computer has an old shopping list...and that can cause build errors. Hence the \"carthage update\" fix in the Build Errors page...that command updates the shopping list to get the right versions of those frameworks. Anyways...so now you know about the general structure of Loop and LoopKit in Github. Now we can discuss Loop itself a little deeper. So let's imagine Loop as a cookbook. The developers are the authors/chefs of the recipes (code) in the cookbook. The authors spend countless hours testing new recipes, taste testing, documenting improvements. They send the drafts to the editor, who makes suggestions and eventually the cookbook is finalized. There are no grammar issues, no typos, the photos are beautiful and the recipes are yummy. They publish the book and you see a gorgeous final product on the shelves. That is called a \"release\" and it is the master branch. This book has been well-tested and is super stable. Every time you cook with those recipes, you know exactly what you're getting and lots of people have had a chance before you to make sure that it all tastes good. Master branch is stable and tested. But then...the chefs/developers go on a trip. They are inspired by new cuisine and want to add new recipes to the old cookbook. (Things like omnipod support and overrides are new \"recipes\" that were developed since the last master release, for example.) But, the process for developing a recipe is arduous. Lots of trial and error involved. Lots of tweaking ingredients (code). The editors try out the new recipes and offer feedback (similar to the Issues List in GitHub ). While the recipes are being developed, they have a version of the old cookbook that gets marked up...edited in pencil a lot. Scribbles and notes in the side. Revisions happen frequently, because that's what testing new recipes is all about. These marked-up versions of the cookbook are called \"dev\" branch. Short for \"development\" branch. Like the name sounds...this is where new developments are happening, new recipes and tweaks. After much testing and tweaking, eventually the recipes get the flavors right (bugs in code are squashed) and enough people have provided feedback and careful observations of results...that the book goes to the publishing house for the next printing. The cookbook is republished with an updated edition number and new recipes are highlighted. When this happens in Loop, Loop's master branch is updated with the new features coming from dev (aka, \"dev branch is merged into master branch\"). When that happens, master branch gets another \"release\" version (you can see release history here ) and for that one day...dev and master are exactly the same. They stay the same until the Loop developers start working on the next batch of improvements, could be the next hour even or days later, but the process begins again. The developers will start editing the code again and dropping those edits in dev branch for further development. What happened to Omnipod-testing branch? \u2301 Omnipod Loop development testing (not talking about the actual hacking work that preceded that) was done by a smaller group of people privately for months and months before public release of the omnipod-testing branch. This smaller group of people (several dozen) were actively watching their Omnipod Loops and capturing bug reports. There was a lot of work put in by the testers and Pete Schwamb (Loop Developer) to get the code fairly stable and reliable. When the code got to a stable, reliable state and was ready for a larger audience, omnipod-testing branch was made available as a \"public testing\" branch. This branch was pretty well-tested prior to public release, but not necessarily going to be perfect for everyone right away. There were expectations that some user-interface requests might be asked for after having a wider audience of users. Also, omnipod-testing branch was not going to undergo a lot of active revisions to it when it was released. The intent was to keep it as a fairly known, unchanged product for people rather than a constantly changing code set...that way if people noted a bug, it would be a more \"known\" code base to work to debug. Omnipod-testing branch has served its purpose as an initial platform to test Pod looping. It has been officially retired now and is no longer needed. Omnipod support has been folded into the normal master and dev branches now. Thank you, omnipod-testing branch...you served us well. Happy retirement. Loop v2.0 \u2301 On December 31, 2019, Loop released Loop v2.0 (also said as \"Loop updated Master branch\"). This means that the cookbook from dev branch (to use our earlier analogy) was merged into master. On December 31st, master and dev branches were identical. From that date forward though, dev branch will start to work on its new recipes again. Dev branch will start to diverge from master branch with untested changes and development of new code. Dev branch may start to have some bugs and regressions as a result of the coming/going of code changes that will happen without much announcement or discussion. So, most all users should now start building with master branch again...you will be getting the latest Loop release everytime you build with Loop master branch. That branch will stay in the same stable condition it has been for awhile now. Only use dev branch if you are interested in actively testing new code and have the ability to track/document bugs. What's new in Loop v2.0? \u2301 This is definitely a popular question and comes in a few forms... What's new in Loop v2.0? What is the difference between Loop v2.0 and dev branch? Should I update if I use dev branch now? The question about what differences someone will notice between their existing Loop app and the new release...well I can only answer that if I knew which version/branch you are currently using (AND what date you built on if you are using dev branch). Because dev branch changes so often, the version someone is using from October 2019 won't necessarily be the same as the version someone built in November 2019. So, I'll make a highlights reel compared to the last release and you can check it over to see if any of these seem \"new\" to you based on the version of Loop you have been using. They are listed roughly in reverse order of when they were merged into dev, so the higher up on the list, the greater the chance is that you haven't seen the feature yet. Uploading of BGs to Nightscout \u2301 Loop v2.0 has an option to upload your BG data to Nightscout directly. It is a new slider under the CGM configuration section for Dexcom users. After you add your CGM transmitter ID, go back into the CGM info and you'll see a new slider called \"Upload Readings.\" Technically, Loop's dev branch had that feature for a hot minute before Loop v2.0 was released...but for almost everyone this will be a brand new feature they haven't had before. This feature can help if/when Dexcom's Share servers ever go through another large outage like we had before. If that happens, you can turn on the \"Upload Readings\" switch and your CGM data will now be in Nightscout even without Share servers working properly. Good practice would be to temporarily disable your Share bridge in Nightscout while Loop is responsible for CGM uploading so that you don't get duplicate data. You can disable Share bridge by logging into your Heroku account, going to the Settings tab, clicking on \"reveal config vars\" and then deleting the word \"bridge\" from the ENABLE line. A fix for settings loss \u2301 iOS 13 brought about a quirky little bug where you could suddenly lose settings in Loop. But, it wasn't just limited to Loop, sometimes people lost Dexcom app settings too. The issue is most common when the phone goes through a power cycle, but it has happened at other times, too. There's a fix for that new bug in Loop now...so that's a good reason to update. (If you encounter that bug before you have a chance to update your Loop app, simply restart the Loop app and your settings should reappear.) Spin for Watch Bolus \u2301 To prevent an accidental bolus from your Watch app, don't let your kids hold your watch. Just kidding, we've added an even better option. There is a new \"spin\" to confirm the bolus after you press the bolus button. You'll see a graphic like below on the watch face. As you spin the digital crown, the two triangles will begin to merge. Once they merge, the bolus is confirmed through a little haptic and a white checkmark will appear on the watch screen. Watch recommended bolus \u2301 A common code customization is also now no longer needed. Many people used to edit Loop code to have the Watch app provide 100% of the recommended bolus as the auto-filled quantity in the bolus field (default used to be 75%). Loop now offers the 100% auto-filled recommendation, no code customization needed now. Recent carbs list on Watch \u2301 You can review the recent carb entries on your Apple Watch now. Simply swipe left to see the blood glucose graph screen on your watch. Scroll down with the digital crown to the \"active carbs\" row beneath the graph, and tap that row. You can see the list of recent carb entries. Fix for Medtronic x15 \"bolus may have failed\" message \u2301 A lot of Medtronic x15 users received \"bolus may have failed\" messages after each bolus. That issue has been fixed and a patched version of Loop is no longer needed. All good! Confirmation beeps expanded \u2301 Confirmation beeps have been expanded based on user feedback...we heard parents and school nurses really appreciate hearing a beep for not just boluses, but also for suspend/resume commands and editing basal schedule (so you are sure it saved properly). So, confirmation beeps are now for boluses, suspend/resume, and basal schedule edit saves. Read Pod Status added \u2301 There's a new command in the RileyLink menu for \"Read Pod Status\" that is analogous to the existing command for Medtronic users. You can query your Pod for its current status info using that command. Bug fixes generally \u2301 There are a lot of niggly little bug fixes too which were merged in the last couple weeks. The temp basal timestamp for Medtronic Loop (and for older Omnipod Loops, too) had a bug that when Loop reverted to scheduled basals, the timestamp on the HUD's temp basal icon would switch back to the time the Loop was launched (instead of the time the scheduled basal was started again). There are also some new code improvements for handling uncerain boluses for Pod Also, there are improvements to handle how Loop marks Pod suspend commands that are initiated by users while an active temp basal is in progress. User interface improvements \u2301 You'll notice dashed lines in the HUD for the CGM value if the CGM data goes older than 15 min (that way you don't accidentally miss the fact that your CGM has failed). The API Secret is hidden after it is saved in Loop Settings now, and if you accidentally leave a trailing slash on the Nightscout URL...Loop will ignore it. The bolus progress row is new to master branch now, although many of you have been accustomed to that visual in dev branch for awhile now. The \"Scenarios\" screen that would sometimes appear when a phone was shaken is also disabled by default now. The Issue Report has more information about your Loop app's build date and version so that you can more easily track its build history. Common build error squashed \u2301 One common build error was caused if there was a space in the Loop folder name after downloading. This problem has been fixed and you will no longer get build errors if you have a space in your Loop folder name. Ahhhhh! I love it!!! Nightscout profile uploading \u2301 Loop will upload your basal schedule, ISFs, carb ratios, and override presets from Loop settings to your Nightscout profile. If you ever lose your phone and need to setup Loop brand new...your settings will be easy to find in Nightscout now. New languages \u2301 Japanese, Danish, Swedish, Vietnamese, Finnish, Portuguese (Brazilian), Polish, and Romanian languages were added to the regional translations for Loop. There are definitely some missing strings that will still need touchups...we will get those fixed up in Loop v2.1 if you all help report those when you see them . Thanks!! Non-linear carb model \u2301 All branches (master and dev) now use a \"non-linear\" carb model, so let's give some info about the change. Previously, the carb model Loop used had a linear absorption predicted with dynamic carbs adjustments. What this means is that food absorption was modeled as a flat, even effect (like the straight grey graph that you'll see in the Insulin Counteraction Effects chart after you added a carb entry. But looking at large groups of meals' datasets (and supported by personal, anecdotal experiences), food really has a bit more of a non-linear absorption. Meaning, we usually see more of a food impact up-front than the old carb model in Loop predicted. What did that mismatch mean for us if the model predicts a linear absorption, but the meal actually behaves differently? Bolusing: You've probably seen smaller upfront boluses for meals than you would have preferred. This is because the insulin was predicted to over-power the linear (slower) carb model soon after a bolus is given. Early low temp basals: You've also probably seen a tendency to have early zero basal or low basals set by Loop for the first 30-60 minutes after a meal bolus if you don't have a significant blood glucose spike immediately after the carb entry. This might have been even more obvious for those of you who are regularly waiting to eat after a bolus, too. With a non-linear absorption model, the carb absorption will more closely match observed blood glucose impacts we've seen after meals. And when the model is more closely matching actual experience, that means the predicted blood glucose curves will do a better job at providing more upfront bolus and not having the tendency to have overly conservative temp basals soon after a meal. What should you expect? Like the description above, you'll likely see more complete bolus recommendations and less low temping after a bolus. With that in mind, if you've made adjustments to your Loop habits or settings to overcome those issues previously, you may want to undo those habits. Like if you shortened carb absorption times to help get larger boluses upfront, you may want to go back to standard times. Keep an eye on things and you should adjust as needed. What if you want to go back to the old model? You will have to edit a line in LoopKit's LoopKit code here to use .linear if you wanted to go back to the old carb model. If you want to read more about the model, please check out the Zulipchat thread here . But realize that the code edit for changing models would be easiest done using a LoopWorkspace because the edit is in one of the frameworks that Loop uses (rather than Loop code itself), so this is one of those instances where you will have to do some work to learn how to use a LoopWorkspace properly. Overrides \u2301 Loop v2.0 marks the first time Loop master branch has overrides included. Additionally, this release moves overrides setup from the configurations area of Loop settings to the workout icon in the Loop toolbar. There has also been bug squashing in dev branch for overrides over the recent past, so updating is a good idea even if you already have overrides on your current build. Want to learn more about overrides? Read about them here . Retrospective Correction always on \u2301 Retrospective correction used to be an optional toggle in the algorithm. It is now on by default all the time. It is an important part of the algorithm (helps Loop look at how good/bad its recent prediction curve has been vs reality), and leaving it on made sense anyways. Omnipod support \u2301 Yes, most of you are already using Omnipod with your Loop...but this is the first time that Loop master branch supports Omnipod users. Please update if you have been using Omnipod-testing branch especially...it's time to get all the bug fixes that we've done in Loop. Dark mode support \u2301 iOS 13 brought dark mode for application developers, and Loop's developer was all over that. We now have a wickedly cool dark mode Loop for those who prefer the dark side. ISF and correction range guardrails and UI change \u2301 Loop v2.0 also brings about the first time master branch has the useful scroll wheel to set values of ISF and correction range. This helps mitigate an old bug where backwards entered correction range values would crash Loop app. Also less prone to fat-finger mistakes on entry. Simulator pump and CGM \u2301 If you don't have compatible gear yet and just want to test Loop app, the new ability to add a simulated pump and/or CGM is a great new feature. New style of Dexcom transmitters supported \u2301 Dexcom launched a new style of transmitters this summer. The new transmitters took some work by Loop developer (PETE! YEAH!) to get them working in offline Looping, but the fix was pushed into all branches shortly thereafter in August 2019. If you haven't updated your Loop since August 2019 and use a Dexcom G6, you should update now. How can I stay current with what's going on in the branches? \u2301 Like we said earlier, master branch won't really be changing much. You don't really need to watch that one for changes. But, dev branch is a constantly shifting, moving place. If you choose to come into a dev branch build...you need to be aware that is what dev does...moves, shakes, changes, and will update code frequently and unannounced in the traditional sense that most users in Looped group or Instagram would see. Developers are not helped by people being in a dev branch if those users are mistakenly thinking of it as a stable master branch with lots of detailed docs to go with it. People should only use a dev branch build if they EDUCATE themselves on the expectations and how to properly manage dev information and updates. People using dev branch should also have regular access to a computer to be able to rebuild quickly if a new bug/fix is identified. If you choose to use a dev build, you can stay abreast of developments in a number of ways...but they will all require you to do some legwork and keep yourself informed. This is not a situation where you should expect a fancy Loopdocs page updated regularly with current \"dev updates\"...that's just not the way dev branch works. Watch the Loop Repo and Issues list \u2301 First, subscribe to the Loop repo's Issues list by \"watching\" the Loop repo . You can choose to watch the repo so that you get emails when new Issues are reported. This is a good way to find out if there's other people reporting odd behavior that you are wondering about. If you use dev and wonder about something you are seeing in Loop, you can check Issues list to see if others are noticing the same. If so, you can help by capturing information and reporting it. Not super helpful to just say \"yeah, me too...\" but better if you can attach screenshots, Issue Reports from Loop settings, and a thorough description of the problem you are seeing. Be a part of the solution by thoughtfully providing information to help debug. Subscribe to the Zulipchat channels \u2301 Second, use Zulipchat forums for Loop. This forum has several \"streams\" of conversations depending on interest. I highly recommend following the #github channel if you are wanting to watch for code changes. Code changes are called \"commits\" in GitHub. The #github channel will have an automated post whenever a new commit is made and it will give a brief line description of the commit. You can also go directly to the commit history for each of the branches if you'd like. Loop master branch commit history Loop dev branch commit history If you click on the commit, you can see exactly what changes to the code were made. It's an interesting learning experience. In red are the code that is old, in green is the updated code. The line numbers and file names of the edited code are also there to help. I don't expect many of you would understand exactly what the edits mean, or how the new code might function...but I bring up the topic of commit history so that you can use that to realize just how often dev is updated. Go ahead and look at the number and frequency of commits in that dev branch...that is why there is no way someone is going to keep a \"loopdocs\" of dev changes. It's just too much a moving target. Keep checking Looped group \u2301 Third, keep watching Looped group. Major concerns/issues are brought up there...so no harm in scrolling through and seeing what's going on there. LoopDashboard.org \u2301 You can always check out the LoopDashboard which summarize all the github activities in Loops 7 different repositories for dev and master branches. Here you can always see the latest \"news\" and the history of Loop. On the first page of loopdashboard you can see all the activities in one list, but you can also go to other pages and see more details about commits, issues and pull requests. There are also stats about who is doing the pull requests and commits. The dashboard is updated every 12 hours. Become familiar with your data sources \u2301 Another useful thing if you'll be on dev branches undergoing a lot of active change...know how Loop works and where to look for additional information about what you are seeing. For example, if you see an IOB value that looks odd, you should know to look at the insulin deliveries are stored in Health app. Knowing to pull an Issue Report when you see a problem so you can provide that if asked. Knowing how to capture debugging logs if the developers ask for that kind of info is also a good skill. What is expected in the future? \u2301 Roughly speaking...right now (December 31st): Master: we know that there will need to be cleanup of the new translations. There were lots of new phrases and development with a lot of new languages, as well. Master (and dev) branch will be updated with fixes for the translations. When those translation fixes are done, there will be a Loop v2.1 released. Dev: Dev branch's future development is best tracked by watching and reviewing pull requests in GitHub . This is the list where code changes are initially proposed and discussed.","title":"Branch FAQs"},{"location":"faqs/branch-faqs/#branch-faqs","text":"This page is mostly suited to people who have built the app once already and then are coming back to update. In the course of updating, you may be wondering about the different branches, what the differences are, and such...so let's try to answer some of those questions as best we can.","title":"Branch FAQs"},{"location":"faqs/branch-faqs/#what-are-branches","text":"Yes, there are a lot of \"branches\" in Loop talk but the concept is simple. I'll use an analogy to help. Basically, they are all slightly different versions of Loop...kind of like different edits of the same book. To really understand what branches are, we should probably explain a little more about Loop's code and how development works. You can watch of video explanation of this process here . Loop developers own an account in GitHub called LoopKit . Within that account, the developers have several \"repositories\" that support Loop in particular. A repository is like a book...let's think of it like a cookbook for now. Within the LoopKit account, there are repositories for Loop itself, LoopDocs, and various other supporting \"frameworks\" that are helper repositories for Loop to build correctly. For example, Loop's repo has a lot of the info about the app itself; the outward facing things that you interact with. How information is put to you and taken in from you...that's in Loop repository code. But, there's more than just a user interface for Loop. Loop has to do a lot of complex work like Bluetooth communications, algorithm math, pump communications, etc. The Loop app has help from frameworks to do those other parts. CGMBLEkit for some of the transmitter parts of Loop, RileyLink_ios for the pump managers (talking to the pumps and decoding their information), LoopKit for the algorithm about carbs and insulin curves, etc. When you build Loop, in the background, Loop pulls those other frameworks (7 in total) into the build process using \"Carthage\". Carthage is like a personal shopper. You give it a shopping list (the cartfile in Loop code is that shopping list) and it goes and fetches that for you during the build process. Sometimes your computer has an old shopping list...and that can cause build errors. Hence the \"carthage update\" fix in the Build Errors page...that command updates the shopping list to get the right versions of those frameworks. Anyways...so now you know about the general structure of Loop and LoopKit in Github. Now we can discuss Loop itself a little deeper. So let's imagine Loop as a cookbook. The developers are the authors/chefs of the recipes (code) in the cookbook. The authors spend countless hours testing new recipes, taste testing, documenting improvements. They send the drafts to the editor, who makes suggestions and eventually the cookbook is finalized. There are no grammar issues, no typos, the photos are beautiful and the recipes are yummy. They publish the book and you see a gorgeous final product on the shelves. That is called a \"release\" and it is the master branch. This book has been well-tested and is super stable. Every time you cook with those recipes, you know exactly what you're getting and lots of people have had a chance before you to make sure that it all tastes good. Master branch is stable and tested. But then...the chefs/developers go on a trip. They are inspired by new cuisine and want to add new recipes to the old cookbook. (Things like omnipod support and overrides are new \"recipes\" that were developed since the last master release, for example.) But, the process for developing a recipe is arduous. Lots of trial and error involved. Lots of tweaking ingredients (code). The editors try out the new recipes and offer feedback (similar to the Issues List in GitHub ). While the recipes are being developed, they have a version of the old cookbook that gets marked up...edited in pencil a lot. Scribbles and notes in the side. Revisions happen frequently, because that's what testing new recipes is all about. These marked-up versions of the cookbook are called \"dev\" branch. Short for \"development\" branch. Like the name sounds...this is where new developments are happening, new recipes and tweaks. After much testing and tweaking, eventually the recipes get the flavors right (bugs in code are squashed) and enough people have provided feedback and careful observations of results...that the book goes to the publishing house for the next printing. The cookbook is republished with an updated edition number and new recipes are highlighted. When this happens in Loop, Loop's master branch is updated with the new features coming from dev (aka, \"dev branch is merged into master branch\"). When that happens, master branch gets another \"release\" version (you can see release history here ) and for that one day...dev and master are exactly the same. They stay the same until the Loop developers start working on the next batch of improvements, could be the next hour even or days later, but the process begins again. The developers will start editing the code again and dropping those edits in dev branch for further development.","title":"What are branches?"},{"location":"faqs/branch-faqs/#what-happened-to-omnipod-testing-branch","text":"Omnipod Loop development testing (not talking about the actual hacking work that preceded that) was done by a smaller group of people privately for months and months before public release of the omnipod-testing branch. This smaller group of people (several dozen) were actively watching their Omnipod Loops and capturing bug reports. There was a lot of work put in by the testers and Pete Schwamb (Loop Developer) to get the code fairly stable and reliable. When the code got to a stable, reliable state and was ready for a larger audience, omnipod-testing branch was made available as a \"public testing\" branch. This branch was pretty well-tested prior to public release, but not necessarily going to be perfect for everyone right away. There were expectations that some user-interface requests might be asked for after having a wider audience of users. Also, omnipod-testing branch was not going to undergo a lot of active revisions to it when it was released. The intent was to keep it as a fairly known, unchanged product for people rather than a constantly changing code set...that way if people noted a bug, it would be a more \"known\" code base to work to debug. Omnipod-testing branch has served its purpose as an initial platform to test Pod looping. It has been officially retired now and is no longer needed. Omnipod support has been folded into the normal master and dev branches now. Thank you, omnipod-testing branch...you served us well. Happy retirement.","title":"What happened to Omnipod-testing branch?"},{"location":"faqs/branch-faqs/#loop-v20","text":"On December 31, 2019, Loop released Loop v2.0 (also said as \"Loop updated Master branch\"). This means that the cookbook from dev branch (to use our earlier analogy) was merged into master. On December 31st, master and dev branches were identical. From that date forward though, dev branch will start to work on its new recipes again. Dev branch will start to diverge from master branch with untested changes and development of new code. Dev branch may start to have some bugs and regressions as a result of the coming/going of code changes that will happen without much announcement or discussion. So, most all users should now start building with master branch again...you will be getting the latest Loop release everytime you build with Loop master branch. That branch will stay in the same stable condition it has been for awhile now. Only use dev branch if you are interested in actively testing new code and have the ability to track/document bugs.","title":"Loop v2.0"},{"location":"faqs/branch-faqs/#whats-new-in-loop-v20","text":"This is definitely a popular question and comes in a few forms... What's new in Loop v2.0? What is the difference between Loop v2.0 and dev branch? Should I update if I use dev branch now? The question about what differences someone will notice between their existing Loop app and the new release...well I can only answer that if I knew which version/branch you are currently using (AND what date you built on if you are using dev branch). Because dev branch changes so often, the version someone is using from October 2019 won't necessarily be the same as the version someone built in November 2019. So, I'll make a highlights reel compared to the last release and you can check it over to see if any of these seem \"new\" to you based on the version of Loop you have been using. They are listed roughly in reverse order of when they were merged into dev, so the higher up on the list, the greater the chance is that you haven't seen the feature yet.","title":"What's new in Loop v2.0?"},{"location":"faqs/branch-faqs/#uploading-of-bgs-to-nightscout","text":"Loop v2.0 has an option to upload your BG data to Nightscout directly. It is a new slider under the CGM configuration section for Dexcom users. After you add your CGM transmitter ID, go back into the CGM info and you'll see a new slider called \"Upload Readings.\" Technically, Loop's dev branch had that feature for a hot minute before Loop v2.0 was released...but for almost everyone this will be a brand new feature they haven't had before. This feature can help if/when Dexcom's Share servers ever go through another large outage like we had before. If that happens, you can turn on the \"Upload Readings\" switch and your CGM data will now be in Nightscout even without Share servers working properly. Good practice would be to temporarily disable your Share bridge in Nightscout while Loop is responsible for CGM uploading so that you don't get duplicate data. You can disable Share bridge by logging into your Heroku account, going to the Settings tab, clicking on \"reveal config vars\" and then deleting the word \"bridge\" from the ENABLE line.","title":"Uploading of BGs to Nightscout"},{"location":"faqs/branch-faqs/#a-fix-for-settings-loss","text":"iOS 13 brought about a quirky little bug where you could suddenly lose settings in Loop. But, it wasn't just limited to Loop, sometimes people lost Dexcom app settings too. The issue is most common when the phone goes through a power cycle, but it has happened at other times, too. There's a fix for that new bug in Loop now...so that's a good reason to update. (If you encounter that bug before you have a chance to update your Loop app, simply restart the Loop app and your settings should reappear.)","title":"A fix for settings loss"},{"location":"faqs/branch-faqs/#spin-for-watch-bolus","text":"To prevent an accidental bolus from your Watch app, don't let your kids hold your watch. Just kidding, we've added an even better option. There is a new \"spin\" to confirm the bolus after you press the bolus button. You'll see a graphic like below on the watch face. As you spin the digital crown, the two triangles will begin to merge. Once they merge, the bolus is confirmed through a little haptic and a white checkmark will appear on the watch screen.","title":"Spin for Watch Bolus"},{"location":"faqs/branch-faqs/#watch-recommended-bolus","text":"A common code customization is also now no longer needed. Many people used to edit Loop code to have the Watch app provide 100% of the recommended bolus as the auto-filled quantity in the bolus field (default used to be 75%). Loop now offers the 100% auto-filled recommendation, no code customization needed now.","title":"Watch recommended bolus"},{"location":"faqs/branch-faqs/#recent-carbs-list-on-watch","text":"You can review the recent carb entries on your Apple Watch now. Simply swipe left to see the blood glucose graph screen on your watch. Scroll down with the digital crown to the \"active carbs\" row beneath the graph, and tap that row. You can see the list of recent carb entries.","title":"Recent carbs list on Watch"},{"location":"faqs/branch-faqs/#fix-for-medtronic-x15-bolus-may-have-failed-message","text":"A lot of Medtronic x15 users received \"bolus may have failed\" messages after each bolus. That issue has been fixed and a patched version of Loop is no longer needed. All good!","title":"Fix for Medtronic x15 \"bolus may have failed\" message"},{"location":"faqs/branch-faqs/#confirmation-beeps-expanded","text":"Confirmation beeps have been expanded based on user feedback...we heard parents and school nurses really appreciate hearing a beep for not just boluses, but also for suspend/resume commands and editing basal schedule (so you are sure it saved properly). So, confirmation beeps are now for boluses, suspend/resume, and basal schedule edit saves.","title":"Confirmation beeps expanded"},{"location":"faqs/branch-faqs/#read-pod-status-added","text":"There's a new command in the RileyLink menu for \"Read Pod Status\" that is analogous to the existing command for Medtronic users. You can query your Pod for its current status info using that command.","title":"Read Pod Status added"},{"location":"faqs/branch-faqs/#bug-fixes-generally","text":"There are a lot of niggly little bug fixes too which were merged in the last couple weeks. The temp basal timestamp for Medtronic Loop (and for older Omnipod Loops, too) had a bug that when Loop reverted to scheduled basals, the timestamp on the HUD's temp basal icon would switch back to the time the Loop was launched (instead of the time the scheduled basal was started again). There are also some new code improvements for handling uncerain boluses for Pod Also, there are improvements to handle how Loop marks Pod suspend commands that are initiated by users while an active temp basal is in progress.","title":"Bug fixes generally"},{"location":"faqs/branch-faqs/#user-interface-improvements","text":"You'll notice dashed lines in the HUD for the CGM value if the CGM data goes older than 15 min (that way you don't accidentally miss the fact that your CGM has failed). The API Secret is hidden after it is saved in Loop Settings now, and if you accidentally leave a trailing slash on the Nightscout URL...Loop will ignore it. The bolus progress row is new to master branch now, although many of you have been accustomed to that visual in dev branch for awhile now. The \"Scenarios\" screen that would sometimes appear when a phone was shaken is also disabled by default now. The Issue Report has more information about your Loop app's build date and version so that you can more easily track its build history.","title":"User interface improvements"},{"location":"faqs/branch-faqs/#common-build-error-squashed","text":"One common build error was caused if there was a space in the Loop folder name after downloading. This problem has been fixed and you will no longer get build errors if you have a space in your Loop folder name. Ahhhhh! I love it!!!","title":"Common build error squashed"},{"location":"faqs/branch-faqs/#nightscout-profile-uploading","text":"Loop will upload your basal schedule, ISFs, carb ratios, and override presets from Loop settings to your Nightscout profile. If you ever lose your phone and need to setup Loop brand new...your settings will be easy to find in Nightscout now.","title":"Nightscout profile uploading"},{"location":"faqs/branch-faqs/#new-languages","text":"Japanese, Danish, Swedish, Vietnamese, Finnish, Portuguese (Brazilian), Polish, and Romanian languages were added to the regional translations for Loop. There are definitely some missing strings that will still need touchups...we will get those fixed up in Loop v2.1 if you all help report those when you see them . Thanks!!","title":"New languages"},{"location":"faqs/branch-faqs/#non-linear-carb-model","text":"All branches (master and dev) now use a \"non-linear\" carb model, so let's give some info about the change. Previously, the carb model Loop used had a linear absorption predicted with dynamic carbs adjustments. What this means is that food absorption was modeled as a flat, even effect (like the straight grey graph that you'll see in the Insulin Counteraction Effects chart after you added a carb entry. But looking at large groups of meals' datasets (and supported by personal, anecdotal experiences), food really has a bit more of a non-linear absorption. Meaning, we usually see more of a food impact up-front than the old carb model in Loop predicted. What did that mismatch mean for us if the model predicts a linear absorption, but the meal actually behaves differently? Bolusing: You've probably seen smaller upfront boluses for meals than you would have preferred. This is because the insulin was predicted to over-power the linear (slower) carb model soon after a bolus is given. Early low temp basals: You've also probably seen a tendency to have early zero basal or low basals set by Loop for the first 30-60 minutes after a meal bolus if you don't have a significant blood glucose spike immediately after the carb entry. This might have been even more obvious for those of you who are regularly waiting to eat after a bolus, too. With a non-linear absorption model, the carb absorption will more closely match observed blood glucose impacts we've seen after meals. And when the model is more closely matching actual experience, that means the predicted blood glucose curves will do a better job at providing more upfront bolus and not having the tendency to have overly conservative temp basals soon after a meal. What should you expect? Like the description above, you'll likely see more complete bolus recommendations and less low temping after a bolus. With that in mind, if you've made adjustments to your Loop habits or settings to overcome those issues previously, you may want to undo those habits. Like if you shortened carb absorption times to help get larger boluses upfront, you may want to go back to standard times. Keep an eye on things and you should adjust as needed. What if you want to go back to the old model? You will have to edit a line in LoopKit's LoopKit code here to use .linear if you wanted to go back to the old carb model. If you want to read more about the model, please check out the Zulipchat thread here . But realize that the code edit for changing models would be easiest done using a LoopWorkspace because the edit is in one of the frameworks that Loop uses (rather than Loop code itself), so this is one of those instances where you will have to do some work to learn how to use a LoopWorkspace properly.","title":"Non-linear carb model"},{"location":"faqs/branch-faqs/#overrides","text":"Loop v2.0 marks the first time Loop master branch has overrides included. Additionally, this release moves overrides setup from the configurations area of Loop settings to the workout icon in the Loop toolbar. There has also been bug squashing in dev branch for overrides over the recent past, so updating is a good idea even if you already have overrides on your current build. Want to learn more about overrides? Read about them here .","title":"Overrides"},{"location":"faqs/branch-faqs/#retrospective-correction-always-on","text":"Retrospective correction used to be an optional toggle in the algorithm. It is now on by default all the time. It is an important part of the algorithm (helps Loop look at how good/bad its recent prediction curve has been vs reality), and leaving it on made sense anyways.","title":"Retrospective Correction always on"},{"location":"faqs/branch-faqs/#omnipod-support","text":"Yes, most of you are already using Omnipod with your Loop...but this is the first time that Loop master branch supports Omnipod users. Please update if you have been using Omnipod-testing branch especially...it's time to get all the bug fixes that we've done in Loop.","title":"Omnipod support"},{"location":"faqs/branch-faqs/#dark-mode-support","text":"iOS 13 brought dark mode for application developers, and Loop's developer was all over that. We now have a wickedly cool dark mode Loop for those who prefer the dark side.","title":"Dark mode support"},{"location":"faqs/branch-faqs/#isf-and-correction-range-guardrails-and-ui-change","text":"Loop v2.0 also brings about the first time master branch has the useful scroll wheel to set values of ISF and correction range. This helps mitigate an old bug where backwards entered correction range values would crash Loop app. Also less prone to fat-finger mistakes on entry.","title":"ISF and correction range guardrails and UI change"},{"location":"faqs/branch-faqs/#simulator-pump-and-cgm","text":"If you don't have compatible gear yet and just want to test Loop app, the new ability to add a simulated pump and/or CGM is a great new feature.","title":"Simulator pump and CGM"},{"location":"faqs/branch-faqs/#new-style-of-dexcom-transmitters-supported","text":"Dexcom launched a new style of transmitters this summer. The new transmitters took some work by Loop developer (PETE! YEAH!) to get them working in offline Looping, but the fix was pushed into all branches shortly thereafter in August 2019. If you haven't updated your Loop since August 2019 and use a Dexcom G6, you should update now.","title":"New style of Dexcom transmitters supported"},{"location":"faqs/branch-faqs/#how-can-i-stay-current-with-whats-going-on-in-the-branches","text":"Like we said earlier, master branch won't really be changing much. You don't really need to watch that one for changes. But, dev branch is a constantly shifting, moving place. If you choose to come into a dev branch build...you need to be aware that is what dev does...moves, shakes, changes, and will update code frequently and unannounced in the traditional sense that most users in Looped group or Instagram would see. Developers are not helped by people being in a dev branch if those users are mistakenly thinking of it as a stable master branch with lots of detailed docs to go with it. People should only use a dev branch build if they EDUCATE themselves on the expectations and how to properly manage dev information and updates. People using dev branch should also have regular access to a computer to be able to rebuild quickly if a new bug/fix is identified. If you choose to use a dev build, you can stay abreast of developments in a number of ways...but they will all require you to do some legwork and keep yourself informed. This is not a situation where you should expect a fancy Loopdocs page updated regularly with current \"dev updates\"...that's just not the way dev branch works.","title":"How can I stay current with what's going on in the branches?"},{"location":"faqs/branch-faqs/#watch-the-loop-repo-and-issues-list","text":"First, subscribe to the Loop repo's Issues list by \"watching\" the Loop repo . You can choose to watch the repo so that you get emails when new Issues are reported. This is a good way to find out if there's other people reporting odd behavior that you are wondering about. If you use dev and wonder about something you are seeing in Loop, you can check Issues list to see if others are noticing the same. If so, you can help by capturing information and reporting it. Not super helpful to just say \"yeah, me too...\" but better if you can attach screenshots, Issue Reports from Loop settings, and a thorough description of the problem you are seeing. Be a part of the solution by thoughtfully providing information to help debug.","title":"Watch the Loop Repo and Issues list"},{"location":"faqs/branch-faqs/#subscribe-to-the-zulipchat-channels","text":"Second, use Zulipchat forums for Loop. This forum has several \"streams\" of conversations depending on interest. I highly recommend following the #github channel if you are wanting to watch for code changes. Code changes are called \"commits\" in GitHub. The #github channel will have an automated post whenever a new commit is made and it will give a brief line description of the commit. You can also go directly to the commit history for each of the branches if you'd like. Loop master branch commit history Loop dev branch commit history If you click on the commit, you can see exactly what changes to the code were made. It's an interesting learning experience. In red are the code that is old, in green is the updated code. The line numbers and file names of the edited code are also there to help. I don't expect many of you would understand exactly what the edits mean, or how the new code might function...but I bring up the topic of commit history so that you can use that to realize just how often dev is updated. Go ahead and look at the number and frequency of commits in that dev branch...that is why there is no way someone is going to keep a \"loopdocs\" of dev changes. It's just too much a moving target.","title":"Subscribe to the Zulipchat channels"},{"location":"faqs/branch-faqs/#keep-checking-looped-group","text":"Third, keep watching Looped group. Major concerns/issues are brought up there...so no harm in scrolling through and seeing what's going on there.","title":"Keep checking Looped group"},{"location":"faqs/branch-faqs/#loopdashboardorg","text":"You can always check out the LoopDashboard which summarize all the github activities in Loops 7 different repositories for dev and master branches. Here you can always see the latest \"news\" and the history of Loop. On the first page of loopdashboard you can see all the activities in one list, but you can also go to other pages and see more details about commits, issues and pull requests. There are also stats about who is doing the pull requests and commits. The dashboard is updated every 12 hours.","title":"LoopDashboard.org"},{"location":"faqs/branch-faqs/#become-familiar-with-your-data-sources","text":"Another useful thing if you'll be on dev branches undergoing a lot of active change...know how Loop works and where to look for additional information about what you are seeing. For example, if you see an IOB value that looks odd, you should know to look at the insulin deliveries are stored in Health app. Knowing to pull an Issue Report when you see a problem so you can provide that if asked. Knowing how to capture debugging logs if the developers ask for that kind of info is also a good skill.","title":"Become familiar with your data sources"},{"location":"faqs/branch-faqs/#what-is-expected-in-the-future","text":"Roughly speaking...right now (December 31st): Master: we know that there will need to be cleanup of the new translations. There were lots of new phrases and development with a lot of new languages, as well. Master (and dev) branch will be updated with fixes for the translations. When those translation fixes are done, there will be a Loop v2.1 released. Dev: Dev branch's future development is best tracked by watching and reviewing pull requests in GitHub . This is the list where code changes are initially proposed and discussed.","title":"What is expected in the future?"},{"location":"faqs/cgm-faqs/","text":"CGM FAQs \u2301 What CGMs does Loop work with? \u2301 Loop works Dexcom G4 with share, G5, G6, Share and the Medtronic CGM systems compatible with Looping pumps. Read the details here . Do I need wait for a new sensor session to start Loop? \u2301 No, you can start Looping mid-sensor session. There's no need to do anything special with regards to your CGM session when starting or ending Loop use. What do I do when sensor is in warm-up? \u2301 While the CGM is in warm-up, Loop will return to your scheduled basal delivery (within 30 min or less). You won't get temp basal adjustments during the warm-up period. If you need to bolus during this time, you will need to do a finger check and enter the blood glucose value into Apple Health app manually if you'd like Loop to offer a bolus recommendation. Loop will read that value from the Health app to provide you a bolus recommendation. If you are really ambitious, some people do frequent (15 min or so) finger checks and enter those into Health during warmup. This could allow Loop to do a bit of looping during warmup, albeit on blood glucose values that are spread pretty far apart compared to normal. What do I do when I switch transmitters? \u2301 When you change transmitters, you will need to update the transmitter ID in your Loop settings. This is pretty simple task. When you change transmitters, select the Delete CGM button at the very bottom of the CGM info page in Loop. Then you will select your Dexcom system again and add the new transmitter ID. You cannot just tap on your old transmitter ID to update it. If you don't update your transmitter ID when you change active transmitters, your Loop will be forced to go to your Dexcom Share server to get your CGM data and will not work without cell or wifi connection. When Loop is using data from Dexcom Share servers, a small cloud will appear above the BG reading in Loop and should tip you off that maybe you forgot to update your transmitter ID. Can I use Libre sensors with a reader like Miao Miao? \u2301 If you want to use a Libre sensor you will need to modify Loop to accomplish that use. Loop code does not natively support that sensor, nor readers. Can I use Eversense? \u2301 Nope. Eversense does not write to Apple Health nor has the BT communications protocol been reverse engineered the way it has been done with Dexcom. Can Loop read CGM data from Nightscout? \u2301 Loop does not read CGM data from Nightscout. You would need to use a solution such as NightscoutShareServer and make changes to Loop code in order to do that. Please search the Looped group on Facebook for posts regarding that option, as it is not a part of standard Loop use and is a community-based modification. You will need to do your homework and research to make that happen. At this time, there is not an active version of a modified Loop that appears to support this option easily. Can Spike or Xdrip be used with Loop? \u2301 Spike and Xdrip are not supported by Loop. You will need to implement community-based modifications to Loop in order to use those apps with Loop. Helpful tip: Use spike loop as a search term in Looped group for additional info about community-modified Loop versions for Spike. Links to those modified Loop versions are not provided in these LoopDocs because we (the LoopDocs maintainers and Loop developers) do not actively watch those versions to ensure they are up-to-date.","title":"CGM FAQs"},{"location":"faqs/cgm-faqs/#cgm-faqs","text":"","title":"CGM FAQs"},{"location":"faqs/cgm-faqs/#what-cgms-does-loop-work-with","text":"Loop works Dexcom G4 with share, G5, G6, Share and the Medtronic CGM systems compatible with Looping pumps. Read the details here .","title":"What CGMs does Loop work with?"},{"location":"faqs/cgm-faqs/#do-i-need-wait-for-a-new-sensor-session-to-start-loop","text":"No, you can start Looping mid-sensor session. There's no need to do anything special with regards to your CGM session when starting or ending Loop use.","title":"Do I need wait for a new sensor session to start Loop?"},{"location":"faqs/cgm-faqs/#what-do-i-do-when-sensor-is-in-warm-up","text":"While the CGM is in warm-up, Loop will return to your scheduled basal delivery (within 30 min or less). You won't get temp basal adjustments during the warm-up period. If you need to bolus during this time, you will need to do a finger check and enter the blood glucose value into Apple Health app manually if you'd like Loop to offer a bolus recommendation. Loop will read that value from the Health app to provide you a bolus recommendation. If you are really ambitious, some people do frequent (15 min or so) finger checks and enter those into Health during warmup. This could allow Loop to do a bit of looping during warmup, albeit on blood glucose values that are spread pretty far apart compared to normal.","title":"What do I do when sensor is in warm-up?"},{"location":"faqs/cgm-faqs/#what-do-i-do-when-i-switch-transmitters","text":"When you change transmitters, you will need to update the transmitter ID in your Loop settings. This is pretty simple task. When you change transmitters, select the Delete CGM button at the very bottom of the CGM info page in Loop. Then you will select your Dexcom system again and add the new transmitter ID. You cannot just tap on your old transmitter ID to update it. If you don't update your transmitter ID when you change active transmitters, your Loop will be forced to go to your Dexcom Share server to get your CGM data and will not work without cell or wifi connection. When Loop is using data from Dexcom Share servers, a small cloud will appear above the BG reading in Loop and should tip you off that maybe you forgot to update your transmitter ID.","title":"What do I do when I switch transmitters?"},{"location":"faqs/cgm-faqs/#can-i-use-libre-sensors-with-a-reader-like-miao-miao","text":"If you want to use a Libre sensor you will need to modify Loop to accomplish that use. Loop code does not natively support that sensor, nor readers.","title":"Can I use Libre sensors with a reader like Miao Miao?"},{"location":"faqs/cgm-faqs/#can-i-use-eversense","text":"Nope. Eversense does not write to Apple Health nor has the BT communications protocol been reverse engineered the way it has been done with Dexcom.","title":"Can I use Eversense?"},{"location":"faqs/cgm-faqs/#can-loop-read-cgm-data-from-nightscout","text":"Loop does not read CGM data from Nightscout. You would need to use a solution such as NightscoutShareServer and make changes to Loop code in order to do that. Please search the Looped group on Facebook for posts regarding that option, as it is not a part of standard Loop use and is a community-based modification. You will need to do your homework and research to make that happen. At this time, there is not an active version of a modified Loop that appears to support this option easily.","title":"Can Loop read CGM data from Nightscout?"},{"location":"faqs/cgm-faqs/#can-spike-or-xdrip-be-used-with-loop","text":"Spike and Xdrip are not supported by Loop. You will need to implement community-based modifications to Loop in order to use those apps with Loop. Helpful tip: Use spike loop as a search term in Looped group for additional info about community-modified Loop versions for Spike. Links to those modified Loop versions are not provided in these LoopDocs because we (the LoopDocs maintainers and Loop developers) do not actively watch those versions to ensure they are up-to-date.","title":"Can Spike or Xdrip be used with Loop?"},{"location":"faqs/docs-faqs/","text":"Using This Site FAQs \u2301 This website is a guide on how to build, set up and use your Loop app. It is totally understandable to be intimidated and worried by the thought of building your own app, that this will be too technical. Please realize that once you have your hardware, building the app requires reading, copying a few lines and clicking a few buttons. A quick overview of LoopDocs contents is shown below. If you are new to Loop or trying to figure out if you want to Loop, please start at the Overview of LoopDocs and read sequentially. Overview of LoopDocs Introduction to Loop How to Use LoopDocs Loop Community Detailed Build Directions ] After you build, Set up App And a lot of useful information on operating Loop including adjusting settings This looks so hard. I don't know if I can do it! \u2301 Building the Loop app is straightforward. There are a lot of steps because they are laid out into short segments so that you can take breaks if you want. If you are not a Mac user, the hardest thing may be learning the menu items and short cuts that are different on the Mac than on a PC. Each step is designed to end at a natural stopping or resting point, in case you get interrupted or want to take a break. Some of the steps only take 5 minutes to finish...so don't be intimidated by the number of steps. The steps are listed in the order that you'd do each task. So start at step 1 and proceed forward. Each step ends with a \"next step\" link or hit the n key to move to the next page. You choose whether to keep going onto the next step or take a break and come back later. What if I get stuck? \u2301 If you get stuck, there are several things that can help: Scroll back up in the directions and see if you maybe missed a step accidentally. Might even be that you missed a paragraph. Check and compare your screen's display with what the screenshots are highlighting. Does your screen seem similar? Or does yours have an error message? If you have an error message, see if it helps guide you to the problem. If you just get stumped, post in Looped Group (Facebook) or Zulipchat and ask for help. Lots of people standing by to help each other. If you have a screenshot of where you are stuck and what part of the directions you are on, that will help a lot. Note the word screenshot - please use your computer or phone to take a screenshot. Photos of screens are typically out of focus and not high enough resolution. Search for \"How to take a screenshot\" in your favorite search engine. So, I build the app and then I'm done? \u2301 Nope...we wouldn't just leave you dangling like that. There's also an important walk-thru for how to set up your app for the first time. The new displays and settings are all explained in the \"Set up App\" section of this website. Check it out and follow along with each page step-by-step, just like you did for building. This way you'll learn valuable tips along the way too. Do similar for the \"Operate\" section of these docs...those are very helpful for understanding how you will use the app to enter meals, edit entries, bolus, etc.","title":"Using This Site FAQs"},{"location":"faqs/docs-faqs/#using-this-site-faqs","text":"This website is a guide on how to build, set up and use your Loop app. It is totally understandable to be intimidated and worried by the thought of building your own app, that this will be too technical. Please realize that once you have your hardware, building the app requires reading, copying a few lines and clicking a few buttons. A quick overview of LoopDocs contents is shown below. If you are new to Loop or trying to figure out if you want to Loop, please start at the Overview of LoopDocs and read sequentially. Overview of LoopDocs Introduction to Loop How to Use LoopDocs Loop Community Detailed Build Directions ] After you build, Set up App And a lot of useful information on operating Loop including adjusting settings","title":"Using This Site FAQs"},{"location":"faqs/docs-faqs/#this-looks-so-hard-i-dont-know-if-i-can-do-it","text":"Building the Loop app is straightforward. There are a lot of steps because they are laid out into short segments so that you can take breaks if you want. If you are not a Mac user, the hardest thing may be learning the menu items and short cuts that are different on the Mac than on a PC. Each step is designed to end at a natural stopping or resting point, in case you get interrupted or want to take a break. Some of the steps only take 5 minutes to finish...so don't be intimidated by the number of steps. The steps are listed in the order that you'd do each task. So start at step 1 and proceed forward. Each step ends with a \"next step\" link or hit the n key to move to the next page. You choose whether to keep going onto the next step or take a break and come back later.","title":"This looks so hard. I don't know if I can do it!"},{"location":"faqs/docs-faqs/#what-if-i-get-stuck","text":"If you get stuck, there are several things that can help: Scroll back up in the directions and see if you maybe missed a step accidentally. Might even be that you missed a paragraph. Check and compare your screen's display with what the screenshots are highlighting. Does your screen seem similar? Or does yours have an error message? If you have an error message, see if it helps guide you to the problem. If you just get stumped, post in Looped Group (Facebook) or Zulipchat and ask for help. Lots of people standing by to help each other. If you have a screenshot of where you are stuck and what part of the directions you are on, that will help a lot. Note the word screenshot - please use your computer or phone to take a screenshot. Photos of screens are typically out of focus and not high enough resolution. Search for \"How to take a screenshot\" in your favorite search engine.","title":"What if I get stuck?"},{"location":"faqs/docs-faqs/#so-i-build-the-app-and-then-im-done","text":"Nope...we wouldn't just leave you dangling like that. There's also an important walk-thru for how to set up your app for the first time. The new displays and settings are all explained in the \"Set up App\" section of this website. Check it out and follow along with each page step-by-step, just like you did for building. This way you'll learn valuable tips along the way too. Do similar for the \"Operate\" section of these docs...those are very helpful for understanding how you will use the app to enter meals, edit entries, bolus, etc.","title":"So, I build the app and then I'm done?"},{"location":"faqs/ios13/","text":"iOS 13 FAQs \u2301 Every time a new iOS release comes out...there's loads of questions and a flurry of activity. To help answer these questions, this page will be here short term to help answer these FAQs. Should I update to iOS 13? \u2301 That is a question that you should answer separate from Loop considerations. New iOS releases often have bugs in them, so I tend to avoid updating my daughter's phone for a bit. Instead, I update my phone and test things out first. Dexcom's app could have problems even...who knows. But, I certainly want to get a chance to kick-the-tires (or watch other people kick tires) for a bit before I try new iOS releases. Once I see things are ok and working without major issues, then I'll update her phone's iOS. Plus, going backwards once you've updated is a pain and usually not possible shortly after the new version is released. Also, I don't update iOS until I've had time to update my macOS and Xcode as well. Once you update iOS, you'll likely have to do matching updates to other Apple software for Loop building...so you might as well make sure you successfully update the other pieces so that everything is squared away. Will my Loop keep working if I don't update to iOS 13? \u2301 Yes. Your Loop app will work for one year after you built it (or until the developer team's enrollment/signing certificate expires, whichever comes first). So, if you don't update iOS...no big deal for your Loop app. Will my Loop keep working if I update to iOS 13? \u2301 Yes. We have not had one iOS update that has broken Loop apps already installed on the phone. I think we started Loop on iOS 9? Loop has worked through all the updates. Do I have to update my Loop if I change to iOS 13? \u2301 No. You don't have to. Is there a benefit to updating my Loop if I use iOS 13? \u2301 Nope. Unless you want to try dark mode which is in dev branch and being developed there...that's about the only thing that is iOS 13 specific in Loop. Why is iOS update a big deal then? \u2301 Because iOS major releases (like going from iOS 12 to 13...where the whole number changes) involve updates to several major other Apple-related things. It's a cascade effect. If you update iOS with a major release, then Xcode will need to update, too. Because Xcode will need the new command tools, Swift language updates, and simulators to be able to properly build for devices that have the new iOS. And then the cascade continues...that new Xcode will likely require a macOS update. And sometimes (as happened when Xcode 10 was released), the required update to macOS was also a major update (High Sierra to Mojave) that some computers couldn't do. They were \"unsupported\" by Apple and were aged-out. Luckily, the update to Xcode 11 does not involve aging out any computers this time. If you were running Xcode 10 already, you'll be able to update to Xcode 11 without fear that you'll be left out based on macOS age. So, iOS updates are a big deal (for Loopers) because they involve needing to do some updates to be able to properly build Loop again the next time you want to. And people forget about updates. And then they forget about LoopDocs' page specifically to help with Updating your Loop app. And so they just blindly download and build like they did last time...unaware there were needed updates. It's not so much about Loop when you update iOS...the issue is about what other things you need to update BEFORE you build Loop again and AFTER you update iOS.","title":"iOS 13 FAQs"},{"location":"faqs/ios13/#ios-13-faqs","text":"Every time a new iOS release comes out...there's loads of questions and a flurry of activity. To help answer these questions, this page will be here short term to help answer these FAQs.","title":"iOS 13 FAQs"},{"location":"faqs/ios13/#should-i-update-to-ios-13","text":"That is a question that you should answer separate from Loop considerations. New iOS releases often have bugs in them, so I tend to avoid updating my daughter's phone for a bit. Instead, I update my phone and test things out first. Dexcom's app could have problems even...who knows. But, I certainly want to get a chance to kick-the-tires (or watch other people kick tires) for a bit before I try new iOS releases. Once I see things are ok and working without major issues, then I'll update her phone's iOS. Plus, going backwards once you've updated is a pain and usually not possible shortly after the new version is released. Also, I don't update iOS until I've had time to update my macOS and Xcode as well. Once you update iOS, you'll likely have to do matching updates to other Apple software for Loop building...so you might as well make sure you successfully update the other pieces so that everything is squared away.","title":"Should I update to iOS 13?"},{"location":"faqs/ios13/#will-my-loop-keep-working-if-i-dont-update-to-ios-13","text":"Yes. Your Loop app will work for one year after you built it (or until the developer team's enrollment/signing certificate expires, whichever comes first). So, if you don't update iOS...no big deal for your Loop app.","title":"Will my Loop keep working if I don't update to iOS 13?"},{"location":"faqs/ios13/#will-my-loop-keep-working-if-i-update-to-ios-13","text":"Yes. We have not had one iOS update that has broken Loop apps already installed on the phone. I think we started Loop on iOS 9? Loop has worked through all the updates.","title":"Will my Loop keep working if I update to iOS 13?"},{"location":"faqs/ios13/#do-i-have-to-update-my-loop-if-i-change-to-ios-13","text":"No. You don't have to.","title":"Do I have to update my Loop if I change to iOS 13?"},{"location":"faqs/ios13/#is-there-a-benefit-to-updating-my-loop-if-i-use-ios-13","text":"Nope. Unless you want to try dark mode which is in dev branch and being developed there...that's about the only thing that is iOS 13 specific in Loop.","title":"Is there a benefit to updating my Loop if I use iOS 13?"},{"location":"faqs/ios13/#why-is-ios-update-a-big-deal-then","text":"Because iOS major releases (like going from iOS 12 to 13...where the whole number changes) involve updates to several major other Apple-related things. It's a cascade effect. If you update iOS with a major release, then Xcode will need to update, too. Because Xcode will need the new command tools, Swift language updates, and simulators to be able to properly build for devices that have the new iOS. And then the cascade continues...that new Xcode will likely require a macOS update. And sometimes (as happened when Xcode 10 was released), the required update to macOS was also a major update (High Sierra to Mojave) that some computers couldn't do. They were \"unsupported\" by Apple and were aged-out. Luckily, the update to Xcode 11 does not involve aging out any computers this time. If you were running Xcode 10 already, you'll be able to update to Xcode 11 without fear that you'll be left out based on macOS age. So, iOS updates are a big deal (for Loopers) because they involve needing to do some updates to be able to properly build Loop again the next time you want to. And people forget about updates. And then they forget about LoopDocs' page specifically to help with Updating your Loop app. And so they just blindly download and build like they did last time...unaware there were needed updates. It's not so much about Loop when you update iOS...the issue is about what other things you need to update BEFORE you build Loop again and AFTER you update iOS.","title":"Why is iOS update a big deal then?"},{"location":"faqs/omnipod-faqs/","text":"Omnipod FAQs \u2301 Is Omnipod supported on Loop? \u2301 YES IT IS! WOOHOO! Which pods will work with Loop? \u2301 The Loop system described in these documents (aka DIY Loop) works with Eros pods...these are the current pods on the market in wide release. The newer DASH pods are not compatible with DIY Loop. Tidepool has begun a process to bring DIY Loop through FDA approval and Insulet has been announced as the first pump partner for that project . Tidepool Loop will be using DASH pods, no RileyLink required. If you would like to stay informed about Tidepool Loop progress, you can fill out an interest form here . Summary of eventual systems: DIY Loop + Eros pods + RileyLink Tidepool Loop + DASH pods (no RileyLink) Do I still need a PDM with Omnipod Loop? \u2301 No, pods are monogamous little creatures. They will pair with only one device at a time for safety reasons...so a pod is either paired with a PDM or your Loop app on your iPhone. In other words, your PDM can stay in the diabetes closet while you are Looping. You cannot use the PDM for a pod that has been activated with Loop. That doesn't mean you should get rid of your PDM. Instead, keep it for backup situations if you lose your phone. See below for what to do if you lose your phone or RileyLink. Can I cancel a temp basal Loop sets? How about a bolus? \u2301 Yes, you can cancel a temp basal or a bolus in progress. There is a \"suspend delivery\" command that is easy to access by tapping on the pod age icon in your Heads Up Display, upper right area . Suspending insulin delivery will cancel any running temp basal or bolus in progress. The suspend command will run indefinitely. A banner notification will be displayed on the Loop main screen while insulin delivery is suspended. Insulin will remain suspended until the user either clicks on the \"Tap to Resume\" command from Loop's main screen or the \"resume delivery\" command accessed by tapping the pod age icon. Once insulin delivery is resumed, you will be resumed at your scheduled basal rate. If a bolus was interrupted, the bolus will not resume. If you don't turn on open loop mode, within 5 minutes of resuming insulin delivery, your Loop should resume automatic temp basal adjustments. Can I prime or set my own temp basal on Loop? \u2301 No. Loop does not allow you to pick your own temp basal rate or prime insulin in. If you find yourself in a situation where you would like to specify an exact temp basal rate of your own, you would need to (1) change your scheduled basal rate for the time(s) that you'd like a temp basal rate to run, and (2) suspend/resume insulin delivery (in order to cancel any currently running temp basal that Loop has running) and then (3) turn the slider so that you are running in \"open loop\" mode for the duration of the time you want to use that specific basal rate. What if I lose my phone or RileyLink? \u2301 For pod users, your pod will finish any currently running temporary basal rate and then revert back to your scheduled basal rate. Without a phone or RileyLink however, you will not be able to affect any pod use; no basal change, suspend, cancel, or bolus. To do anything other than let basals continue, you will need to take action depending on the situation. Lost RileyLink only: You can replace your missing RileyLink with one from your backup supplies. No problem to switch out to a different Rileylink mid-pod session. If you don't have a backup RileyLink to use, then you will need to remove the pod and put on a new pod paired with your PDM until you can get a new RileyLink. Lost iPhone only: You will need to remove the pod and put on a new pod paired with your PDM until you can get a new phone and Loop app built onto it. Lost both RileyLink and phone: You're having a really bad day. You'll need a hug and follow the same directions as if you lost the phone as shown in the bullet above. Is there an increase in pod failures on Loop? \u2301 In the early stages of development, there were. Thankfully to the hard work of Pete Schwamb and others, pod failure rate is now no longer increased compared to typical pod use with a PDM. What do I do if a pod fails to pair? \u2301 The most common time of pod errors on Loop will be during the pairing process. If you get a pod that is failing to pair, please see this page for steps on how to fix the failure and recover before you lose the pod. What do you do to stop a screaming pod? \u2301 Screaming pods can be silenced by carrying a paperclip. Simply put the paperclip in the small hole that is on the bottom (the side opposite where the cannula is) of the pod as shown. Push the paperclip in until you hear a little click, that click is breaking the circuit that lets the audible scream go.","title":"Omnipod FAQs"},{"location":"faqs/omnipod-faqs/#omnipod-faqs","text":"","title":"Omnipod FAQs"},{"location":"faqs/omnipod-faqs/#is-omnipod-supported-on-loop","text":"YES IT IS! WOOHOO!","title":"Is Omnipod supported on Loop?"},{"location":"faqs/omnipod-faqs/#which-pods-will-work-with-loop","text":"The Loop system described in these documents (aka DIY Loop) works with Eros pods...these are the current pods on the market in wide release. The newer DASH pods are not compatible with DIY Loop. Tidepool has begun a process to bring DIY Loop through FDA approval and Insulet has been announced as the first pump partner for that project . Tidepool Loop will be using DASH pods, no RileyLink required. If you would like to stay informed about Tidepool Loop progress, you can fill out an interest form here . Summary of eventual systems: DIY Loop + Eros pods + RileyLink Tidepool Loop + DASH pods (no RileyLink)","title":"Which pods will work with Loop?"},{"location":"faqs/omnipod-faqs/#do-i-still-need-a-pdm-with-omnipod-loop","text":"No, pods are monogamous little creatures. They will pair with only one device at a time for safety reasons...so a pod is either paired with a PDM or your Loop app on your iPhone. In other words, your PDM can stay in the diabetes closet while you are Looping. You cannot use the PDM for a pod that has been activated with Loop. That doesn't mean you should get rid of your PDM. Instead, keep it for backup situations if you lose your phone. See below for what to do if you lose your phone or RileyLink.","title":"Do I still need a PDM with Omnipod Loop?"},{"location":"faqs/omnipod-faqs/#can-i-cancel-a-temp-basal-loop-sets-how-about-a-bolus","text":"Yes, you can cancel a temp basal or a bolus in progress. There is a \"suspend delivery\" command that is easy to access by tapping on the pod age icon in your Heads Up Display, upper right area . Suspending insulin delivery will cancel any running temp basal or bolus in progress. The suspend command will run indefinitely. A banner notification will be displayed on the Loop main screen while insulin delivery is suspended. Insulin will remain suspended until the user either clicks on the \"Tap to Resume\" command from Loop's main screen or the \"resume delivery\" command accessed by tapping the pod age icon. Once insulin delivery is resumed, you will be resumed at your scheduled basal rate. If a bolus was interrupted, the bolus will not resume. If you don't turn on open loop mode, within 5 minutes of resuming insulin delivery, your Loop should resume automatic temp basal adjustments.","title":"Can I cancel a temp basal Loop sets? How about a bolus?"},{"location":"faqs/omnipod-faqs/#can-i-prime-or-set-my-own-temp-basal-on-loop","text":"No. Loop does not allow you to pick your own temp basal rate or prime insulin in. If you find yourself in a situation where you would like to specify an exact temp basal rate of your own, you would need to (1) change your scheduled basal rate for the time(s) that you'd like a temp basal rate to run, and (2) suspend/resume insulin delivery (in order to cancel any currently running temp basal that Loop has running) and then (3) turn the slider so that you are running in \"open loop\" mode for the duration of the time you want to use that specific basal rate.","title":"Can I prime or set my own temp basal on Loop?"},{"location":"faqs/omnipod-faqs/#what-if-i-lose-my-phone-or-rileylink","text":"For pod users, your pod will finish any currently running temporary basal rate and then revert back to your scheduled basal rate. Without a phone or RileyLink however, you will not be able to affect any pod use; no basal change, suspend, cancel, or bolus. To do anything other than let basals continue, you will need to take action depending on the situation. Lost RileyLink only: You can replace your missing RileyLink with one from your backup supplies. No problem to switch out to a different Rileylink mid-pod session. If you don't have a backup RileyLink to use, then you will need to remove the pod and put on a new pod paired with your PDM until you can get a new RileyLink. Lost iPhone only: You will need to remove the pod and put on a new pod paired with your PDM until you can get a new phone and Loop app built onto it. Lost both RileyLink and phone: You're having a really bad day. You'll need a hug and follow the same directions as if you lost the phone as shown in the bullet above.","title":"What if I lose my phone or RileyLink?"},{"location":"faqs/omnipod-faqs/#is-there-an-increase-in-pod-failures-on-loop","text":"In the early stages of development, there were. Thankfully to the hard work of Pete Schwamb and others, pod failure rate is now no longer increased compared to typical pod use with a PDM.","title":"Is there an increase in pod failures on Loop?"},{"location":"faqs/omnipod-faqs/#what-do-i-do-if-a-pod-fails-to-pair","text":"The most common time of pod errors on Loop will be during the pairing process. If you get a pod that is failing to pair, please see this page for steps on how to fix the failure and recover before you lose the pod.","title":"What do I do if a pod fails to pair?"},{"location":"faqs/omnipod-faqs/#what-do-you-do-to-stop-a-screaming-pod","text":"Screaming pods can be silenced by carrying a paperclip. Simply put the paperclip in the small hole that is on the bottom (the side opposite where the cannula is) of the pod as shown. Push the paperclip in until you hear a little click, that click is breaking the circuit that lets the audible scream go.","title":"What do you do to stop a screaming pod?"},{"location":"faqs/rileylink-faqs/","text":"RileyLink Compatible Device FAQs \u2301 This may be a Frequently Asked Questions page but not all the section headers are crafted in the form of questions. A RileyLink compatible device is a required part of Loop. The device uses the RileyLink protocol to communicate information to/from your pump by radio communications and to/from your iPhone using Bluetooth. You will need the device within range of your phone and pump so that these communications can happen. Put it in a purse, pocket, SPIbelt. Clip it to a backpack, belt, or bra...but please do bring it with you.. Purchase information for these devices is found in Build Step 5: RileyLink Compatible Devices Cases \u2301 There is now a topics section on cases The Looped Facebook group. (Right hand side when you're in the discussion location). Link to Topics: Cases Riley Ema Orange You can also use the search feature on the general discussion page of The Looped Facebook group if you already have a case and want more ideas, e.g., \"How to carry rileylink\". Communications \u2301 All the RileyLink compatible devices communicate with the pump through radio frequency communications and with the phone through Bluetooth. Bluetooth (BT) Troubleshooting If your iPhone has BT issues, your Loop will have failures. There have been reports of BT audio devices (such as BT pairings in your car or home audio BT speakers) interfering with the Loop. If you are finding Loop failures frequently happening at a particular location, you may try to troubleshoot if there are BT problems in the area. Your BT signal strength can be seen in the Loop settings, Pump settings, Device menu, on the Signal Strength line. As you move closer and further away from your phone, you can watch that number dynamically change. This line is not displaying the signal strength of your pump RF communications, just BT between the RileyLink compatible device and the phone. You will notice the Signal Strength is a negative number and in units of dB. Remember that number line from elementary school? A signal strength of -50 dB is a stronger signal than -80 dB. Range \u2301 The range at which RileyLink compatible devices will function is dependent on the environment that you are in and the specific device design. Both the OrangeLink and some sizes of the EmaLink have reported longer ranges than RileyLink (typically 10 to 20 ft) - but they still need to be \"near enough\". What influences this distance for a given device? The biggest external influences are (1) body-blocking and (2) \"noisy\" environments. The human body is a lot of water, and water is an excellent blocker of wireless communication. So, sleeping on a pod and smothering it entirely with your body can decrease the ability of the device to communicate with the pod. Environments with a high concentration of wireless signals can also interfere with device communications and make closer proximity a benefit. Where might those kinds of situations happen? Concerts, conferences, and sporting arenas are pretty prone to interference. Many people keep their device on the same side of their body as their pump during the day. They use a pocket, carabiner, lanyard, SPIbelt - the options are endless. What you don't want to do is put it in a blocking bag that has RFID blocking (some travel fanny packs have that). What happens if Loop loses communication? \u2301 While you are out of the communication range for your RileyLink compatible device, any running temp basal will keep going until it finishes (the longest temp basal that Loop sets are for 30 minutes duration...so within 30 minutes or less your pump would go back to your regularly scheduled basal). When you come back into range of your device, Loop will pick back up within 5-10 minutes without you needing to do anything. Are these devices waterproof? \u2301 Nope. Nor sweat-proof. Be careful. There are waterproof cases. Using more than one device \u2301 You can have more than one RileyLink compatible device turned on and connected. Loop only uses one device at a time. If you have several devices turned on in Loop settings, Loop will only look for another device after it fails to connect for over 15 minutes on the original device. If one device is in the bedroom and another in the kitchen, it will automatically switch for you, after the delay. Firmware version \u2301 In Loop settings, tap on your pump, find your device (RileyLink or other) and tap on that menu. The figure below shows firmware specific to the RileyLink. If you have another type of device, the firmware value reported will be different. With RileyLink, the firmware displayed should match or be a higher version number than what is shown in the figure above, e.g., subg_rfspy 2.2/ble_rfspy 2.0 . (If you are running with a very old RileyLink from pre-Aug 2018, it might be a lower number.) Check it when the device is working well and make a note of what it says. If you're having Red Loops, you might want to check firmware and connected state. Make sure, after power cycling your device, that the correct firmware is displayed. If several power cycles do not help, contact the manufacturer for assistance. RileyLink Information \u2301 Since the RileyLink version of the communication link device has been around the longest, some additional information about that device has been added to LoopDocs throughout the years. The rest of this page is specific just to the RileyLink device. RileyLink Assembly \u2301 Your RileyLink will come with the Lithium-ion Polymer (LiPo) battery disconnected and the parts not already inside the case. It will be up to you to put the RileyLink in the case and attach the battery. Make sure the LiPo battery is well-plugged into the connection. Line up the little ridge appropriately, and push fairly firmly to get the connection tight. Poor battery cable connection can make the Loop communications fail. See photos below, for example. Common new user errors The most common two errors for new RileyLink owners are (1) not fully pushing in the LiPo battery cable connection and (2) failing to charge the RileyLink. Compare your LiPo battery cable with the photos; it takes a bit of oomph to push that plug fully in like the photos shown below. Remember to charge your RileyLink each night. Loose battery cable on left. Proper battery cable on right Finally, the board and the battery fit into the slim case fairly tightly as well. Click on the image below to watch a helpful assembly video . RileyLink Lights \u2301 The RileyLink has several lights that you may notice from time to time. There is no 'power' light. If you suspect that your RileyLink is not being powered, try turning it off and on using the small sliding switch. You should see lights in the middle of the board flash when you do this. If they flash, that means the board has power. Red light: Charging light. The red light will remain on while RileyLink is charging, and it will turn off when charging is complete. You may notice the red light turn on periodically even after charging is complete...it's just \"topping off\". Green light: Bluetooth connection light. The green light will remain on while you have a BT connection with your iPhone. If that green light fails to stay on, you should troubleshoot your BT connections. Try restarting BT on your iPhone and/or turning the RileyLink off/on by its power switch. Blue light: Pump communications. If you have an older firmware on your RileyLink, some of the blue lights will flash periodically as it communicates with the pump. It's just letting you know that it is busy talking and collecting info. You will also see increased blue flashes if you have \"Enabled Diagnostic LEDs\" for Medtronic users that have the RileyLinks with updated firmware (shipping since late August 2018). A solid blue light that consistently remains lit on the board could mean one of two things: A temporary issue that can be resolved by rebooting the RileyLink physically (turning the switch off/on), or An electrical short or damage to the board. Sweat and moisture are most likely culprits, so try to keep case free from those environments. Don't keep RileyLink in sports bras or waistband next to skin, for example, while exercising. If your blue light remains on despite trying a restart, it is time to pull out your backup RileyLink. RileyLink Charging \u2301 The battery that comes with RileyLink is not charged completely when it is shipped, so be sure to charge it up before initial use. You'll need a mini-USB cable and 0.5A USB charging power supply like your iPhone power supply. RileyLink takes about 2 hours to fully charge (the red light will turn off when fully charged, read note above about red light patterns) and should easily last at least a full day of constant Loop use. Typically, it can go into the 30-hour range without any problems. Most people charge their RileyLink each night when they are sleeping. You don't have to worry about leaving the RileyLink plugged in \"too long\" for charging. It will automatically stop charging the battery when it is fully charged. Since the best practice is to charge your RileyLink overnight while you sleep, and the battery lasts safely over 24 hours, there is no battery level indicator for the RileyLink. The RileyLink's charge level is not viewable on Nightscout, nor within the Loop app. If you forget to charge your RileyLink overnight, you can recharge it with a portable USB battery in a pinch. A short mini-USB cable could be a good addition to a small gear bag. What are the differences between the RileyLink Medtronic and Omnipod Antennas? \u2301 There are two types of antennas for RileyLinks; each antenna is optimized for the pump you are using. Otherwise they are identical. See Build Step 5: RileyLink Compatible Devices for other devices. The OrangeLink has both antennas included in its design and can talk to either Medtronic or Omnipod. The EmaLink requires selection for type of pump. The color of the RileyLink circuit board in the photos below is irrelevant. What will happen if your RileyLink has the wrong antenna? \u2301 You can technically use that RileyLink with either pump on Loop. But, you will have significant frustrations and probably a lot of red loops. With mismatched antenna/pump, the device needs to be very close (think inches) and in clear line-of-sight to pump/pod. This makes everyday living (and sleeping) a bit hard. If you use the appropriate-antenna-for-your-pump device, the distances the pump/pod and RileyLink can tolerate from each other is much more \"real world\" friendly and stable. The OrangeLink contains both antennas so will work with either pump. This may be a good choice if you like to switch between Medtronic and Omnipod. In a pinch, if you have a RileyLink that you used with a Medtronic pump and have switched to Omnipod, it might work as a backup, but you won't love it. Can you swap out the old antenna on a RileyLink? \u2301 Yes, the antenna swap is not a hard swap if you have basic soldering skills and tools. The old antenna can be removed easily by reheating the solder. New 433MHz antennas and a cap can be found on the GetRileyLink site . Tips: use flux and clean the antenna stub before soldering. Poorly DIY-soldered antennas can lead to a decreased range and frequent communication drops between Loop and the pods. Be very sure that the wire on the antenna does NOT poke out the back side of the printed-circuit board where it could rub against and possibly puncture the battery casing. After a year of use (and a year of being dropped), the antenna may no longer securely soldered. The solder should be shiny and the antenna base should be firmly attached to the board. How long will my RileyLink go between charging? \u2301 RileyLinks can go about 30-36 hours on a single charge. There is no way to see the remaining charge level, so most people just get into the habit of charging overnight while they sleep. The actual time to fully recharge is about 1 or 2 hours; you'll know it is fully charged when the red light turns off. After a full charge, the red light will turn off and then periodically turn on for short times while it \"tops off\" while still on a charger. How can I tell how much charge my RileyLink has? \u2301 You can't. There is no charge level indicator. Just charge it nightly, and you won't have a problem. Full battery charge should last about 30-36 hours depending on battery health. Charging takes less than 2 hours. How long will my RileyLink battery last? \u2301 Eventually, Lithium-ion Polymer (LiPo) batteries will lose charging capacity. You would want to replace if you notice the battery not lasting the full day. Many people report using their battery for more than 2 years without issue. Be aware that if a battery is failing, it may swell. If you notice that the RileyLink battery is swollen, remove the swollen battery from your home and place in a fire-safe area and recycle it properly. Either order a new battery or pull out your spare. RileyLink Battery \u2301 Keep your RileyLink and its Lithium-ion Polymer (LiPo) battery protected from damage. LiPo batteries are unsafe when damaged or punctured, so the case is an important part of safe Looping. If your battery is damaged in some way, please disconnect it immediately, and dispose of it (they should be recycled). You can order new RileyLink batteries on the GetRileyLink website RileyLink Battery Removal \u2301 To remove the LiPo battery from the RileyLink, please do so slowly and patiently. Work the battery connection side to side slowly to loosen it from the plug. Some people have reported success using small, curved needle-nose pliers such as hemostats. Others have used small flathead screwdrivers as shown in this video .","title":"RileyLink FAQs"},{"location":"faqs/rileylink-faqs/#rileylink-compatible-device-faqs","text":"This may be a Frequently Asked Questions page but not all the section headers are crafted in the form of questions. A RileyLink compatible device is a required part of Loop. The device uses the RileyLink protocol to communicate information to/from your pump by radio communications and to/from your iPhone using Bluetooth. You will need the device within range of your phone and pump so that these communications can happen. Put it in a purse, pocket, SPIbelt. Clip it to a backpack, belt, or bra...but please do bring it with you.. Purchase information for these devices is found in Build Step 5: RileyLink Compatible Devices","title":"RileyLink Compatible Device FAQs"},{"location":"faqs/rileylink-faqs/#cases","text":"There is now a topics section on cases The Looped Facebook group. (Right hand side when you're in the discussion location). Link to Topics: Cases Riley Ema Orange You can also use the search feature on the general discussion page of The Looped Facebook group if you already have a case and want more ideas, e.g., \"How to carry rileylink\".","title":"Cases"},{"location":"faqs/rileylink-faqs/#communications","text":"All the RileyLink compatible devices communicate with the pump through radio frequency communications and with the phone through Bluetooth. Bluetooth (BT) Troubleshooting If your iPhone has BT issues, your Loop will have failures. There have been reports of BT audio devices (such as BT pairings in your car or home audio BT speakers) interfering with the Loop. If you are finding Loop failures frequently happening at a particular location, you may try to troubleshoot if there are BT problems in the area. Your BT signal strength can be seen in the Loop settings, Pump settings, Device menu, on the Signal Strength line. As you move closer and further away from your phone, you can watch that number dynamically change. This line is not displaying the signal strength of your pump RF communications, just BT between the RileyLink compatible device and the phone. You will notice the Signal Strength is a negative number and in units of dB. Remember that number line from elementary school? A signal strength of -50 dB is a stronger signal than -80 dB.","title":"Communications"},{"location":"faqs/rileylink-faqs/#range","text":"The range at which RileyLink compatible devices will function is dependent on the environment that you are in and the specific device design. Both the OrangeLink and some sizes of the EmaLink have reported longer ranges than RileyLink (typically 10 to 20 ft) - but they still need to be \"near enough\". What influences this distance for a given device? The biggest external influences are (1) body-blocking and (2) \"noisy\" environments. The human body is a lot of water, and water is an excellent blocker of wireless communication. So, sleeping on a pod and smothering it entirely with your body can decrease the ability of the device to communicate with the pod. Environments with a high concentration of wireless signals can also interfere with device communications and make closer proximity a benefit. Where might those kinds of situations happen? Concerts, conferences, and sporting arenas are pretty prone to interference. Many people keep their device on the same side of their body as their pump during the day. They use a pocket, carabiner, lanyard, SPIbelt - the options are endless. What you don't want to do is put it in a blocking bag that has RFID blocking (some travel fanny packs have that).","title":"Range"},{"location":"faqs/rileylink-faqs/#what-happens-if-loop-loses-communication","text":"While you are out of the communication range for your RileyLink compatible device, any running temp basal will keep going until it finishes (the longest temp basal that Loop sets are for 30 minutes duration...so within 30 minutes or less your pump would go back to your regularly scheduled basal). When you come back into range of your device, Loop will pick back up within 5-10 minutes without you needing to do anything.","title":"What happens if Loop loses communication?"},{"location":"faqs/rileylink-faqs/#are-these-devices-waterproof","text":"Nope. Nor sweat-proof. Be careful. There are waterproof cases.","title":"Are these devices waterproof?"},{"location":"faqs/rileylink-faqs/#using-more-than-one-device","text":"You can have more than one RileyLink compatible device turned on and connected. Loop only uses one device at a time. If you have several devices turned on in Loop settings, Loop will only look for another device after it fails to connect for over 15 minutes on the original device. If one device is in the bedroom and another in the kitchen, it will automatically switch for you, after the delay.","title":"Using more than one device"},{"location":"faqs/rileylink-faqs/#firmware-version","text":"In Loop settings, tap on your pump, find your device (RileyLink or other) and tap on that menu. The figure below shows firmware specific to the RileyLink. If you have another type of device, the firmware value reported will be different. With RileyLink, the firmware displayed should match or be a higher version number than what is shown in the figure above, e.g., subg_rfspy 2.2/ble_rfspy 2.0 . (If you are running with a very old RileyLink from pre-Aug 2018, it might be a lower number.) Check it when the device is working well and make a note of what it says. If you're having Red Loops, you might want to check firmware and connected state. Make sure, after power cycling your device, that the correct firmware is displayed. If several power cycles do not help, contact the manufacturer for assistance.","title":"Firmware version"},{"location":"faqs/rileylink-faqs/#rileylink-information","text":"Since the RileyLink version of the communication link device has been around the longest, some additional information about that device has been added to LoopDocs throughout the years. The rest of this page is specific just to the RileyLink device.","title":"RileyLink Information"},{"location":"faqs/rileylink-faqs/#rileylink-assembly","text":"Your RileyLink will come with the Lithium-ion Polymer (LiPo) battery disconnected and the parts not already inside the case. It will be up to you to put the RileyLink in the case and attach the battery. Make sure the LiPo battery is well-plugged into the connection. Line up the little ridge appropriately, and push fairly firmly to get the connection tight. Poor battery cable connection can make the Loop communications fail. See photos below, for example. Common new user errors The most common two errors for new RileyLink owners are (1) not fully pushing in the LiPo battery cable connection and (2) failing to charge the RileyLink. Compare your LiPo battery cable with the photos; it takes a bit of oomph to push that plug fully in like the photos shown below. Remember to charge your RileyLink each night. Loose battery cable on left. Proper battery cable on right Finally, the board and the battery fit into the slim case fairly tightly as well. Click on the image below to watch a helpful assembly video .","title":"RileyLink Assembly"},{"location":"faqs/rileylink-faqs/#rileylink-lights","text":"The RileyLink has several lights that you may notice from time to time. There is no 'power' light. If you suspect that your RileyLink is not being powered, try turning it off and on using the small sliding switch. You should see lights in the middle of the board flash when you do this. If they flash, that means the board has power. Red light: Charging light. The red light will remain on while RileyLink is charging, and it will turn off when charging is complete. You may notice the red light turn on periodically even after charging is complete...it's just \"topping off\". Green light: Bluetooth connection light. The green light will remain on while you have a BT connection with your iPhone. If that green light fails to stay on, you should troubleshoot your BT connections. Try restarting BT on your iPhone and/or turning the RileyLink off/on by its power switch. Blue light: Pump communications. If you have an older firmware on your RileyLink, some of the blue lights will flash periodically as it communicates with the pump. It's just letting you know that it is busy talking and collecting info. You will also see increased blue flashes if you have \"Enabled Diagnostic LEDs\" for Medtronic users that have the RileyLinks with updated firmware (shipping since late August 2018). A solid blue light that consistently remains lit on the board could mean one of two things: A temporary issue that can be resolved by rebooting the RileyLink physically (turning the switch off/on), or An electrical short or damage to the board. Sweat and moisture are most likely culprits, so try to keep case free from those environments. Don't keep RileyLink in sports bras or waistband next to skin, for example, while exercising. If your blue light remains on despite trying a restart, it is time to pull out your backup RileyLink.","title":"RileyLink Lights"},{"location":"faqs/rileylink-faqs/#rileylink-charging","text":"The battery that comes with RileyLink is not charged completely when it is shipped, so be sure to charge it up before initial use. You'll need a mini-USB cable and 0.5A USB charging power supply like your iPhone power supply. RileyLink takes about 2 hours to fully charge (the red light will turn off when fully charged, read note above about red light patterns) and should easily last at least a full day of constant Loop use. Typically, it can go into the 30-hour range without any problems. Most people charge their RileyLink each night when they are sleeping. You don't have to worry about leaving the RileyLink plugged in \"too long\" for charging. It will automatically stop charging the battery when it is fully charged. Since the best practice is to charge your RileyLink overnight while you sleep, and the battery lasts safely over 24 hours, there is no battery level indicator for the RileyLink. The RileyLink's charge level is not viewable on Nightscout, nor within the Loop app. If you forget to charge your RileyLink overnight, you can recharge it with a portable USB battery in a pinch. A short mini-USB cable could be a good addition to a small gear bag.","title":"RileyLink Charging"},{"location":"faqs/rileylink-faqs/#what-are-the-differences-between-the-rileylink-medtronic-and-omnipod-antennas","text":"There are two types of antennas for RileyLinks; each antenna is optimized for the pump you are using. Otherwise they are identical. See Build Step 5: RileyLink Compatible Devices for other devices. The OrangeLink has both antennas included in its design and can talk to either Medtronic or Omnipod. The EmaLink requires selection for type of pump. The color of the RileyLink circuit board in the photos below is irrelevant.","title":"What are the differences between the RileyLink Medtronic and Omnipod Antennas?"},{"location":"faqs/rileylink-faqs/#what-will-happen-if-your-rileylink-has-the-wrong-antenna","text":"You can technically use that RileyLink with either pump on Loop. But, you will have significant frustrations and probably a lot of red loops. With mismatched antenna/pump, the device needs to be very close (think inches) and in clear line-of-sight to pump/pod. This makes everyday living (and sleeping) a bit hard. If you use the appropriate-antenna-for-your-pump device, the distances the pump/pod and RileyLink can tolerate from each other is much more \"real world\" friendly and stable. The OrangeLink contains both antennas so will work with either pump. This may be a good choice if you like to switch between Medtronic and Omnipod. In a pinch, if you have a RileyLink that you used with a Medtronic pump and have switched to Omnipod, it might work as a backup, but you won't love it.","title":"What will happen if your RileyLink has the wrong antenna?"},{"location":"faqs/rileylink-faqs/#can-you-swap-out-the-old-antenna-on-a-rileylink","text":"Yes, the antenna swap is not a hard swap if you have basic soldering skills and tools. The old antenna can be removed easily by reheating the solder. New 433MHz antennas and a cap can be found on the GetRileyLink site . Tips: use flux and clean the antenna stub before soldering. Poorly DIY-soldered antennas can lead to a decreased range and frequent communication drops between Loop and the pods. Be very sure that the wire on the antenna does NOT poke out the back side of the printed-circuit board where it could rub against and possibly puncture the battery casing. After a year of use (and a year of being dropped), the antenna may no longer securely soldered. The solder should be shiny and the antenna base should be firmly attached to the board.","title":"Can you swap out the old antenna on a RileyLink?"},{"location":"faqs/rileylink-faqs/#how-long-will-my-rileylink-go-between-charging","text":"RileyLinks can go about 30-36 hours on a single charge. There is no way to see the remaining charge level, so most people just get into the habit of charging overnight while they sleep. The actual time to fully recharge is about 1 or 2 hours; you'll know it is fully charged when the red light turns off. After a full charge, the red light will turn off and then periodically turn on for short times while it \"tops off\" while still on a charger.","title":"How long will my RileyLink go between charging?"},{"location":"faqs/rileylink-faqs/#how-can-i-tell-how-much-charge-my-rileylink-has","text":"You can't. There is no charge level indicator. Just charge it nightly, and you won't have a problem. Full battery charge should last about 30-36 hours depending on battery health. Charging takes less than 2 hours.","title":"How can I tell how much charge my RileyLink has?"},{"location":"faqs/rileylink-faqs/#how-long-will-my-rileylink-battery-last","text":"Eventually, Lithium-ion Polymer (LiPo) batteries will lose charging capacity. You would want to replace if you notice the battery not lasting the full day. Many people report using their battery for more than 2 years without issue. Be aware that if a battery is failing, it may swell. If you notice that the RileyLink battery is swollen, remove the swollen battery from your home and place in a fire-safe area and recycle it properly. Either order a new battery or pull out your spare.","title":"How long will my RileyLink battery last?"},{"location":"faqs/rileylink-faqs/#rileylink-battery","text":"Keep your RileyLink and its Lithium-ion Polymer (LiPo) battery protected from damage. LiPo batteries are unsafe when damaged or punctured, so the case is an important part of safe Looping. If your battery is damaged in some way, please disconnect it immediately, and dispose of it (they should be recycled). You can order new RileyLink batteries on the GetRileyLink website","title":"RileyLink Battery"},{"location":"faqs/rileylink-faqs/#rileylink-battery-removal","text":"To remove the LiPo battery from the RileyLink, please do so slowly and patiently. Work the battery connection side to side slowly to loosen it from the plug. Some people have reported success using small, curved needle-nose pliers such as hemostats. Others have used small flathead screwdrivers as shown in this video .","title":"RileyLink Battery Removal"},{"location":"faqs/safety-faqs/","text":"Safety Tips \u2301 Beware the Medtronic Easy Bolus button \u2301 Medtronic's easy bolus button has been the cause of several accidental boluses when the pump has been carried in a pocket. Best practice would be to disable the Easy Bolus button since you will be doing boluses from the phone anyways. Health app permissions \u2301 Do not let other apps, such as Spike App or MyFitnessPal, on your iPhone write carbohydrates to Health app. Loop could read those carbohydrates and you could be dosed for those carbohydrates. You can read more about Health permissions here . Finish your Medtronic priming \u2301 After a site change and reservoir rewind, Medtronic's pump will have a menu on the pump screen related to finishing your prime. Make sure you complete that screen and always return to the main menu. Medtronic's pump won't resume basal insulin delivery until that priming screen is completed. Know your settings \u2301 Do not enter in settings that you are unsure of. For example, if you haven't any idea what your carb ratio is, please don't enter a zero or a wild guess. Instead, test your settings and talk to your health care provider about what your appropriate settings should be. How to Cancel Carbs \u2301 DO NOT ENTER ACCIDENTAL DUPLICATE CARB ENTRIES. When you enter a meal in Loop and press the save button...those carbs are saved. Let me repeat: THOSE CARBS ARE SAVED...even if you cancel the bolus for them. This is an automated insulin delivery system and if it thinks you have carbs on board, it will try to give you appropriate insulin for those carbs. Most common new user mistake: enters a meal, saves the carbs, has a change of heart or gets confused, and cancels the bolus screen...thinking they've just canceled the entire meal entry. Then they enter in a new carb entry. AND NOW, when you go to bolus...you'll be bolusing for the meal you wanted AND the meal you are mistakenly thinking you had \"canceled\". You didn't cancel that carb entry though, you had only canceled the bolus...you didn't \"unsave\" the carbs. If you make a mistake or change your mind on a carb entry after you pressed save, then tap the green carb chart in Loop's main display and edit or delete that entry. CANCELING A BOLUS DOES NOT CANCEL THE CARB ENTRY THAT GOT YOU THERE. You must delete or edit a saved carb entry if you no longer want Loop to provide insulin for it.","title":"Safety Tips"},{"location":"faqs/safety-faqs/#safety-tips","text":"","title":"Safety Tips"},{"location":"faqs/safety-faqs/#beware-the-medtronic-easy-bolus-button","text":"Medtronic's easy bolus button has been the cause of several accidental boluses when the pump has been carried in a pocket. Best practice would be to disable the Easy Bolus button since you will be doing boluses from the phone anyways.","title":"Beware the Medtronic Easy Bolus button"},{"location":"faqs/safety-faqs/#health-app-permissions","text":"Do not let other apps, such as Spike App or MyFitnessPal, on your iPhone write carbohydrates to Health app. Loop could read those carbohydrates and you could be dosed for those carbohydrates. You can read more about Health permissions here .","title":"Health app permissions"},{"location":"faqs/safety-faqs/#finish-your-medtronic-priming","text":"After a site change and reservoir rewind, Medtronic's pump will have a menu on the pump screen related to finishing your prime. Make sure you complete that screen and always return to the main menu. Medtronic's pump won't resume basal insulin delivery until that priming screen is completed.","title":"Finish your Medtronic priming"},{"location":"faqs/safety-faqs/#know-your-settings","text":"Do not enter in settings that you are unsure of. For example, if you haven't any idea what your carb ratio is, please don't enter a zero or a wild guess. Instead, test your settings and talk to your health care provider about what your appropriate settings should be.","title":"Know your settings"},{"location":"faqs/safety-faqs/#how-to-cancel-carbs","text":"DO NOT ENTER ACCIDENTAL DUPLICATE CARB ENTRIES. When you enter a meal in Loop and press the save button...those carbs are saved. Let me repeat: THOSE CARBS ARE SAVED...even if you cancel the bolus for them. This is an automated insulin delivery system and if it thinks you have carbs on board, it will try to give you appropriate insulin for those carbs. Most common new user mistake: enters a meal, saves the carbs, has a change of heart or gets confused, and cancels the bolus screen...thinking they've just canceled the entire meal entry. Then they enter in a new carb entry. AND NOW, when you go to bolus...you'll be bolusing for the meal you wanted AND the meal you are mistakenly thinking you had \"canceled\". You didn't cancel that carb entry though, you had only canceled the bolus...you didn't \"unsave\" the carbs. If you make a mistake or change your mind on a carb entry after you pressed save, then tap the green carb chart in Loop's main display and edit or delete that entry. CANCELING A BOLUS DOES NOT CANCEL THE CARB ENTRY THAT GOT YOU THERE. You must delete or edit a saved carb entry if you no longer want Loop to provide insulin for it.","title":"How to Cancel Carbs"},{"location":"faqs/update-faqs/","text":"Updating/Rebuilding Loop FAQs \u2301 SOOOO many questions about updating or rebuilding Loop. The general answer is that people tend to overthink this. Rebuilding your Loop app is really quite easy...so a short read of these questions should help a lot. First, please take a minute to understand what the words mean. \"Updating Loop\" is the process of getting a new download of Loop's code and using that to update your Loop. You do this when you want to switch branches. You do this when you want to get fixes or new features from the same branch. The process doesn't care if you are moving from omnipod-testing -> dev or jojo -> dev or master -> dev or any other combination. Updating Loop is the same idea as what happens to your other apps on your iPhone when you update them from the App Store on the phone. A refreshed version of the same app appears on the phone, simply replacing-in-place the same Loop you were using with an updated version. Where should I start when I want to update my Loop? \u2301 ALWAYS start with the Update Loop page before any new build that you'd be doing. That page is important because it will offer information on the updates you need to do before building, as well as any late breaking things that might need to be considered. Do not simply build with your old downloaded folder from months ago. There is a high likelihood that your original code from awhile ago is outdated. Grab new code and you will get the version that has all the latest and greatest features and bug fixes. When do I have to update/rebuild? \u2301 Absolute minimum: 1 year from when you last built (paid account). Good idea minimum: If on dev branch, frequently. I've found valuable updates to dev branch at least once a week lately...but I'd say monthly minimum at least for dev right now. Master and omnipod-testing branch do not have changes frequently. Issue specific minimum: There are also times where you may need to update for \"hot-fixes\" to keep your Loop working when other things change. For example, the new style Dexcom transmitters changed their Bluetooth protocol. Loop's code was updated for the new transmitters so that offline looping can continue to work. If you don't update to get that fix, you will be forced to rely on internet-required looping because older versoin of Loop won't have the updated protocols. Will I have to delete my old Loop app? \u2301 No. Do not delete your old Loop. In fact, that is a bad idea as you will lose your currently paired pod and/or settings if you do that. So, don't delete (except for two situations below): You broke it: There is a glitch in Loop where if you enter the target correction range backwards, then your Loop app will stop working. Correction range needs to be in minimum-maximum, for example 100-120 mg/dL. If you entered that as 120-100 mg/dL, Loop will not work during the time that backwards correction range is supposed to be active. In this case you would need to delete the app and rebuild. Moving from dev branch back down to jojo branch. The way the new dev branch is coded will require you to delete your dev build prior to going back jojo branch. Does updating make a separate, second Loop app? \u2301 No. Loop is simply updated in-place, written right over the old version. The only exception to this is if you update/build using a different developer signing team than your original Loop app was built with. The app's identity on your phone is defined by the developer team that you signed the app with. That team has a unique ID to identify the app. So, if you change that unique ID, your phone interprets that as a unique app as well...giving you two Loop apps on the phone. Therefore, if changing developer accounts...you will get a new Loop app, and you would need a new Pod. You'll need to transfer your settings manually to the new app and delete your old app. Will my settings be saved when I update? \u2301 Yes. That's why we don't delete the app. Your settings will be saved. Will my pod still work when I update? \u2301 Yes. So long as you use the same developer team as you originally built the app with before. How can I confirm what version was installed? \u2301 The Loop's version is given at the top of the Loop settings page. Even better though, the new dev branch has very detailed info about the version of Loop you are using at the top of your Loop's Issue Report. This is a great new addition to help identify where, what, and when of your Loop version. What if I'm changing branches? Does that matter? \u2301 Does not matter. Moving between branches is an \"updating Loop\" action. Nothing about the information above changes. What if I'm changing phones? \u2301 Changing phones is a little different than updating. You will need to change pods in order to move to the new phone's Loop. And you will have to enter all your setting in again. Loop will not be \"restored from backup\" the way other apps are when switching phones...so you will have to actually build it fresh. How long does it take? \u2301 Assuming your macOS and Xcode updates are done, then plan on about 30 minutes.","title":"Update/Rebuild Loop FAQs"},{"location":"faqs/update-faqs/#updatingrebuilding-loop-faqs","text":"SOOOO many questions about updating or rebuilding Loop. The general answer is that people tend to overthink this. Rebuilding your Loop app is really quite easy...so a short read of these questions should help a lot. First, please take a minute to understand what the words mean. \"Updating Loop\" is the process of getting a new download of Loop's code and using that to update your Loop. You do this when you want to switch branches. You do this when you want to get fixes or new features from the same branch. The process doesn't care if you are moving from omnipod-testing -> dev or jojo -> dev or master -> dev or any other combination. Updating Loop is the same idea as what happens to your other apps on your iPhone when you update them from the App Store on the phone. A refreshed version of the same app appears on the phone, simply replacing-in-place the same Loop you were using with an updated version.","title":"Updating/Rebuilding Loop FAQs"},{"location":"faqs/update-faqs/#where-should-i-start-when-i-want-to-update-my-loop","text":"ALWAYS start with the Update Loop page before any new build that you'd be doing. That page is important because it will offer information on the updates you need to do before building, as well as any late breaking things that might need to be considered. Do not simply build with your old downloaded folder from months ago. There is a high likelihood that your original code from awhile ago is outdated. Grab new code and you will get the version that has all the latest and greatest features and bug fixes.","title":"Where should I start when I want to update my Loop?"},{"location":"faqs/update-faqs/#when-do-i-have-to-updaterebuild","text":"Absolute minimum: 1 year from when you last built (paid account). Good idea minimum: If on dev branch, frequently. I've found valuable updates to dev branch at least once a week lately...but I'd say monthly minimum at least for dev right now. Master and omnipod-testing branch do not have changes frequently. Issue specific minimum: There are also times where you may need to update for \"hot-fixes\" to keep your Loop working when other things change. For example, the new style Dexcom transmitters changed their Bluetooth protocol. Loop's code was updated for the new transmitters so that offline looping can continue to work. If you don't update to get that fix, you will be forced to rely on internet-required looping because older versoin of Loop won't have the updated protocols.","title":"When do I have to update/rebuild?"},{"location":"faqs/update-faqs/#will-i-have-to-delete-my-old-loop-app","text":"No. Do not delete your old Loop. In fact, that is a bad idea as you will lose your currently paired pod and/or settings if you do that. So, don't delete (except for two situations below): You broke it: There is a glitch in Loop where if you enter the target correction range backwards, then your Loop app will stop working. Correction range needs to be in minimum-maximum, for example 100-120 mg/dL. If you entered that as 120-100 mg/dL, Loop will not work during the time that backwards correction range is supposed to be active. In this case you would need to delete the app and rebuild. Moving from dev branch back down to jojo branch. The way the new dev branch is coded will require you to delete your dev build prior to going back jojo branch.","title":"Will I have to delete my old Loop app?"},{"location":"faqs/update-faqs/#does-updating-make-a-separate-second-loop-app","text":"No. Loop is simply updated in-place, written right over the old version. The only exception to this is if you update/build using a different developer signing team than your original Loop app was built with. The app's identity on your phone is defined by the developer team that you signed the app with. That team has a unique ID to identify the app. So, if you change that unique ID, your phone interprets that as a unique app as well...giving you two Loop apps on the phone. Therefore, if changing developer accounts...you will get a new Loop app, and you would need a new Pod. You'll need to transfer your settings manually to the new app and delete your old app.","title":"Does updating make a separate, second Loop app?"},{"location":"faqs/update-faqs/#will-my-settings-be-saved-when-i-update","text":"Yes. That's why we don't delete the app. Your settings will be saved.","title":"Will my settings be saved when I update?"},{"location":"faqs/update-faqs/#will-my-pod-still-work-when-i-update","text":"Yes. So long as you use the same developer team as you originally built the app with before.","title":"Will my pod still work when I update?"},{"location":"faqs/update-faqs/#how-can-i-confirm-what-version-was-installed","text":"The Loop's version is given at the top of the Loop settings page. Even better though, the new dev branch has very detailed info about the version of Loop you are using at the top of your Loop's Issue Report. This is a great new addition to help identify where, what, and when of your Loop version.","title":"How can I confirm what version was installed?"},{"location":"faqs/update-faqs/#what-if-im-changing-branches-does-that-matter","text":"Does not matter. Moving between branches is an \"updating Loop\" action. Nothing about the information above changes.","title":"What if I'm changing branches? Does that matter?"},{"location":"faqs/update-faqs/#what-if-im-changing-phones","text":"Changing phones is a little different than updating. You will need to change pods in order to move to the new phone's Loop. And you will have to enter all your setting in again. Loop will not be \"restored from backup\" the way other apps are when switching phones...so you will have to actually build it fresh.","title":"What if I'm changing phones?"},{"location":"faqs/update-faqs/#how-long-does-it-take","text":"Assuming your macOS and Xcode updates are done, then plan on about 30 minutes.","title":"How long does it take?"},{"location":"nightscout/ifttt/","text":"IFTTT Integration \u2301 If This, Then That (IFTTT) is a useful Nightscout integration. By using IFTTT, you can have single button presses on your iPhone that will set an override, log a cannula change, log a sensor change and much more. Step 1: Get your API Secret Hash \u2301 First we need to gather one thing called your \"hashed API Secret\". In your internet browser, open a \"console\" window while viewing your Nightscout site. Make sure you have \"authenticated\" your site by using your API secret in the Nightscout settings area (hint: if you see a little padlock in the upper left corner of the site, you haven't authenticated it). Refresh the site and your hashed secret key will be shown as \"apisecrethash: \"xxxxxxxxxx...\"\" For Safari users on Mac , you can open the console window by selecting \"Develop\" from the Safari top menu, and then \"Show Page Source\" (if you do not see \"Develop\" in the top menu, activate it by going to Safari > Preferences... > Advanced, and checking the \"Show Develop menu in menu bar\" option). If you're having problems seeing the apisecrethash, click the little grey triangle next to the \"status isAuthenticated\" line and the objects below it will display (see screenshot). Your hashed API secret can be copied and pasted from that line, as shown below. Save that somewhere easy to get to again, because you will be using it later. For Chrome users , the console window is found through the View >> Developer >> View Source. Click on the Console tab and scroll to find the \"status isAuthenticated\" row to find your apisecrethash. Copy your API hash to somewhere you can retreive it again, we will be copy/pasting it in Step 2. Step 2: Create your \"Applets\" \u2301 IFTTT calls their little actions that you'll create an \"applet\". I have no idea why. But, I will go along and use their terminology so we are all consistent. We are basically interested in creating applets that will be buttons on your phone to do cool things in Nightscout. So, you'll have a button that will log when you changed your sensor last...letting you see in Nightscout easily just how old a sensor is at any given time. Or you can create a button that will turn on an \"exercise\" override that you already programmed into your kid's Loop app. So, let's make our first applet (aka button). Get an IFTTT account Login to your IFTTT.com account and select click this link to get to the page for creating your first \"New Applet\". (You can also get to this Applet creation page by selecting your Account icon in the upper right of the IFTTT website, then clicking on \"Create\".) In the screen that appears, click on the black \"+this\" part of the screen In the next screen, type \"button\" in the search field and then click on the red box labelled \"ButtonWidget\" Connect the button widget by clicking on the large black\"connect\" button twice, once on the main screen and then second on the pop-up window that will appear immediately after that. (You will only have to \"connect\" the widgets for the first applet you make. After that the widgets will already connected to your IFTTT account.) Click on the large red \"button press\" box Click on the black \"+that\" text Enter \"Webhooks\" in the search field and click on the Webhooks app Connect the Webhooks app Select the blue \"Make a Web Request\" box Now you will have a blank web request template to complete. Screenshot below is an example of a completed recipe for eating soon IFTTT action. There are four parts you will need to fill in, and they are described below the screenshot. URL https://yoursite.herokuapp.com/api/v1/treatments.json (for all IFTTT recipes that are NOT remote overrides...so things like cannula changes, sensor changes, pump battery changes, etc.) Change the \"yoursite\" to your actual site's info. Method The method will be POST Content Type The content type will be application/json . Body The content of the body will depend on the action that you would like this particular button press to perform. While many recipes are available, any recipe that log carbs to NS will only display the carbs in Nightscout...Loop will not \"use\" those carbs in treatment or prediction math. The display of carbs in NS though may still be helpful for remote care givers to leave an indication that a low is being noticed and treated. Some sample content for actions that may be useful in Loop: Pump Site Change {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Site Change\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"} CGM Sensor Start {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Sensor Start\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"} Note {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Note\", \"notes\": \"Hi mom, please don't text me for a bit. I'm taking a test.\", \"secret\": \"your_hashed_api_goes_here!!!\"} Special note for IFTTT to set a Remote Override with dev branch Triggering a remote override with IFTTT takes a couple considerations; 1. You have followed the directions for setting up remote overrides in Nightscout already. 2. Remote overrides will use https://yoursite.herokuapp.com/api/v2/notifications/loop for the URL line of the applet. Notice that is different from the other type of applets' URL. 3. The Body message of the applet needs to match the override already programmed in Loop app; the reason, reasonDisplay, and duration all need to match what is preset in your Loop app. The \"duration\" is giving in minutes in the body message (vs hours in Loop), and if the override is one that is \"enabled indefinitely\" then the duration is \"infinite\". The \"reason\" is the name of the override but NO EMOJI, and the \"reasonDisplay\" is the override name with the emoji. Check out the samples Body messages for overrides below. You will have to edit your body messages to match your reason and reasonDisplay. The target range and duration of the override does not need to be specified. Body message for override named \"hormones\" {\"eventType\": \"Temporary Override\", \"reason\": \"hormones\", \"reasonDisplay\": \"\ud83e\udddf\u200d\u2640\ufe0f hormones\", \"secret\": \"your_hashed_api_goes_here!!!\"} Body message for override named \"running\" {\"eventType\": \"Temporary Override\", \"reason\": \"running\", \"reasonDisplay\": \"\ud83c\udfc3\u200d\u2640\ufe0f running\", \"secret\": \"your_hashed_api_goes_here!!!\"} Body message for override named \"Low Treatment\" {\"eventType\": \"Temporary Override\", \"reason\": \"Low Treatment\", \"reasonDisplay\": \"\ud83c\udf6c Low Treatment\", \"secret\": \"your_hashed_api_goes_here!!!\"} Body message to cancel any override {\"eventType\": \"Temporary Override Cancel\", \"secret\": \"your_hashed_api_goes_here!!!\"} Click the Create Action button on the bottom of the screen when you finish. Now is your chance to change the title of your applet now to something meaningful. You can turn on notifications, too, using the slider shown. If you turn on the notifications, you will get an alert on your phone and pebble watch when the button press has been successfully deployed. Finish the IFTTT button by clicking on the Finish button that appears. Repeat the setup for new applets for as many automated actions/overrides as you would like to setup. Step 3: Enable IFTTT in your Nightscout site \u2301 Now that we have cool applets made, we need to give Nightscout some information so that it will accept commands from our applets. It's pretty simple to do...just a couple additions to your Heroku settings. Find your Maker Key by going to your IFTTT account icon in upper right corner, choose \"My services\" and then click on the Webhooks service, settings. You will see your Maker Key as the last part of the URL after the use/ ; copy and paste that last part (the red circled part as shown) Login to your Nightscout site host (azure or heroku) and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line. Step 4: Install IFTTT app on your iPhone/Android \u2301 Now that all the hard work is done, we can take easy street and just add that work to the phone via the IFTTT app. By accessing the IFTTT widget on your iPhone, you'll be able to easily and quickly access the useful buttons you've just created. Download the IFTTT app on your phone and log in using your IFTTT account. For iPhone users, if you swipe right from your iPhone's home screen, you will have the Today view showing. Scroll to the bottom, click \"edit\". This should show a list of existing widgets, followed by a list of \"more widgets\" with green + signs. Click on the IFTTT's green circle and the widget will be moved to the top, active widgets area. You can hold your finger on the three left lines of the IFTTT widget row to drag it to the top of your widget panel, if you prefer to have it as the top-most widget. If you end up with more than four IFTTT applets, they will appear in reverse-order of when they were created...which may not be the same as you'd prefer them to appear on your widget bar. If you'd like to reorder them: go into your iPhone's IFTTT app click on My Applets click on the gear icon in upper left of screen click on Widgets click on the pencil icon in upper right of screen click and hold the three lines that appear on the right side of the widget that you want to move. Drag the widget to the order in the list that you'd like it to appear in your widget quickscreen. Extra Credit: Alexa integration \u2301 Since you have IFTTT/Maker requests working, you can get it to work with anything that supports IFTTT, including Alexa. You will need to add \"alexa\" to your ENABLE line in your Heroku settings. And then repeat the steps above, but instead of using \"ButtonWidget\" service we started with earlier (the \"+if\" part of the setup)...you will use the \"AmazonAlexa\" service. Alexa requests do not need underscores, FYI.","title":"IFTTT"},{"location":"nightscout/ifttt/#ifttt-integration","text":"If This, Then That (IFTTT) is a useful Nightscout integration. By using IFTTT, you can have single button presses on your iPhone that will set an override, log a cannula change, log a sensor change and much more.","title":"IFTTT Integration"},{"location":"nightscout/ifttt/#step-1-get-your-api-secret-hash","text":"First we need to gather one thing called your \"hashed API Secret\". In your internet browser, open a \"console\" window while viewing your Nightscout site. Make sure you have \"authenticated\" your site by using your API secret in the Nightscout settings area (hint: if you see a little padlock in the upper left corner of the site, you haven't authenticated it). Refresh the site and your hashed secret key will be shown as \"apisecrethash: \"xxxxxxxxxx...\"\" For Safari users on Mac , you can open the console window by selecting \"Develop\" from the Safari top menu, and then \"Show Page Source\" (if you do not see \"Develop\" in the top menu, activate it by going to Safari > Preferences... > Advanced, and checking the \"Show Develop menu in menu bar\" option). If you're having problems seeing the apisecrethash, click the little grey triangle next to the \"status isAuthenticated\" line and the objects below it will display (see screenshot). Your hashed API secret can be copied and pasted from that line, as shown below. Save that somewhere easy to get to again, because you will be using it later. For Chrome users , the console window is found through the View >> Developer >> View Source. Click on the Console tab and scroll to find the \"status isAuthenticated\" row to find your apisecrethash. Copy your API hash to somewhere you can retreive it again, we will be copy/pasting it in Step 2.","title":"Step 1: Get your API Secret Hash"},{"location":"nightscout/ifttt/#step-2-create-your-applets","text":"IFTTT calls their little actions that you'll create an \"applet\". I have no idea why. But, I will go along and use their terminology so we are all consistent. We are basically interested in creating applets that will be buttons on your phone to do cool things in Nightscout. So, you'll have a button that will log when you changed your sensor last...letting you see in Nightscout easily just how old a sensor is at any given time. Or you can create a button that will turn on an \"exercise\" override that you already programmed into your kid's Loop app. So, let's make our first applet (aka button). Get an IFTTT account Login to your IFTTT.com account and select click this link to get to the page for creating your first \"New Applet\". (You can also get to this Applet creation page by selecting your Account icon in the upper right of the IFTTT website, then clicking on \"Create\".) In the screen that appears, click on the black \"+this\" part of the screen In the next screen, type \"button\" in the search field and then click on the red box labelled \"ButtonWidget\" Connect the button widget by clicking on the large black\"connect\" button twice, once on the main screen and then second on the pop-up window that will appear immediately after that. (You will only have to \"connect\" the widgets for the first applet you make. After that the widgets will already connected to your IFTTT account.) Click on the large red \"button press\" box Click on the black \"+that\" text Enter \"Webhooks\" in the search field and click on the Webhooks app Connect the Webhooks app Select the blue \"Make a Web Request\" box Now you will have a blank web request template to complete. Screenshot below is an example of a completed recipe for eating soon IFTTT action. There are four parts you will need to fill in, and they are described below the screenshot. URL https://yoursite.herokuapp.com/api/v1/treatments.json (for all IFTTT recipes that are NOT remote overrides...so things like cannula changes, sensor changes, pump battery changes, etc.) Change the \"yoursite\" to your actual site's info. Method The method will be POST Content Type The content type will be application/json . Body The content of the body will depend on the action that you would like this particular button press to perform. While many recipes are available, any recipe that log carbs to NS will only display the carbs in Nightscout...Loop will not \"use\" those carbs in treatment or prediction math. The display of carbs in NS though may still be helpful for remote care givers to leave an indication that a low is being noticed and treated. Some sample content for actions that may be useful in Loop: Pump Site Change {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Site Change\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"} CGM Sensor Start {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Sensor Start\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"} Note {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Note\", \"notes\": \"Hi mom, please don't text me for a bit. I'm taking a test.\", \"secret\": \"your_hashed_api_goes_here!!!\"} Special note for IFTTT to set a Remote Override with dev branch Triggering a remote override with IFTTT takes a couple considerations; 1. You have followed the directions for setting up remote overrides in Nightscout already. 2. Remote overrides will use https://yoursite.herokuapp.com/api/v2/notifications/loop for the URL line of the applet. Notice that is different from the other type of applets' URL. 3. The Body message of the applet needs to match the override already programmed in Loop app; the reason, reasonDisplay, and duration all need to match what is preset in your Loop app. The \"duration\" is giving in minutes in the body message (vs hours in Loop), and if the override is one that is \"enabled indefinitely\" then the duration is \"infinite\". The \"reason\" is the name of the override but NO EMOJI, and the \"reasonDisplay\" is the override name with the emoji. Check out the samples Body messages for overrides below. You will have to edit your body messages to match your reason and reasonDisplay. The target range and duration of the override does not need to be specified. Body message for override named \"hormones\" {\"eventType\": \"Temporary Override\", \"reason\": \"hormones\", \"reasonDisplay\": \"\ud83e\udddf\u200d\u2640\ufe0f hormones\", \"secret\": \"your_hashed_api_goes_here!!!\"} Body message for override named \"running\" {\"eventType\": \"Temporary Override\", \"reason\": \"running\", \"reasonDisplay\": \"\ud83c\udfc3\u200d\u2640\ufe0f running\", \"secret\": \"your_hashed_api_goes_here!!!\"} Body message for override named \"Low Treatment\" {\"eventType\": \"Temporary Override\", \"reason\": \"Low Treatment\", \"reasonDisplay\": \"\ud83c\udf6c Low Treatment\", \"secret\": \"your_hashed_api_goes_here!!!\"} Body message to cancel any override {\"eventType\": \"Temporary Override Cancel\", \"secret\": \"your_hashed_api_goes_here!!!\"} Click the Create Action button on the bottom of the screen when you finish. Now is your chance to change the title of your applet now to something meaningful. You can turn on notifications, too, using the slider shown. If you turn on the notifications, you will get an alert on your phone and pebble watch when the button press has been successfully deployed. Finish the IFTTT button by clicking on the Finish button that appears. Repeat the setup for new applets for as many automated actions/overrides as you would like to setup.","title":"Step 2: Create your \"Applets\""},{"location":"nightscout/ifttt/#step-3-enable-ifttt-in-your-nightscout-site","text":"Now that we have cool applets made, we need to give Nightscout some information so that it will accept commands from our applets. It's pretty simple to do...just a couple additions to your Heroku settings. Find your Maker Key by going to your IFTTT account icon in upper right corner, choose \"My services\" and then click on the Webhooks service, settings. You will see your Maker Key as the last part of the URL after the use/ ; copy and paste that last part (the red circled part as shown) Login to your Nightscout site host (azure or heroku) and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line.","title":"Step 3: Enable IFTTT in your Nightscout site"},{"location":"nightscout/ifttt/#step-4-install-ifttt-app-on-your-iphoneandroid","text":"Now that all the hard work is done, we can take easy street and just add that work to the phone via the IFTTT app. By accessing the IFTTT widget on your iPhone, you'll be able to easily and quickly access the useful buttons you've just created. Download the IFTTT app on your phone and log in using your IFTTT account. For iPhone users, if you swipe right from your iPhone's home screen, you will have the Today view showing. Scroll to the bottom, click \"edit\". This should show a list of existing widgets, followed by a list of \"more widgets\" with green + signs. Click on the IFTTT's green circle and the widget will be moved to the top, active widgets area. You can hold your finger on the three left lines of the IFTTT widget row to drag it to the top of your widget panel, if you prefer to have it as the top-most widget. If you end up with more than four IFTTT applets, they will appear in reverse-order of when they were created...which may not be the same as you'd prefer them to appear on your widget bar. If you'd like to reorder them: go into your iPhone's IFTTT app click on My Applets click on the gear icon in upper left of screen click on Widgets click on the pencil icon in upper right of screen click and hold the three lines that appear on the right side of the widget that you want to move. Drag the widget to the order in the list that you'd like it to appear in your widget quickscreen.","title":"Step 4: Install IFTTT app on your iPhone/Android"},{"location":"nightscout/ifttt/#extra-credit-alexa-integration","text":"Since you have IFTTT/Maker requests working, you can get it to work with anything that supports IFTTT, including Alexa. You will need to add \"alexa\" to your ENABLE line in your Heroku settings. And then repeat the steps above, but instead of using \"ButtonWidget\" service we started with earlier (the \"+if\" part of the setup)...you will use the \"AmazonAlexa\" service. Alexa requests do not need underscores, FYI.","title":"Extra Credit: Alexa integration"},{"location":"nightscout/new_user/","text":"New Nightscout Users \u2301 Is Nightscout Required for Loop? Nightscout is not required, but is recommended for Loop. A Nightscout site provides a dashboard for remote viewing of Loop actions including the temporary basal rates Loop is setting, the current insulin on board, or a recent bolus and carb entry A Nightscout site provides reports for retrospective review of your settings You will want a Nightscout site: If you are a parent of a little Loop user If you want to see Loop's actions anywhere other than the Looper's iPhone If you want to ask a mentor for help adjusting your settings Setup Nightscout \u2301 Please visit The Nightscout site to read the introductory material and then proceed to the Installation page for directions on how to set up your new Nightscout website. Add Loop Variables to Nightscout \u2301 There are a few Loop-specific variables you should configure to get the most out of your Nigghtscout site. Follow the instructions to retrofit an existing Nightscout site . Add Nightscout to Loop \u2301 Once you finish setting up your new Nightscout site, don't forget to enter the website into your Loop settings ! This way Loop will have access to your Nightscout site to upload all the wonderful data. Troubleshooting \u2301 If your Nightscout site is not showing CGM (and Loop, if you are Looping) data within about 10 minutes of finishing your setup, then please follow these steps here to troubleshoot.","title":"Brand New NS"},{"location":"nightscout/new_user/#new-nightscout-users","text":"Is Nightscout Required for Loop? Nightscout is not required, but is recommended for Loop. A Nightscout site provides a dashboard for remote viewing of Loop actions including the temporary basal rates Loop is setting, the current insulin on board, or a recent bolus and carb entry A Nightscout site provides reports for retrospective review of your settings You will want a Nightscout site: If you are a parent of a little Loop user If you want to see Loop's actions anywhere other than the Looper's iPhone If you want to ask a mentor for help adjusting your settings","title":"New Nightscout Users"},{"location":"nightscout/new_user/#setup-nightscout","text":"Please visit The Nightscout site to read the introductory material and then proceed to the Installation page for directions on how to set up your new Nightscout website.","title":"Setup Nightscout"},{"location":"nightscout/new_user/#add-loop-variables-to-nightscout","text":"There are a few Loop-specific variables you should configure to get the most out of your Nigghtscout site. Follow the instructions to retrofit an existing Nightscout site .","title":"Add Loop Variables to Nightscout"},{"location":"nightscout/new_user/#add-nightscout-to-loop","text":"Once you finish setting up your new Nightscout site, don't forget to enter the website into your Loop settings ! This way Loop will have access to your Nightscout site to upload all the wonderful data.","title":"Add Nightscout to Loop"},{"location":"nightscout/new_user/#troubleshooting","text":"If your Nightscout site is not showing CGM (and Loop, if you are Looping) data within about 10 minutes of finishing your setup, then please follow these steps here to troubleshoot.","title":"Troubleshooting"},{"location":"nightscout/overview/","text":"Overview \u2301 Nightscout (NS) is an excellent tool for remotely viewing Loop's actions. It allows for easy remote monitoring of Loop activities, troubleshooting of Loop errors, history of CGM, carbs, boluses, & temp basals, reports analyzing data trends and patterns. There is a Nightscout app in your iPhone App Store, or you can use a web browser to view the data. Setting up Nightscout is free and fairly quick. Once set up, the site can be accessed by anyone that you share your unique Nightscout URL with. Nightscout is highly recommended for Loop users, especially those using Loop as caregivers to t1ds. Nightscout displays are often the easiest way to troubleshoot Loop settings, if you are having problems and seeking input from others. Below is some discussion about the general Nightscout display, as well as some Loop-specific display information. Blood Glucose \u2301 Your blood glucose (BG) readings from your CGM are shown in green, yellow, or red in the main graph area of NS. You can adjust your high and low BG targets in NS (when NS alerts will start for high/low BGs), but those will not affect your Loop performance. Loop only uses the BG targets given in the Loop app settings. The main screen of BGs is displaying the time duration you have selected (in the example above, 12 hours of BG history). The bottom of the screen shows the last 48-hours of BG trends. You can scan backward by dragging the bottom timeline to the left, if you want to review specific Loop actions or data in the last two days. SAGE, CAGE, BAGE pills \u2301 The SAGE, CAGE, and BAGE pills are for Sensor Age, Cannula Age, and (pump) Battery Age. These optional pills track the time since your CGM sensor, Pump site, and Pump battery were last changed. You can set up custom alerts to remind you when it is time to change the devices, or simply use the visuals to keep track of your particular timing for site/sensor changes. These fields will not auto-update from pump or CGM devices, instead you will have to update them using Nightscout Careportal so that the pill information is accurate. Carbs \u2301 Carbs are automatically uploaded to NS by the Loop app. The amount of carbs on board (active carbs or COB) can be seen by clicking the Loop pill. The size of a white carb dot on the graph is proportional to the amount of carbs entered...bigger meals get bigger dots. Loop does not read carbs from NS for use in looping calculations, it only uploads carbs to NS that have been entered in the Loop app. Boluses \u2301 Insulin boluses are also automatically uploaded to NS by the Loop app. The bolus is shown as a filled-in blue lower-half of the dot, and the specific amount of the bolus is also shown. There may be a slight delay between when the carbs for a meal are uploaded to NS to when the meal bolus appears. This is because depending on the pump model and size of bolus, the bolus may take a few minutes to actually be administered then Loop has to perform a pump read to verify the reservoir volume has decreased (i.e., the bolus was given). As shown in the example above, the meal carbs have been uploaded, but the bolus delivery is still in progress. Insulin on board (active insulin or IOB) is also shown in the Loop pill. Temp Basals \u2301 Within your NS profile, you will enter in the scheduled basal for your Loop user. This is not automatically updated when you update the Loop app or your pump; you will have to manually update your basal profile in your NS site if you change your basal profile in Loop and/or pump. (Note: The dev branch does now update NS with the basal schedule from Loop, but dev is considered generally less stable than the master branch). If you don't update the NS basal profile, it doesn't cause any problems in Loop function...you simply won't have accurate VISUAL representation of high/low temp basals within NS. The dashed blue line represents the scheduled basal profile (as entered in your NS profile). The solid blue lines indicate the actual basal amounts set for a given time...so as Loop sets temp basals higher or lower than your scheduled basal rate, the solid blue line will jump above or below your dashed blue line. There is a slight delay (up to 2-5 minutes) in the rendering of basal changes on the blue lines, so if you want the accurate current basal rate, you can check the Loop pill. Predicted BG \u2301 The purple line to the right of the BG is Loop's predicted BG. Watching the behavior of that purple line can help you understand why Loop is making decisions regarding high or low temps. You can read more on that topic in the Algorithm section of these docs. Loop pill \u2301 The Loop pill is the little display box which when hovered over, or clicked, will provide additional information about recent Loop activities and status. Information included is the last time Loop ran, the temp basal set, IOB, and COB. Looking at the Loop pill is a quick method for assessing if you loop is currently active, as well. Loop Pill status indicator symbols X Error in Loop \u03d5 Recommending basal, but not enacting (open loop or pump suspended) \u2301 Enacted a new temp basal \u21bb Loop is continuing with last temp basal, no change \u26a0 Warning indicating Loop is either red or has failed to upload to Nightscout for a longer period of time. Mouseover or Touch the Loop pill to view a tool tip containing one or more of the latest status messages. The most up-to-date NS also includes information in the Loop pill for the minimum and maximum predicted BG, eventual and predicted BG.","title":"Overview"},{"location":"nightscout/overview/#overview","text":"Nightscout (NS) is an excellent tool for remotely viewing Loop's actions. It allows for easy remote monitoring of Loop activities, troubleshooting of Loop errors, history of CGM, carbs, boluses, & temp basals, reports analyzing data trends and patterns. There is a Nightscout app in your iPhone App Store, or you can use a web browser to view the data. Setting up Nightscout is free and fairly quick. Once set up, the site can be accessed by anyone that you share your unique Nightscout URL with. Nightscout is highly recommended for Loop users, especially those using Loop as caregivers to t1ds. Nightscout displays are often the easiest way to troubleshoot Loop settings, if you are having problems and seeking input from others. Below is some discussion about the general Nightscout display, as well as some Loop-specific display information.","title":"Overview"},{"location":"nightscout/overview/#blood-glucose","text":"Your blood glucose (BG) readings from your CGM are shown in green, yellow, or red in the main graph area of NS. You can adjust your high and low BG targets in NS (when NS alerts will start for high/low BGs), but those will not affect your Loop performance. Loop only uses the BG targets given in the Loop app settings. The main screen of BGs is displaying the time duration you have selected (in the example above, 12 hours of BG history). The bottom of the screen shows the last 48-hours of BG trends. You can scan backward by dragging the bottom timeline to the left, if you want to review specific Loop actions or data in the last two days.","title":"Blood Glucose"},{"location":"nightscout/overview/#sage-cage-bage-pills","text":"The SAGE, CAGE, and BAGE pills are for Sensor Age, Cannula Age, and (pump) Battery Age. These optional pills track the time since your CGM sensor, Pump site, and Pump battery were last changed. You can set up custom alerts to remind you when it is time to change the devices, or simply use the visuals to keep track of your particular timing for site/sensor changes. These fields will not auto-update from pump or CGM devices, instead you will have to update them using Nightscout Careportal so that the pill information is accurate.","title":"SAGE, CAGE, BAGE pills"},{"location":"nightscout/overview/#carbs","text":"Carbs are automatically uploaded to NS by the Loop app. The amount of carbs on board (active carbs or COB) can be seen by clicking the Loop pill. The size of a white carb dot on the graph is proportional to the amount of carbs entered...bigger meals get bigger dots. Loop does not read carbs from NS for use in looping calculations, it only uploads carbs to NS that have been entered in the Loop app.","title":"Carbs"},{"location":"nightscout/overview/#boluses","text":"Insulin boluses are also automatically uploaded to NS by the Loop app. The bolus is shown as a filled-in blue lower-half of the dot, and the specific amount of the bolus is also shown. There may be a slight delay between when the carbs for a meal are uploaded to NS to when the meal bolus appears. This is because depending on the pump model and size of bolus, the bolus may take a few minutes to actually be administered then Loop has to perform a pump read to verify the reservoir volume has decreased (i.e., the bolus was given). As shown in the example above, the meal carbs have been uploaded, but the bolus delivery is still in progress. Insulin on board (active insulin or IOB) is also shown in the Loop pill.","title":"Boluses"},{"location":"nightscout/overview/#temp-basals","text":"Within your NS profile, you will enter in the scheduled basal for your Loop user. This is not automatically updated when you update the Loop app or your pump; you will have to manually update your basal profile in your NS site if you change your basal profile in Loop and/or pump. (Note: The dev branch does now update NS with the basal schedule from Loop, but dev is considered generally less stable than the master branch). If you don't update the NS basal profile, it doesn't cause any problems in Loop function...you simply won't have accurate VISUAL representation of high/low temp basals within NS. The dashed blue line represents the scheduled basal profile (as entered in your NS profile). The solid blue lines indicate the actual basal amounts set for a given time...so as Loop sets temp basals higher or lower than your scheduled basal rate, the solid blue line will jump above or below your dashed blue line. There is a slight delay (up to 2-5 minutes) in the rendering of basal changes on the blue lines, so if you want the accurate current basal rate, you can check the Loop pill.","title":"Temp Basals"},{"location":"nightscout/overview/#predicted-bg","text":"The purple line to the right of the BG is Loop's predicted BG. Watching the behavior of that purple line can help you understand why Loop is making decisions regarding high or low temps. You can read more on that topic in the Algorithm section of these docs.","title":"Predicted BG"},{"location":"nightscout/overview/#loop-pill","text":"The Loop pill is the little display box which when hovered over, or clicked, will provide additional information about recent Loop activities and status. Information included is the last time Loop ran, the temp basal set, IOB, and COB. Looking at the Loop pill is a quick method for assessing if you loop is currently active, as well. Loop Pill status indicator symbols X Error in Loop \u03d5 Recommending basal, but not enacting (open loop or pump suspended) \u2301 Enacted a new temp basal \u21bb Loop is continuing with last temp basal, no change \u26a0 Warning indicating Loop is either red or has failed to upload to Nightscout for a longer period of time. Mouseover or Touch the Loop pill to view a tool tip containing one or more of the latest status messages. The most up-to-date NS also includes information in the Loop pill for the minimum and maximum predicted BG, eventual and predicted BG.","title":"Loop pill"},{"location":"nightscout/pebble/","text":"Pebble Watchface \u2301 The Pebble Watchface called SkyLoop Predict can be used with either Loop or OpenAPS systems. You will need to have a Nightscout website setup and integrated in order for the watchface to work. Simply use your Pebble app to search for the watchface and install it. In the watchface settings, enter your Nightscout URL in the Data Endpoint field, select Loop for the system, and enter iob in the T1 Name field. By entering iob , the watchface will display the iob on the watchface. In addition to the information displayed on the main watchface screen, shaking your wrist will bring up information about the pump battery and reservoir levels.","title":"Pebble"},{"location":"nightscout/pebble/#pebble-watchface","text":"The Pebble Watchface called SkyLoop Predict can be used with either Loop or OpenAPS systems. You will need to have a Nightscout website setup and integrated in order for the watchface to work. Simply use your Pebble app to search for the watchface and install it. In the watchface settings, enter your Nightscout URL in the Data Endpoint field, select Loop for the system, and enter iob in the T1 Name field. By entering iob , the watchface will display the iob on the watchface. In addition to the information displayed on the main watchface screen, shaking your wrist will bring up information about the pump battery and reservoir levels.","title":"Pebble Watchface"},{"location":"nightscout/pushover/","text":"Remote notifications \u2301 While Loop app currently sends notifications locally on Loop user's iPhone, parents and caregivers likely want those messages on their phones, too. We can achieve this functionality through a combination of Nightscout, IFTTT, Google, and Pushover. Traditionally, most people may already know of Pushover alerts through their NS site. The old Loop docs had set up for how to add your PUSHOVER_ANNOUNCEMENT_KEY , PUSHOVER_API_TOKEN , and PUSHOVER_USER_KEY in your Heroku settings to get notifications on the non-looping phones of parents and caregivers. The drawback for that method is that you could not necessarily fine-tune the alerts (maybe you wanted battery alarms on your NS website, but not get pushovers for them...a bit hard to separate out the environments that way) and Pushover had a demanding acknowledgment requirement. If you failed to acknowledge an alert, you may end up getting alarm fatigue fairly quickly as the alarm repeated itself. Using Pushover THROUGH IFTTT however, we can improve the possible notifications and who receives which ones. For example, a teenage Looper may want notifications when his/her pump site needs changing and when his/her Dexcom is about to expire in the next day. S/he already gets local notifications on his/her phone via Loop for low reservoir volumes, low pump battery, and Loop failures. Dexcom app provides high/low BG notifications locally, too. If s/he were to get those same alarms via Pushover, s/he would inevitably get alarm fatigue. A remotely-monitoring parent may want additional information, like a pushover alert when the school nurse boluses for lunch, as well as Loop failures, low iPhone battery level for the child, low pump battery, and other such information that might be useful. Perhaps there's also an emergency contact person that you only want to get high/low BG alerts...you can set that up as well quite easily. The basic concept is that NS puts out an event that triggers the IFTTT service called Webhooks (old name was \"Maker Webhooks\" hence you may see references to \"maker\" in NS docs). Actually, there are several types of events that NS has programmed in all ready to use in IFTTT. For this setup, we are going to use the most general logging event called ns-event . You'll get all the alarms and notifications logged, and then you can decide in subsequent steps which ones you'd actually like to send to your phone for pushover notification. As a brief roadmap for what we are going to do: Get necessary accounts setup Add a folder to your Google Drive Make an IFTTT applet to log NS events to your Google Spreadsheets Enable NS to work with that new IFTTT applet Make an IFTTT applet to send Pushover alert when the Google Spreadsheet is updated Get Prepped \u2301 If you don't already have these steps done, you will need them. Skip any that you already have done. Setup a Nightscout site Get an IFTTT account Get a Pushover Account Get a Google Account Download the Pushover app onto your phone, and any other phone you'd like to receive Pushover alerts Download the IFTTT app onto your phone, and any other phone you'd like to use IFTTT applets on Login to the Pushover and IFTTT apps with your login information Add a Google Drive folder \u2301 Login to your Google account and select Google Drive Click on the blue \"New\" button and create a new folder named IFTTT. Double click on the newly created IFTTT folder, select the blue \"New\" button again, and create a new subfolder called \"Nightscout-Alarms\" This IFTTT/Nightscout-Alarms folder will eventually contain numerous Google Spreadsheets, one for each NS alarm or information that is logged. As new alarms are triggered, the IFTTT applet we are about to write will add a row to the appropriate spreadsheet logging the time of the alarm and any other reported details that go with the entry. For now though, your drive will be blank...screenshot below just to give you an idea of where we are going. Make 1st IFTTT Applet to Log NS Alarms \u2301 Login to your IFTTT.com account and select the \"New Applet\" button. In the screen that appears, click on the blue \"+this\" part of the screen {align=\"center\"}{width=\"550\"} In the next screen, type \"webhooks\" in the search field and then click on the blue connect button If this is the first time you are using IFTTT Webhooks service, you will have a \"Connect\" button to select. If you already have IFTTT applets using Webhooks, you won't see this screen...just move to the next bullet. Click on the \"receive a web request\" blue box, and then fill in the Event Name as ns-event and then press the \"Create trigger\" button. (Side note: the event name used here corresponds to the triggers discussed above for core events that NS already has integrated for IFTTT users. If you want to, instead, use the other triggers such as ns-warn or ns-urgent, you can. This example is using the most general trigger so that the options are wider for most users.) Click on the blue \"+that\" text {align=\"center\"}{width=\"550\"} Enter google in the search field and click on the Google Sheets icon {align=\"center\"}{width=\"550\"} Select the green \"Add row to spreadsheet\" box Delete the contents of the \"Spreadsheet Name\" and \"Drive folder path\". For the \"Spreadsheet Name\", click the \"Add Ingredient\" button and select the \"Value1\". For the \"Drive folder path\", enter IFTTT/Nightscout-Alarms . You do not have to modify the \"Formatted row\" box's contents. Click the \"Create action\" button at the bottom. Turn off the toggle for receiving notifications when the applet runs, and then click the Finish button You'll now have the finished IFTTT applet that will cause a row to be added to a Google spreadsheet...tracking all your NS notifications and alarms. If it is the first time that alarm has been logged, the applet will also create the spreadsheet itself. After a while, your IFTTT/Nightscout-Alarms folder will start to look like the screenshot posted above with numerous spreadsheets for each alarm type. Enable IFTTT Webhooks in your Nightscout site \u2301 Info If you already have created IFTTT buttons previously to work with your NS site, you can skip this section. If those buttons are working, then you've already added your MAKER_KEY and \"maker\" to your ENABLE line in Heroku. To actually make that first applet work, we need to enter a \"Maker Key\" to get NS and IFTTT talking to each other. Find your Maker Key by going to your IFTTT account, Services and then clicking on Webhooks. (Your screen may not have as many services showing; the example account below just happens to already use several services.) You will see your Maker Key as the last part of the URL; copy that last part (the red circled part) Navigate to your Heroku account's settings tab, \"reveal config vars\" and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line. Make 2nd IFTTT Applet to send Pushover notifications \u2301 In your IFTTT account, select the \"New Applet\" button. In the screen that appears, click on the blue \"+this\" part of the screen {align=\"center\"}{width=\"550\"} In the next screen, type \"google\" in the search field and then click on the \"Google Sheets\" logo. {align=\"center\"}{width=\"550\"} Click on the \"New row added to spreadsheet\" as the trigger. Enter the following information: Folder path is IFTTT/Nightscout-Alarms and for the filename you are going to enter the name of the particular NS alarm or information that you would like to get pushover alerts for. Click on the \"Create trigger\" button to save the trigger. Info This applet can't be created unless your filename (alarm spreadsheet) already exists. If your 1st applet we created above hasn't run for a long time, the spreadsheets may not exist yet because the alarms haven't triggered. You have two options...(1) manually create the file in your Google Drive so that you can finish the applet now or (2) wait several days/weeks for the alarms to happen and that will automatically create the files in your Google drive. If you choose option 1, here's a partial list of some of the filenames you could create in advance: Loop isn't looping Cannula age 48 hours Cannula age 72 hours Meal Bolus Warning, Pump Reservoir Low Warning Uploader Battery is Low Temporary Override Depending on your alert levels you specified in NS, some of the hours in the titles may vary to match your settings Click on the blue \"+that\" text {align=\"center\"}{width=\"550\"} Enter pushover in the search field and click on the Pushover icon. If this is your first time linking your IFTTT to Pushover, you will be prompted to enter your Pushover account login and allow IFTTT access. This only needs to be done once. Select the \"Send a Pushover notification\" box Delete the contents of the \"Title\" and \"Message\" and \"URL\" boxes. For the Title, click the \"Add Ingredient\" button and add ColumnC . For the \"Message\", click the \"Add Ingredient\" button and add the values of various columns from your spreadsheet for the information you would like to include. For the alerts: ColumnC contains the alarm name, ColumnA is the date/time of the alarm, and ColumnD has more detailed information about the info/alarm. This is a pretty decent recipe to follow to get the useful information in your notification. Select the \"Message Priority\" that you would like for this particular alarm type. Select the \"Device\" that you would like to receive this particular alarm type. The devices listed will be all your devices that have Pushover app installed and logged into. Click \"Create Action\" when you are finished. You'll now have made the IFTTT applet that will cause a Pushover notification to a particular device for a particular NS alarm, once the first applet records the alarm in the google spreadsheet. Keep the \"receive notification when this Applet runs\" toggled off and click the Finish button. Revisit Nightscout Alert Levels \u2301 Putting all these notifications together may cause you to want to revisit the alert levels you have set in your Heroku settings. Here's a short summary of NS for the looping-related alerts (Note: the last row, Upbat, is the Looping iPhone battery level for Loop users; or the rig's battery level for OpenAPS users.) If you'd like some of these alarms for your site and don't currently have them activated (they are all off by default unless specifically turned on), the lines you'd need to add are in the last column. If you like the default values of the WARN and/or URGENT, you don't have to add those extra lines...just the line to enable the alerts will be sufficient. SETTING DEFAULT WARN DEFAULT URGENT HEROKU SETTINGS CAGE 48 72 CAGE_ENABLE_ALERTS = true CAGE_WARN=XX CAGE_URGENT=XX SAGE 164 168 SAGE_ENABLE_ALERTS = true SAGE_WARN=XX SAGE_URGENT=XX IAGE 48 72 IAGE_ENABLE_ALERTS = true IAGE_WARN=XX IAGE_URGENT=XX LOOP 30 60 LOOP_ENABLE_ALERTS = true LOOP_WARN=XX LOOP_URGENT=XX OPENAPS 30 60 OPENAPS_ENABLE_ALERTS = true OPENAPS_WARN=XX OPENAPS_URGENT=XX PUMP_CLOCK 30 60 PUMP_ENABLE_ALERTS = true PUMP_WARN_CLOCK=XX PUMP_URGENT_CLOCK=XX PUMP_RES 10 5 PUMP_ENABLE_ALERTS = true PUMP_WARN_RES=XX PUMP_URGENT_RES=XX PUMP_BATT_P 30 20 PUMP_ENABLE_ALERTS = true PUMP_WARN_BATT_P=XX PUMP_URGENT_BATT_P=XX PUMP_BATT_V 1.35 1.30 PUMP_ENABLE_ALERTS = true PUMP_WARN_BATT_V=XX PUMP_URGENT_BATT_V=XX UPBAT 30 20 UPBAT_ENABLE_ALERTS = true UPBAT_WARN=XX UPBAT_URGENT=XX Final notes \u2301 You can use other notification services than Pushover in the last part of the second applet. For example, you could use the SMS service to send text notifications to your iPhone instead of Pushover. The downside for that is that the SMS service is limited to 100 message each month...some users may exceed that pretty easily. Another alternative notification would be IFTTT's own Notification service. This would work well, but does not have the ability to distinguish between devices the way Pushover allows. If you use IFTTT's Notifications service, every phone using your IFTTT account will get the notices. To be clear, you do NOT need to have pushover on your ENABLE line nor have PUSHOVER_USER_KEY , PUSHOVER_API_TOKEN , or PUSHOVER_ANNOUNCEMENT_KEY entered into your Heroku settings in order for any of the above to work. This is not the same Pushover as NS has integrated into its code. This is actually through IFTTT services, you just need a Pushover account to link to during the 2nd applet setup. To create more notifications, simply repeat the steps for the 2nd applet you created, only this time use a new filename that corresponds to the spreadsheet tracking the alert you'd like notifications for. You'll end up with multiple applets of the dark blue type (the pushover notifiers) and only a single light blue (NS alarm general collector). Here are examples of the Meal Bolus and Temp Basal ns-event logging spreadsheets The 1st applet can only create up to 2000 active rows in a given spreadsheet. After that, the applet will automatically create a new spreadsheet. For most alarms, it may take quite some time to reach 2000 rows of info. For other alerts, such as temp basals being set, that may fill up rather fast for the average looper. You can either clean out the data rows periodically to make room, or update your filename in the 2nd applet periodically when a new spreadsheet is made.","title":"Remote Notifications"},{"location":"nightscout/pushover/#remote-notifications","text":"While Loop app currently sends notifications locally on Loop user's iPhone, parents and caregivers likely want those messages on their phones, too. We can achieve this functionality through a combination of Nightscout, IFTTT, Google, and Pushover. Traditionally, most people may already know of Pushover alerts through their NS site. The old Loop docs had set up for how to add your PUSHOVER_ANNOUNCEMENT_KEY , PUSHOVER_API_TOKEN , and PUSHOVER_USER_KEY in your Heroku settings to get notifications on the non-looping phones of parents and caregivers. The drawback for that method is that you could not necessarily fine-tune the alerts (maybe you wanted battery alarms on your NS website, but not get pushovers for them...a bit hard to separate out the environments that way) and Pushover had a demanding acknowledgment requirement. If you failed to acknowledge an alert, you may end up getting alarm fatigue fairly quickly as the alarm repeated itself. Using Pushover THROUGH IFTTT however, we can improve the possible notifications and who receives which ones. For example, a teenage Looper may want notifications when his/her pump site needs changing and when his/her Dexcom is about to expire in the next day. S/he already gets local notifications on his/her phone via Loop for low reservoir volumes, low pump battery, and Loop failures. Dexcom app provides high/low BG notifications locally, too. If s/he were to get those same alarms via Pushover, s/he would inevitably get alarm fatigue. A remotely-monitoring parent may want additional information, like a pushover alert when the school nurse boluses for lunch, as well as Loop failures, low iPhone battery level for the child, low pump battery, and other such information that might be useful. Perhaps there's also an emergency contact person that you only want to get high/low BG alerts...you can set that up as well quite easily. The basic concept is that NS puts out an event that triggers the IFTTT service called Webhooks (old name was \"Maker Webhooks\" hence you may see references to \"maker\" in NS docs). Actually, there are several types of events that NS has programmed in all ready to use in IFTTT. For this setup, we are going to use the most general logging event called ns-event . You'll get all the alarms and notifications logged, and then you can decide in subsequent steps which ones you'd actually like to send to your phone for pushover notification. As a brief roadmap for what we are going to do: Get necessary accounts setup Add a folder to your Google Drive Make an IFTTT applet to log NS events to your Google Spreadsheets Enable NS to work with that new IFTTT applet Make an IFTTT applet to send Pushover alert when the Google Spreadsheet is updated","title":"Remote notifications"},{"location":"nightscout/pushover/#get-prepped","text":"If you don't already have these steps done, you will need them. Skip any that you already have done. Setup a Nightscout site Get an IFTTT account Get a Pushover Account Get a Google Account Download the Pushover app onto your phone, and any other phone you'd like to receive Pushover alerts Download the IFTTT app onto your phone, and any other phone you'd like to use IFTTT applets on Login to the Pushover and IFTTT apps with your login information","title":"Get Prepped"},{"location":"nightscout/pushover/#add-a-google-drive-folder","text":"Login to your Google account and select Google Drive Click on the blue \"New\" button and create a new folder named IFTTT. Double click on the newly created IFTTT folder, select the blue \"New\" button again, and create a new subfolder called \"Nightscout-Alarms\" This IFTTT/Nightscout-Alarms folder will eventually contain numerous Google Spreadsheets, one for each NS alarm or information that is logged. As new alarms are triggered, the IFTTT applet we are about to write will add a row to the appropriate spreadsheet logging the time of the alarm and any other reported details that go with the entry. For now though, your drive will be blank...screenshot below just to give you an idea of where we are going.","title":"Add a Google Drive folder"},{"location":"nightscout/pushover/#make-1st-ifttt-applet-to-log-ns-alarms","text":"Login to your IFTTT.com account and select the \"New Applet\" button. In the screen that appears, click on the blue \"+this\" part of the screen {align=\"center\"}{width=\"550\"} In the next screen, type \"webhooks\" in the search field and then click on the blue connect button If this is the first time you are using IFTTT Webhooks service, you will have a \"Connect\" button to select. If you already have IFTTT applets using Webhooks, you won't see this screen...just move to the next bullet. Click on the \"receive a web request\" blue box, and then fill in the Event Name as ns-event and then press the \"Create trigger\" button. (Side note: the event name used here corresponds to the triggers discussed above for core events that NS already has integrated for IFTTT users. If you want to, instead, use the other triggers such as ns-warn or ns-urgent, you can. This example is using the most general trigger so that the options are wider for most users.) Click on the blue \"+that\" text {align=\"center\"}{width=\"550\"} Enter google in the search field and click on the Google Sheets icon {align=\"center\"}{width=\"550\"} Select the green \"Add row to spreadsheet\" box Delete the contents of the \"Spreadsheet Name\" and \"Drive folder path\". For the \"Spreadsheet Name\", click the \"Add Ingredient\" button and select the \"Value1\". For the \"Drive folder path\", enter IFTTT/Nightscout-Alarms . You do not have to modify the \"Formatted row\" box's contents. Click the \"Create action\" button at the bottom. Turn off the toggle for receiving notifications when the applet runs, and then click the Finish button You'll now have the finished IFTTT applet that will cause a row to be added to a Google spreadsheet...tracking all your NS notifications and alarms. If it is the first time that alarm has been logged, the applet will also create the spreadsheet itself. After a while, your IFTTT/Nightscout-Alarms folder will start to look like the screenshot posted above with numerous spreadsheets for each alarm type.","title":"Make 1st IFTTT Applet to Log NS Alarms"},{"location":"nightscout/pushover/#enable-ifttt-webhooks-in-your-nightscout-site","text":"Info If you already have created IFTTT buttons previously to work with your NS site, you can skip this section. If those buttons are working, then you've already added your MAKER_KEY and \"maker\" to your ENABLE line in Heroku. To actually make that first applet work, we need to enter a \"Maker Key\" to get NS and IFTTT talking to each other. Find your Maker Key by going to your IFTTT account, Services and then clicking on Webhooks. (Your screen may not have as many services showing; the example account below just happens to already use several services.) You will see your Maker Key as the last part of the URL; copy that last part (the red circled part) Navigate to your Heroku account's settings tab, \"reveal config vars\" and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line.","title":"Enable IFTTT Webhooks in your Nightscout site"},{"location":"nightscout/pushover/#make-2nd-ifttt-applet-to-send-pushover-notifications","text":"In your IFTTT account, select the \"New Applet\" button. In the screen that appears, click on the blue \"+this\" part of the screen {align=\"center\"}{width=\"550\"} In the next screen, type \"google\" in the search field and then click on the \"Google Sheets\" logo. {align=\"center\"}{width=\"550\"} Click on the \"New row added to spreadsheet\" as the trigger. Enter the following information: Folder path is IFTTT/Nightscout-Alarms and for the filename you are going to enter the name of the particular NS alarm or information that you would like to get pushover alerts for. Click on the \"Create trigger\" button to save the trigger. Info This applet can't be created unless your filename (alarm spreadsheet) already exists. If your 1st applet we created above hasn't run for a long time, the spreadsheets may not exist yet because the alarms haven't triggered. You have two options...(1) manually create the file in your Google Drive so that you can finish the applet now or (2) wait several days/weeks for the alarms to happen and that will automatically create the files in your Google drive. If you choose option 1, here's a partial list of some of the filenames you could create in advance: Loop isn't looping Cannula age 48 hours Cannula age 72 hours Meal Bolus Warning, Pump Reservoir Low Warning Uploader Battery is Low Temporary Override Depending on your alert levels you specified in NS, some of the hours in the titles may vary to match your settings Click on the blue \"+that\" text {align=\"center\"}{width=\"550\"} Enter pushover in the search field and click on the Pushover icon. If this is your first time linking your IFTTT to Pushover, you will be prompted to enter your Pushover account login and allow IFTTT access. This only needs to be done once. Select the \"Send a Pushover notification\" box Delete the contents of the \"Title\" and \"Message\" and \"URL\" boxes. For the Title, click the \"Add Ingredient\" button and add ColumnC . For the \"Message\", click the \"Add Ingredient\" button and add the values of various columns from your spreadsheet for the information you would like to include. For the alerts: ColumnC contains the alarm name, ColumnA is the date/time of the alarm, and ColumnD has more detailed information about the info/alarm. This is a pretty decent recipe to follow to get the useful information in your notification. Select the \"Message Priority\" that you would like for this particular alarm type. Select the \"Device\" that you would like to receive this particular alarm type. The devices listed will be all your devices that have Pushover app installed and logged into. Click \"Create Action\" when you are finished. You'll now have made the IFTTT applet that will cause a Pushover notification to a particular device for a particular NS alarm, once the first applet records the alarm in the google spreadsheet. Keep the \"receive notification when this Applet runs\" toggled off and click the Finish button.","title":"Make 2nd IFTTT Applet to send Pushover notifications"},{"location":"nightscout/pushover/#revisit-nightscout-alert-levels","text":"Putting all these notifications together may cause you to want to revisit the alert levels you have set in your Heroku settings. Here's a short summary of NS for the looping-related alerts (Note: the last row, Upbat, is the Looping iPhone battery level for Loop users; or the rig's battery level for OpenAPS users.) If you'd like some of these alarms for your site and don't currently have them activated (they are all off by default unless specifically turned on), the lines you'd need to add are in the last column. If you like the default values of the WARN and/or URGENT, you don't have to add those extra lines...just the line to enable the alerts will be sufficient. SETTING DEFAULT WARN DEFAULT URGENT HEROKU SETTINGS CAGE 48 72 CAGE_ENABLE_ALERTS = true CAGE_WARN=XX CAGE_URGENT=XX SAGE 164 168 SAGE_ENABLE_ALERTS = true SAGE_WARN=XX SAGE_URGENT=XX IAGE 48 72 IAGE_ENABLE_ALERTS = true IAGE_WARN=XX IAGE_URGENT=XX LOOP 30 60 LOOP_ENABLE_ALERTS = true LOOP_WARN=XX LOOP_URGENT=XX OPENAPS 30 60 OPENAPS_ENABLE_ALERTS = true OPENAPS_WARN=XX OPENAPS_URGENT=XX PUMP_CLOCK 30 60 PUMP_ENABLE_ALERTS = true PUMP_WARN_CLOCK=XX PUMP_URGENT_CLOCK=XX PUMP_RES 10 5 PUMP_ENABLE_ALERTS = true PUMP_WARN_RES=XX PUMP_URGENT_RES=XX PUMP_BATT_P 30 20 PUMP_ENABLE_ALERTS = true PUMP_WARN_BATT_P=XX PUMP_URGENT_BATT_P=XX PUMP_BATT_V 1.35 1.30 PUMP_ENABLE_ALERTS = true PUMP_WARN_BATT_V=XX PUMP_URGENT_BATT_V=XX UPBAT 30 20 UPBAT_ENABLE_ALERTS = true UPBAT_WARN=XX UPBAT_URGENT=XX","title":"Revisit Nightscout Alert Levels"},{"location":"nightscout/pushover/#final-notes","text":"You can use other notification services than Pushover in the last part of the second applet. For example, you could use the SMS service to send text notifications to your iPhone instead of Pushover. The downside for that is that the SMS service is limited to 100 message each month...some users may exceed that pretty easily. Another alternative notification would be IFTTT's own Notification service. This would work well, but does not have the ability to distinguish between devices the way Pushover allows. If you use IFTTT's Notifications service, every phone using your IFTTT account will get the notices. To be clear, you do NOT need to have pushover on your ENABLE line nor have PUSHOVER_USER_KEY , PUSHOVER_API_TOKEN , or PUSHOVER_ANNOUNCEMENT_KEY entered into your Heroku settings in order for any of the above to work. This is not the same Pushover as NS has integrated into its code. This is actually through IFTTT services, you just need a Pushover account to link to during the 2nd applet setup. To create more notifications, simply repeat the steps for the 2nd applet you created, only this time use a new filename that corresponds to the spreadsheet tracking the alert you'd like notifications for. You'll end up with multiple applets of the dark blue type (the pushover notifiers) and only a single light blue (NS alarm general collector). Here are examples of the Meal Bolus and Temp Basal ns-event logging spreadsheets The 1st applet can only create up to 2000 active rows in a given spreadsheet. After that, the applet will automatically create a new spreadsheet. For most alarms, it may take quite some time to reach 2000 rows of info. For other alerts, such as temp basals being set, that may fill up rather fast for the average looper. You can either clean out the data rows periodically to make room, or update your filename in the 2nd applet periodically when a new spreadsheet is made.","title":"Final notes"},{"location":"nightscout/remote-overrides/","text":"Setup Remote Overrides \u2301 You can now use your Nightscout site to remotely set and cancel your override presets in your Loop app. What?! Yes, really...you can set/cancel an override remotely for your child's Loop. (This feature does require that you built your Loop app using a paid Apple developer account, just FYI.) What you will need to do.. Update your Loop app (if you haven't done that since October 13, 2019 when remote overrides first became available) Create a Key for an Apple Push Notifications service (APNs) Update your Nightscout site and add some \"config vars\" lines in your Heroku settings. Step 1: Updating Loop app and iPhone settings \u2301 Remote overrides were in dev branch of Loop beginning October 13, 2019 and in master branch as of December 31, 2019. If you built one of those branches before those dates, you'll need to update your Loop app to be able to access remote overrides. Be sure to review all the steps for updating your Loop app here . iPhone settings specific for remote overrides For remote overrides to successfully deploy on a Looper's iPhone, they will need to have two settings on the iPhone enabled. First, Loop's slider in iPhone Settings, Notifications needs to be turned on. Without notifications, the person trying to set a remote override will see the message about \"no deviceToken\" and no remote override will actually enact. Second, the Looper's iphone needs the slide on in iPhone Settings, General, Background App Refresh. If this is not enabled, the remote overrides will not enact if the Loop app is not actively open on the phone's main screen. Step 2: Apple Push Notifications \u2301 The next part of this will help your Loop app give permissions to your Nightscout site to remotely interact with it. Login to your Apple developer account with the Apple ID associated with your developer team that you used to sign your Loop app. Click on \"Certificates, Indentifiers & Profiles\" and then, on the next page, click on \"Keys\" (located on the left-hand column). Click on the blue \"Create a new key\" OR the \"+\" icon to add a new key. In the form that appears, click the checkbox for enabling \"Apple Push Notifications service (APNs)\" and enter a name for the key such as \"Nightscout\". Then click the \"Continue\" button in the upper right of the screen. In the screen that follows, click the blue \"Register\" button. In the screen that follows, click the blue \"Download\" button. This step will download a file with a name that starts with \"AuthKey\" and ends with \".p8\". Find your AuthKey download in your downloads folder. Double-click to open it and you will be presented a message asking how you'd like to open it. Click on \"Choose Application...\" and then select \"TextEdit\" as your application to open it with. When the file opens, it will look similar to the screenshot below. In a few minutes, after we do a few other steps first, we will need to highlight ALL OF THE CONTENTS of that file and copy it because we will be pasting it in Heroku. Yes, allllll of the contents. So, easiest way is to click inside that file and then press command-a to highlight all the text and then command-c to copy it all to the clipboard. You don't have to do it right now...just keep that window open in the background for now until we need it a little further down. Then we will copy all that text. Step 3: Update Nightscout site \u2301 You'll need to update your Nightscout site to use the latest version of cgm-remote-monitor. It is called Ketchup and the version number is 13.0.1. You can check your version number by looking at the bottom of your NS site's settings, near where the authentication button is located. The easiest way to do to update your Nightscout site is to follow the steps in the video below. Danger Use this video for an easy process to update your Nightscout site: Easy Nightscout Update Video A quick note about the video instructions: If you don't see any branches to select to deploy and are missing the deploy button when you get to that step...you need to do one easy step. Select/click the \"GitHub\" icon from the middle of your Heroku screen. Then enter your GitHub account name to connect to that account. Once connected to your account, enter cgm-remote-monitor as the repo you'd like to use to connect with specifically. That will fix the issue and you'll then see the deploy buttons like in the video. Once you have your Nightscout deployment updated to the latest master branch of cgm-remote-monitor, now we need to add a couple new variables. Go to the Settings tab near the top of the screen on your Heroku app and then click on Reveal Config Vars . Scroll down the bottom of the Config Vars lines until you find the last blank one. You are going to add three new rows of config vars for remote overrides as shown below: KEY VALUE LOOP_APNS_KEY enter ENTIRE contents of the downloaded .p8 file including the BEGIN and END lines. Here's where you can use the command-a and command-c to hightlight and copy all the text in that file so you can paste it into Heroku here for this new variable you are creating. LOOP_APNS_KEY_ID string of characters on the .p8 download file immediately following the underscore ( _ ) and not including the file extension ( .p8 ), or you can get it from your saved key in your developer account as shown next step, too LOOP_DEVELOPER_TEAM_ID get this value from Loop app signing or in your developer account's top right corner under your name When executed properly, you should have something that looks like this for your three new variables that you added: Step 4: FAQs on Remote Overrides \u2301 Don't forget to read Loopdocs pages about how regular overrides work. For remote overrides in particular: Can I set different override in Nighscout than I have programmed into Loop app? Answer: No. You will only be able to enact override presets already programmed into the Loop app. If I didn't start the override in Nightscout (it was started in Loop itself), can I still use Nightscout to cancel it? Answer: Yes. You can cancel a Loop-set override with a Nightscout-set cancel \"temporary override\" command in careportal. \"Can I override a Loop-set override with a Nightscout-set override?\" Answer: Yes. If I have multiple Nightscout sites because I have multiple kiddos with T1D looping, do I need multiple APNs Keys? Answer: No. If you have multiple kids looping, you can use the one APNs key in each of their Nightscout sites. How can I tell if it worked? Answer: You should see your override pill in Nightscout, with the NEXT Loop cycle, reflecting that the desired override action took place. If you are near the Loop app, you should see the new override within less than 30 seconds or so. Can I set see on Nightscout when a temporary override has been set using the looper\u2019s phone? Yes. There will be a grey bar with the name of the override noted and the Loop Pill will display the targets and duration. Remember, there is a KNOWN issue with the grey bars, so use the pill as your best guide. Can a looper cancel a remote override ? Yes. They can tap the heart icon in Loop so that it is no longer highlighted. This turns off the override, regardless of where it was initiated. I set a remote override in Nightscout but the looper tapped the heart symbol in the Loop app, so the override turned off. Will the override get reinstated next time Loop completes with internet access? No. The APN is only sent once. You can set the remote override again if need be. Can I schedule a remote override ahead of time using Nightscout? No. When you set a remote override in Nightscout, it will begin immediately and last for whatever duration is programmed for that override in the Loop app. You can set an override for ahead of time using the Looping App only. Step 5: Using Remote Overrides \u2301 There are three ways you can trigger your override presets remotely; careportal, Shortcuts, and IFTTT. Careportal \u2301 To use remote overrides, I'm assuming you've setup your Nightscout site according to the directions here in Loopdocs. Especially the part about your ENABLE line including \"override careportal loop\" (in addition to other variables you'd be interested in). You'll also need to have your site authenticated so that your careportal is active to send remote overrides. You can authenticate your site by selecting the three horizontal lines in the upper right corner of your Nightscout site and scrolling to the bottom of the settings. There's an \"authenicate\" link at the very bottom. Once authenticated by entering your API Secret, then there will be a + in the upper right corner of your site. That is your careportal. Tap the careportal + and then scroll down in the \"event type\" menu to find \"Temporary Override\". Within there, you will find all your Loop override presets already loaded for you. The Looper will see a banner notification that an override has been set (or canceled, as the case may be). Canceling an override through Nightscout careportal is as simple as selecting the event type \"Temporary Override Cancel\" and submitting. Shortcuts \u2301 If you want to make your life SUPER AMAZING, check out using the iPhone's Shortcuts app. The Shortcuts app is for making little automations (like mini apps) that can integrate parts of your life. In this case, we've written a couple shortcuts for you that integrate Loop overrides with Nightscout. Important note Before you click that download below...save some trouble. Download the Shortcuts app if you don't have it yet and choose to run any shortcut from the Gallery. It can be the laundry timer...I don't care, just pick one and run it. THEN go to download the shortcut of your choice below. The shortcuts that aren't run through the Gallery option are called \"untrusted\". And you need a slider in your iPhone to trust the \"untrusted\" shortcuts you would be downloading here. But...in lovely iOS glitch...that slider doesn't appear unless you've run a trusted shortcut first. So, run one now. Then you'll have the slider in iPhone Settings, Shortcuts app to turn \"Allow Untrusted Shortcuts\" on when you will see a message \"This shortcut cannot be opened because your Shortcuts security system settings don't allow untrusted shortcuts.\" Click these links on your iphone and you'll be prompted to download the premade shortcuts (assuming you open the links in Safari browser in iPhone): Comprehensive Loop Shortcut includes Set Remote Override, Cancel Override, Loop Troubleshooting Tips, Quick Text options, Manual BG entry, Bookmarks to websites, etc. And if you want to save one click to get to these one functions more directly: these shortcuts are simplified to offer only one function: Set Remote Override only shortcut Cancel Override only shortcut A couple notes about these shortcuts: You will need iOS 13 at a minimum on the phone you'd like to trigger these shortcuts from. Looper's phone can still be lower than iOS 13, but your phone as the shortcut user would need iOS 13. You need to open those links in the Safari browser on your iPhone. When you do that click the button to get the shortcut. Then wait a bit, and the shortcut's inner guts will be there...scroll ALL the way down to the bottom to click the button to save the untrusted shortcut. When you enter your Nightscout URL in the \"URL\" field of the Loop shortcut setup, make sure you don't include a trailing \"/\" or the API calls to Heroku will error out. When a remote override is set properly, you'll see an \"ok\" message displayed. If there is an error, you'll see an error message. Most errors will be that you have an API secret wrong (make sure there isn't a space at the end of you API Secret that you don't see) or you failed to do the steps to setup NS and update your Loop app as described in steps 1-3 above. You can absolutely customize these bits and pieces within the shortcut. Change the text messages, change the links...totally up to you. IFTTT \u2301 If you want to walk uphill both ways in the snow carrying bags of uneven groceries, you can also set overrides remotely by setting up IFTTT , too. Step 6: Known Issues \u2301 Just a brief mention so you are aware: The override pill will display information about what override is currently active in the Looper's phone. BUT, there can be a slight delay as that information is only transmitted every 5 minutes at best (it is tied to Loop runs and Nightscout upload events in Loop). So, wait 5 minutes to see that the information has gone through a refresh cycle before assuming the override message failed to enact. When you add a new override preset in Loop, that preset has to be uploaded to Nightscout before it will be available as a remote override. To trigger that upload, you can simply enact that new override for a few seconds and turn it off again. that will get the Nightscout upload going. Step 7: Common Errors \u2301 Once you've set up remote overrides, you may encounter errors when trying to run them via Nightscout or iOS Shortcuts. Below are the most common and the typical solutions. Error: Loop notification failed: Could not find deviceToken in loopSettings You might see this in either Nightscout or Shortcuts. The error is most commonly caused by 3 issues: incorrect version of Loop, Loop is not pointing to the right Nightscout instance, or you haven't yet run an override locally (with the Loop app) before trying to run one remotely. Solution: check you have the latest version of the Dev branch installed, confirm the Loop app is pointing to the right Nightscout site (and there are not extra spaces or a slash (/) at the end, and always run an override for a few seconds in the Loop app before you try to run one remotely. Error: cannot POST/api/v2/notifications/loop You might see this in iOS Shortcuts. This means Nightscout is not updated correctly and you are running a version of Nightscout that doesn't yet support remote overrides. Solution: Follow the steps above again on how to update to the version of Nightscout that supports remote overrides. Error: {\u201cstatus\u201d:401,\u201dmessage\u201d:\u201dUnauthorized\u201d,\u201ddescription\u201d:Invalid\\/Missing\u201d} You might see this in iOS Shortcuts. This is caused by having the incorrect API Secret in the Shortcut. Solution: Double check the API Secret is correct and that there are no spaces at the end. Error: APNs delivery failed: InvalidProviderToken You might see this in either Nightscout or Shortcuts. This is caused because your LOOP_APNS_KEY_ID and LOOP_DEVELOPER_TEAM_ID are swapped in Heroku. Solution: Double check what's listed in your Apple Developer Account and compare to the config variables in Heroku. Your Team_ID is next to your name in the top right corner. The other code is your Key_ID. Get the IDs in the correct location in Heroku to resolve the error.","title":"Remote Overrides"},{"location":"nightscout/remote-overrides/#setup-remote-overrides","text":"You can now use your Nightscout site to remotely set and cancel your override presets in your Loop app. What?! Yes, really...you can set/cancel an override remotely for your child's Loop. (This feature does require that you built your Loop app using a paid Apple developer account, just FYI.) What you will need to do.. Update your Loop app (if you haven't done that since October 13, 2019 when remote overrides first became available) Create a Key for an Apple Push Notifications service (APNs) Update your Nightscout site and add some \"config vars\" lines in your Heroku settings.","title":"Setup Remote Overrides"},{"location":"nightscout/remote-overrides/#step-1-updating-loop-app-and-iphone-settings","text":"Remote overrides were in dev branch of Loop beginning October 13, 2019 and in master branch as of December 31, 2019. If you built one of those branches before those dates, you'll need to update your Loop app to be able to access remote overrides. Be sure to review all the steps for updating your Loop app here . iPhone settings specific for remote overrides For remote overrides to successfully deploy on a Looper's iPhone, they will need to have two settings on the iPhone enabled. First, Loop's slider in iPhone Settings, Notifications needs to be turned on. Without notifications, the person trying to set a remote override will see the message about \"no deviceToken\" and no remote override will actually enact. Second, the Looper's iphone needs the slide on in iPhone Settings, General, Background App Refresh. If this is not enabled, the remote overrides will not enact if the Loop app is not actively open on the phone's main screen.","title":"Step 1: Updating Loop app and iPhone settings"},{"location":"nightscout/remote-overrides/#step-2-apple-push-notifications","text":"The next part of this will help your Loop app give permissions to your Nightscout site to remotely interact with it. Login to your Apple developer account with the Apple ID associated with your developer team that you used to sign your Loop app. Click on \"Certificates, Indentifiers & Profiles\" and then, on the next page, click on \"Keys\" (located on the left-hand column). Click on the blue \"Create a new key\" OR the \"+\" icon to add a new key. In the form that appears, click the checkbox for enabling \"Apple Push Notifications service (APNs)\" and enter a name for the key such as \"Nightscout\". Then click the \"Continue\" button in the upper right of the screen. In the screen that follows, click the blue \"Register\" button. In the screen that follows, click the blue \"Download\" button. This step will download a file with a name that starts with \"AuthKey\" and ends with \".p8\". Find your AuthKey download in your downloads folder. Double-click to open it and you will be presented a message asking how you'd like to open it. Click on \"Choose Application...\" and then select \"TextEdit\" as your application to open it with. When the file opens, it will look similar to the screenshot below. In a few minutes, after we do a few other steps first, we will need to highlight ALL OF THE CONTENTS of that file and copy it because we will be pasting it in Heroku. Yes, allllll of the contents. So, easiest way is to click inside that file and then press command-a to highlight all the text and then command-c to copy it all to the clipboard. You don't have to do it right now...just keep that window open in the background for now until we need it a little further down. Then we will copy all that text.","title":"Step 2: Apple Push Notifications"},{"location":"nightscout/remote-overrides/#step-3-update-nightscout-site","text":"You'll need to update your Nightscout site to use the latest version of cgm-remote-monitor. It is called Ketchup and the version number is 13.0.1. You can check your version number by looking at the bottom of your NS site's settings, near where the authentication button is located. The easiest way to do to update your Nightscout site is to follow the steps in the video below. Danger Use this video for an easy process to update your Nightscout site: Easy Nightscout Update Video A quick note about the video instructions: If you don't see any branches to select to deploy and are missing the deploy button when you get to that step...you need to do one easy step. Select/click the \"GitHub\" icon from the middle of your Heroku screen. Then enter your GitHub account name to connect to that account. Once connected to your account, enter cgm-remote-monitor as the repo you'd like to use to connect with specifically. That will fix the issue and you'll then see the deploy buttons like in the video. Once you have your Nightscout deployment updated to the latest master branch of cgm-remote-monitor, now we need to add a couple new variables. Go to the Settings tab near the top of the screen on your Heroku app and then click on Reveal Config Vars . Scroll down the bottom of the Config Vars lines until you find the last blank one. You are going to add three new rows of config vars for remote overrides as shown below: KEY VALUE LOOP_APNS_KEY enter ENTIRE contents of the downloaded .p8 file including the BEGIN and END lines. Here's where you can use the command-a and command-c to hightlight and copy all the text in that file so you can paste it into Heroku here for this new variable you are creating. LOOP_APNS_KEY_ID string of characters on the .p8 download file immediately following the underscore ( _ ) and not including the file extension ( .p8 ), or you can get it from your saved key in your developer account as shown next step, too LOOP_DEVELOPER_TEAM_ID get this value from Loop app signing or in your developer account's top right corner under your name When executed properly, you should have something that looks like this for your three new variables that you added:","title":"Step 3: Update Nightscout site"},{"location":"nightscout/remote-overrides/#step-4-faqs-on-remote-overrides","text":"Don't forget to read Loopdocs pages about how regular overrides work. For remote overrides in particular: Can I set different override in Nighscout than I have programmed into Loop app? Answer: No. You will only be able to enact override presets already programmed into the Loop app. If I didn't start the override in Nightscout (it was started in Loop itself), can I still use Nightscout to cancel it? Answer: Yes. You can cancel a Loop-set override with a Nightscout-set cancel \"temporary override\" command in careportal. \"Can I override a Loop-set override with a Nightscout-set override?\" Answer: Yes. If I have multiple Nightscout sites because I have multiple kiddos with T1D looping, do I need multiple APNs Keys? Answer: No. If you have multiple kids looping, you can use the one APNs key in each of their Nightscout sites. How can I tell if it worked? Answer: You should see your override pill in Nightscout, with the NEXT Loop cycle, reflecting that the desired override action took place. If you are near the Loop app, you should see the new override within less than 30 seconds or so. Can I set see on Nightscout when a temporary override has been set using the looper\u2019s phone? Yes. There will be a grey bar with the name of the override noted and the Loop Pill will display the targets and duration. Remember, there is a KNOWN issue with the grey bars, so use the pill as your best guide. Can a looper cancel a remote override ? Yes. They can tap the heart icon in Loop so that it is no longer highlighted. This turns off the override, regardless of where it was initiated. I set a remote override in Nightscout but the looper tapped the heart symbol in the Loop app, so the override turned off. Will the override get reinstated next time Loop completes with internet access? No. The APN is only sent once. You can set the remote override again if need be. Can I schedule a remote override ahead of time using Nightscout? No. When you set a remote override in Nightscout, it will begin immediately and last for whatever duration is programmed for that override in the Loop app. You can set an override for ahead of time using the Looping App only.","title":"Step 4: FAQs on Remote Overrides"},{"location":"nightscout/remote-overrides/#step-5-using-remote-overrides","text":"There are three ways you can trigger your override presets remotely; careportal, Shortcuts, and IFTTT.","title":"Step 5: Using Remote Overrides"},{"location":"nightscout/remote-overrides/#careportal","text":"To use remote overrides, I'm assuming you've setup your Nightscout site according to the directions here in Loopdocs. Especially the part about your ENABLE line including \"override careportal loop\" (in addition to other variables you'd be interested in). You'll also need to have your site authenticated so that your careportal is active to send remote overrides. You can authenticate your site by selecting the three horizontal lines in the upper right corner of your Nightscout site and scrolling to the bottom of the settings. There's an \"authenicate\" link at the very bottom. Once authenticated by entering your API Secret, then there will be a + in the upper right corner of your site. That is your careportal. Tap the careportal + and then scroll down in the \"event type\" menu to find \"Temporary Override\". Within there, you will find all your Loop override presets already loaded for you. The Looper will see a banner notification that an override has been set (or canceled, as the case may be). Canceling an override through Nightscout careportal is as simple as selecting the event type \"Temporary Override Cancel\" and submitting.","title":"Careportal"},{"location":"nightscout/remote-overrides/#shortcuts","text":"If you want to make your life SUPER AMAZING, check out using the iPhone's Shortcuts app. The Shortcuts app is for making little automations (like mini apps) that can integrate parts of your life. In this case, we've written a couple shortcuts for you that integrate Loop overrides with Nightscout. Important note Before you click that download below...save some trouble. Download the Shortcuts app if you don't have it yet and choose to run any shortcut from the Gallery. It can be the laundry timer...I don't care, just pick one and run it. THEN go to download the shortcut of your choice below. The shortcuts that aren't run through the Gallery option are called \"untrusted\". And you need a slider in your iPhone to trust the \"untrusted\" shortcuts you would be downloading here. But...in lovely iOS glitch...that slider doesn't appear unless you've run a trusted shortcut first. So, run one now. Then you'll have the slider in iPhone Settings, Shortcuts app to turn \"Allow Untrusted Shortcuts\" on when you will see a message \"This shortcut cannot be opened because your Shortcuts security system settings don't allow untrusted shortcuts.\" Click these links on your iphone and you'll be prompted to download the premade shortcuts (assuming you open the links in Safari browser in iPhone): Comprehensive Loop Shortcut includes Set Remote Override, Cancel Override, Loop Troubleshooting Tips, Quick Text options, Manual BG entry, Bookmarks to websites, etc. And if you want to save one click to get to these one functions more directly: these shortcuts are simplified to offer only one function: Set Remote Override only shortcut Cancel Override only shortcut A couple notes about these shortcuts: You will need iOS 13 at a minimum on the phone you'd like to trigger these shortcuts from. Looper's phone can still be lower than iOS 13, but your phone as the shortcut user would need iOS 13. You need to open those links in the Safari browser on your iPhone. When you do that click the button to get the shortcut. Then wait a bit, and the shortcut's inner guts will be there...scroll ALL the way down to the bottom to click the button to save the untrusted shortcut. When you enter your Nightscout URL in the \"URL\" field of the Loop shortcut setup, make sure you don't include a trailing \"/\" or the API calls to Heroku will error out. When a remote override is set properly, you'll see an \"ok\" message displayed. If there is an error, you'll see an error message. Most errors will be that you have an API secret wrong (make sure there isn't a space at the end of you API Secret that you don't see) or you failed to do the steps to setup NS and update your Loop app as described in steps 1-3 above. You can absolutely customize these bits and pieces within the shortcut. Change the text messages, change the links...totally up to you.","title":"Shortcuts"},{"location":"nightscout/remote-overrides/#ifttt","text":"If you want to walk uphill both ways in the snow carrying bags of uneven groceries, you can also set overrides remotely by setting up IFTTT , too.","title":"IFTTT"},{"location":"nightscout/remote-overrides/#step-6-known-issues","text":"Just a brief mention so you are aware: The override pill will display information about what override is currently active in the Looper's phone. BUT, there can be a slight delay as that information is only transmitted every 5 minutes at best (it is tied to Loop runs and Nightscout upload events in Loop). So, wait 5 minutes to see that the information has gone through a refresh cycle before assuming the override message failed to enact. When you add a new override preset in Loop, that preset has to be uploaded to Nightscout before it will be available as a remote override. To trigger that upload, you can simply enact that new override for a few seconds and turn it off again. that will get the Nightscout upload going.","title":"Step 6: Known Issues"},{"location":"nightscout/remote-overrides/#step-7-common-errors","text":"Once you've set up remote overrides, you may encounter errors when trying to run them via Nightscout or iOS Shortcuts. Below are the most common and the typical solutions. Error: Loop notification failed: Could not find deviceToken in loopSettings You might see this in either Nightscout or Shortcuts. The error is most commonly caused by 3 issues: incorrect version of Loop, Loop is not pointing to the right Nightscout instance, or you haven't yet run an override locally (with the Loop app) before trying to run one remotely. Solution: check you have the latest version of the Dev branch installed, confirm the Loop app is pointing to the right Nightscout site (and there are not extra spaces or a slash (/) at the end, and always run an override for a few seconds in the Loop app before you try to run one remotely. Error: cannot POST/api/v2/notifications/loop You might see this in iOS Shortcuts. This means Nightscout is not updated correctly and you are running a version of Nightscout that doesn't yet support remote overrides. Solution: Follow the steps above again on how to update to the version of Nightscout that supports remote overrides. Error: {\u201cstatus\u201d:401,\u201dmessage\u201d:\u201dUnauthorized\u201d,\u201ddescription\u201d:Invalid\\/Missing\u201d} You might see this in iOS Shortcuts. This is caused by having the incorrect API Secret in the Shortcut. Solution: Double check the API Secret is correct and that there are no spaces at the end. Error: APNs delivery failed: InvalidProviderToken You might see this in either Nightscout or Shortcuts. This is caused because your LOOP_APNS_KEY_ID and LOOP_DEVELOPER_TEAM_ID are swapped in Heroku. Solution: Double check what's listed in your Apple Developer Account and compare to the config variables in Heroku. Your Team_ID is next to your name in the top right corner. The other code is your Key_ID. Get the IDs in the correct location in Heroku to resolve the error.","title":"Step 7: Common Errors"},{"location":"nightscout/reports/","text":"Reports \u2301 Nightscout offers some fantastic data-crunching report tools in the settings area (the upper right corner, three horizontal lines). You can play around with various date ranges, target ranges, and provide reports to your endocrinologist to review.","title":"Reports"},{"location":"nightscout/reports/#reports","text":"Nightscout offers some fantastic data-crunching report tools in the settings area (the upper right corner, three horizontal lines). You can play around with various date ranges, target ranges, and provide reports to your endocrinologist to review.","title":"Reports"},{"location":"nightscout/troublehoot/","text":"Setup Troubleshooting \u2301 If you have just tried to set up your Nightscout site and have problems with seeing all your data, please check out the information below. Dexcom data not showing \u2301 If you are using a Dexcom system, and your data is not appearing in Nightscout, there are only a limited number of reasons for that. You should check your (1) Heroku settings and (2) Dexcom Share. NOTE: The #1 reason why BGs aren't showing is that you have mismatched password and user names in Heroku settings and Dexcom. Please see blue box below for that error. Heroku Settings \u2301 Login to your Heroku account and from within Heroku settings, click on the Reveal Config Vars Now from the Config Vars area, check the following (see screenshot below for reference): You must use the same BRIDGE_PASSWORD or BRIDGE_USER_NAME that your Dexcom mobile app is using. You must have bridge and careportal on the ENABLE line (you can have other values there...but don't forget these two). If you are outside the USA, you must add BRIDGE_SERVER set to EU in Heroku settings. Your careportal must be one word in the ENABLE line, sometimes autocorrect makes it two words. If using mmol , make sure you have spelled that value correctly in the DISPLAY_UNITS . One thing that can happen if you have an incorrect Dexcom login/password in Loop's CGM Share account settings and/or in your Nightscout BRIDGE settings is that Dexcom will lock your account...and you won't see CGM data in Nightscout. If you notice your CGM readings disappeared, but everything else is flowing...check your Heroku logs that are viewable by selecting \"View Logs\" from the drop-down menu underneath the \"More\" option. Do your logs have \"SSO authentication errors\" like in the red box highlighted above? If you do, then: Delete your share account entry from your Loop's CGM account settings...like you should have NO ENTRY in your share account settings WITHIN LOOP CGM SETTINGS. Delete your BRIDGE entries within Heroku settings. Don't delete the rows, just delete the entries within BRIDGE_PASSWORD and BRIDGE_USER_NAME. Wait 15 minutes and then follow the directions in the blue box below. It is important to wait the 15 minutes...the reason you can't log in right now is that your Dexcom account has a temporary lock from one of the passwords in step 1 or 2 being incorrect. The temporary lock will expire after 10-15 minutes of giving the account login a break from the incorrect logins. So, definitely wait or else you'll just keep prolonging the issue. About your Bridge password and user name The BRIDGE_PASSWORD and BRIDGE_USER_NAME are NOT visible from within your Dexcom mobile app or online account. The values of them are what you entered into your Dexcom mobile app when you VERY FIRST logged into that app however long ago. If you have double-checked everything else that could be incorrect and BGs still aren't showing in Nightscout, then you likely have those Bridge values incorrect. To fix that, delete your Dexcom app (don't stop the session before deleting the app...just keep it going). Download the app again from the iPhone's App Store and login to the freshly-downloaded Dexcom app. Take note that deleting the app will not stop your session, your session will pick right back up once the transmitter pairs again. The BRIDGE_USER_NAME is not an email address. Use that exact same login now in your Heroku settings. You can leave your Loop's Share account info blank...you just need the transmitter ID going forward. Dexcom Share \u2301 Make sure you have Dexcom Share turned ON in your Dexcom app. In the Dexcom app's main screen, find the triangle made of dots. If the dots are grey, you do not have Share turned on. Tap the triangle, and follow the directions to add a follower (yourself if you don't have someone else you'd like to invite) and turn on Share. Loop data not showing \u2301 If your BG data is showing, but Loop data is not (like Loop pill is empty and carbs and boluses are not showing), please delete your Nightscout account in Loop settings area. Enter the information in freshly. Make sure to use https:// to start the site URL. Make sure there is no trailing slash at the end of the URL. Make sure you have loop on the ENABLE line in Heroku settings.","title":"Setup Troubleshooting"},{"location":"nightscout/troublehoot/#setup-troubleshooting","text":"If you have just tried to set up your Nightscout site and have problems with seeing all your data, please check out the information below.","title":"Setup Troubleshooting"},{"location":"nightscout/troublehoot/#dexcom-data-not-showing","text":"If you are using a Dexcom system, and your data is not appearing in Nightscout, there are only a limited number of reasons for that. You should check your (1) Heroku settings and (2) Dexcom Share. NOTE: The #1 reason why BGs aren't showing is that you have mismatched password and user names in Heroku settings and Dexcom. Please see blue box below for that error.","title":"Dexcom data not showing"},{"location":"nightscout/troublehoot/#heroku-settings","text":"Login to your Heroku account and from within Heroku settings, click on the Reveal Config Vars Now from the Config Vars area, check the following (see screenshot below for reference): You must use the same BRIDGE_PASSWORD or BRIDGE_USER_NAME that your Dexcom mobile app is using. You must have bridge and careportal on the ENABLE line (you can have other values there...but don't forget these two). If you are outside the USA, you must add BRIDGE_SERVER set to EU in Heroku settings. Your careportal must be one word in the ENABLE line, sometimes autocorrect makes it two words. If using mmol , make sure you have spelled that value correctly in the DISPLAY_UNITS . One thing that can happen if you have an incorrect Dexcom login/password in Loop's CGM Share account settings and/or in your Nightscout BRIDGE settings is that Dexcom will lock your account...and you won't see CGM data in Nightscout. If you notice your CGM readings disappeared, but everything else is flowing...check your Heroku logs that are viewable by selecting \"View Logs\" from the drop-down menu underneath the \"More\" option. Do your logs have \"SSO authentication errors\" like in the red box highlighted above? If you do, then: Delete your share account entry from your Loop's CGM account settings...like you should have NO ENTRY in your share account settings WITHIN LOOP CGM SETTINGS. Delete your BRIDGE entries within Heroku settings. Don't delete the rows, just delete the entries within BRIDGE_PASSWORD and BRIDGE_USER_NAME. Wait 15 minutes and then follow the directions in the blue box below. It is important to wait the 15 minutes...the reason you can't log in right now is that your Dexcom account has a temporary lock from one of the passwords in step 1 or 2 being incorrect. The temporary lock will expire after 10-15 minutes of giving the account login a break from the incorrect logins. So, definitely wait or else you'll just keep prolonging the issue. About your Bridge password and user name The BRIDGE_PASSWORD and BRIDGE_USER_NAME are NOT visible from within your Dexcom mobile app or online account. The values of them are what you entered into your Dexcom mobile app when you VERY FIRST logged into that app however long ago. If you have double-checked everything else that could be incorrect and BGs still aren't showing in Nightscout, then you likely have those Bridge values incorrect. To fix that, delete your Dexcom app (don't stop the session before deleting the app...just keep it going). Download the app again from the iPhone's App Store and login to the freshly-downloaded Dexcom app. Take note that deleting the app will not stop your session, your session will pick right back up once the transmitter pairs again. The BRIDGE_USER_NAME is not an email address. Use that exact same login now in your Heroku settings. You can leave your Loop's Share account info blank...you just need the transmitter ID going forward.","title":"Heroku Settings"},{"location":"nightscout/troublehoot/#dexcom-share","text":"Make sure you have Dexcom Share turned ON in your Dexcom app. In the Dexcom app's main screen, find the triangle made of dots. If the dots are grey, you do not have Share turned on. Tap the triangle, and follow the directions to add a follower (yourself if you don't have someone else you'd like to invite) and turn on Share.","title":"Dexcom Share"},{"location":"nightscout/troublehoot/#loop-data-not-showing","text":"If your BG data is showing, but Loop data is not (like Loop pill is empty and carbs and boluses are not showing), please delete your Nightscout account in Loop settings area. Enter the information in freshly. Make sure to use https:// to start the site URL. Make sure there is no trailing slash at the end of the URL. Make sure you have loop on the ENABLE line in Heroku settings.","title":"Loop data not showing"},{"location":"nightscout/update_user/","text":"Adding Loop to Existing NS \u2301 Many people may already have an existing Nightscout site setup from before adding Loop to their management strategies. In order to make the most of your Looping setup, you will need to modify your existing Nightscout site a bit specifically for Loop. The process is pretty easy and should not take long. New Variables for Loopers \u2301 The modifications for retrofitting an existing NS site for a new Loop user require you to make some edits to your Nightscout Config Vars. These instructions are for people using Heroku, because that is the most common choice. If your Nightscout site is not on Heroku, this page provides a guide for the Config Vars used by Loop. There are five steps: Login to Heroku, Open Settings Tab Edit/Add Config Vars Open Nightscout Site Turn on Plugins Update Profile Settings Step 1: Login to Heroku, Settings Tab \u2301 Login to your Heroku account , select the Settings tab near the top of the screen on your Heroku app. Step 2: Edit/Add Config Vars \u2301 Click on Reveal Config Vars . Scroll down the bottom of the Config Vars lines until you find the last blank one. You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED and ENABLE lines are required, the others just make Nightscout more useful when Looping. ENABLE bridge loop pump iob cob basal careportal sage cage bage override dbsize (Note: If you are an existing NS user, you likely already have an ENABLE line in this section of Heroku. Don't add a new one. Simply find the existing ENABLE line, click on the little pencil icon to the right of it, and add the words shown on the ENABLE line above to the existing words already on the enable line. Avoid duplicates. The remainder of the lines are likely going to be brand new additions to your Heroku settings.) DEVICESTATUS_ADVANCED true PUMP_FIELDS battery reservoir clock status PUMP_RETRO_FIELDS battery reservoir clock status SHOW_FORECAST loop SHOW_PLUGINS loop pump cob iob sage cage careportal basal override dbsize PUMP_ENABLE_ALERTS true PUMP_URGENT_BATT_U 30 (This is the pump battery percentage that will trigger a red, urgent alert in NS.) PUMP_URGENT_BATT_V 1.25 (This is the pump battery voltage that will trigger a red, urgent alert in NS.) PUMP_URGENT_RES 10 (This is the reservoir volume that will trigger a red, urgent alert in NS.) PUMP_URGENT_CLOCK 30 LOOP_ENABLE_ALERTS true LOOP_WARN 20 (This is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app. This will be a yellow alert in NS.) LOOP_URGENT 60 (Same as the alert above, but will be red in color and have a shorter snooze option.) BASAL_RENDER default Step 3: Open Your NS Site \u2301 Click on Open App in the top right corner of your Heroku site. Step 4: Turn on Plugins \u2301 Click on the settings (those three horizontal lines in the upper right corner). Now check that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like display pills in the SHOW PLUGINS (usually all of them), and then click save. If you have not authenticated your site previously, you may be prompted to provide your API Secret prior to Nightscout saving your changes. Step 5: Update Profile Settings \u2301 Double-check that your NS Profile settings are current and that you have a basal profile entered, if you want to see the temp basals that Loop is setting. The values in your Nightscout Profile settings will not impact or affect your Loop, but it is just nice to have them match up in the event you are looking at your data with an endocrinologist or retrospectively looking at data. Nightscout Version Update \u2301 If you are new to Loop and haven\u2019t updated your Nightscout site for a while, check to see if there's an available update. Visit The Nightscout Update Instructions for directions on updating.","title":"Retrofit Existing NS"},{"location":"nightscout/update_user/#adding-loop-to-existing-ns","text":"Many people may already have an existing Nightscout site setup from before adding Loop to their management strategies. In order to make the most of your Looping setup, you will need to modify your existing Nightscout site a bit specifically for Loop. The process is pretty easy and should not take long.","title":"Adding Loop to Existing NS"},{"location":"nightscout/update_user/#new-variables-for-loopers","text":"The modifications for retrofitting an existing NS site for a new Loop user require you to make some edits to your Nightscout Config Vars. These instructions are for people using Heroku, because that is the most common choice. If your Nightscout site is not on Heroku, this page provides a guide for the Config Vars used by Loop. There are five steps: Login to Heroku, Open Settings Tab Edit/Add Config Vars Open Nightscout Site Turn on Plugins Update Profile Settings","title":"New Variables for Loopers"},{"location":"nightscout/update_user/#step-1-login-to-heroku-settings-tab","text":"Login to your Heroku account , select the Settings tab near the top of the screen on your Heroku app.","title":"Step 1: Login to Heroku, Settings Tab"},{"location":"nightscout/update_user/#step-2-editadd-config-vars","text":"Click on Reveal Config Vars . Scroll down the bottom of the Config Vars lines until you find the last blank one. You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED and ENABLE lines are required, the others just make Nightscout more useful when Looping. ENABLE bridge loop pump iob cob basal careportal sage cage bage override dbsize (Note: If you are an existing NS user, you likely already have an ENABLE line in this section of Heroku. Don't add a new one. Simply find the existing ENABLE line, click on the little pencil icon to the right of it, and add the words shown on the ENABLE line above to the existing words already on the enable line. Avoid duplicates. The remainder of the lines are likely going to be brand new additions to your Heroku settings.) DEVICESTATUS_ADVANCED true PUMP_FIELDS battery reservoir clock status PUMP_RETRO_FIELDS battery reservoir clock status SHOW_FORECAST loop SHOW_PLUGINS loop pump cob iob sage cage careportal basal override dbsize PUMP_ENABLE_ALERTS true PUMP_URGENT_BATT_U 30 (This is the pump battery percentage that will trigger a red, urgent alert in NS.) PUMP_URGENT_BATT_V 1.25 (This is the pump battery voltage that will trigger a red, urgent alert in NS.) PUMP_URGENT_RES 10 (This is the reservoir volume that will trigger a red, urgent alert in NS.) PUMP_URGENT_CLOCK 30 LOOP_ENABLE_ALERTS true LOOP_WARN 20 (This is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app. This will be a yellow alert in NS.) LOOP_URGENT 60 (Same as the alert above, but will be red in color and have a shorter snooze option.) BASAL_RENDER default","title":"Step 2: Edit/Add Config Vars"},{"location":"nightscout/update_user/#step-3-open-your-ns-site","text":"Click on Open App in the top right corner of your Heroku site.","title":"Step 3: Open Your NS Site"},{"location":"nightscout/update_user/#step-4-turn-on-plugins","text":"Click on the settings (those three horizontal lines in the upper right corner). Now check that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like display pills in the SHOW PLUGINS (usually all of them), and then click save. If you have not authenticated your site previously, you may be prompted to provide your API Secret prior to Nightscout saving your changes.","title":"Step 4: Turn on Plugins"},{"location":"nightscout/update_user/#step-5-update-profile-settings","text":"Double-check that your NS Profile settings are current and that you have a basal profile entered, if you want to see the temp basals that Loop is setting. The values in your Nightscout Profile settings will not impact or affect your Loop, but it is just nice to have them match up in the event you are looking at your data with an endocrinologist or retrospectively looking at data.","title":"Step 5: Update Profile Settings"},{"location":"nightscout/update_user/#nightscout-version-update","text":"If you are new to Loop and haven\u2019t updated your Nightscout site for a while, check to see if there's an available update. Visit The Nightscout Update Instructions for directions on updating.","title":"Nightscout Version Update"},{"location":"operation/overview/","text":"How to set up your Loop app \u2301 This section of LoopDocs, under the general menu tab \"Set up App\", goes through all the important information about the process to properly set up all your needed information. You will need to work through the steps listed in the headings under this page one by one. Please follow along with each page's information to make sure that you don't miss any valuable information about your Loop's settings and function. Add Pump \u2301 The first step to setting up your Loop app is to tell Loop which pump you're using. There are separate pages for setting up a Medtronic (MDT) pump or an Omnipod Eros pump (aka \"pods\"). Click on one of the pages to go straight to that page's guide. Add Medtronic Pump Add Omnipod Pump Add CGM \u2301 You will need to add a CGM source for your Loop app. If you are wondering which CGMs are supported natively by Loop, check here . The guide for adding the CGM source is here Configurations \u2301 There is a particular section of Loop's settings area called \"Configurations\". Within this section, you will be entering many settings that you are already familiar with such as basal rates, carb ratios, and insulin sensitivity factor (aka correction factor). There are also several new terms that you may be unfamiliar with like insulin model selection, suspend threshold, and override ranges. Make sure you walk through the setup guide here for the configurations. Services (optional) \u2301 The last section of entries to your Loop app, Services involve optional services that you can choose to send Loop data to. The most popular of those services is likely your Nightscout site; but there are also logging sites that can store information about your Loop errors and messages. All of these services are optional; not using these services will not affect your ability to Loop. Loop Displays \u2301 After you are done setting up all your information, you will also need to familiarize yourself with the Loop's various information displays. This page will help you recognize what all the icons, graphs, and data mean. RileyLink menu \u2301 The RileyLink itself has some menu displays and commands which provide useful information for your Loop. Check out this page to read up about the various options available.","title":"Overview"},{"location":"operation/overview/#how-to-set-up-your-loop-app","text":"This section of LoopDocs, under the general menu tab \"Set up App\", goes through all the important information about the process to properly set up all your needed information. You will need to work through the steps listed in the headings under this page one by one. Please follow along with each page's information to make sure that you don't miss any valuable information about your Loop's settings and function.","title":"How to set up your Loop app"},{"location":"operation/overview/#add-pump","text":"The first step to setting up your Loop app is to tell Loop which pump you're using. There are separate pages for setting up a Medtronic (MDT) pump or an Omnipod Eros pump (aka \"pods\"). Click on one of the pages to go straight to that page's guide. Add Medtronic Pump Add Omnipod Pump","title":"Add Pump"},{"location":"operation/overview/#add-cgm","text":"You will need to add a CGM source for your Loop app. If you are wondering which CGMs are supported natively by Loop, check here . The guide for adding the CGM source is here","title":"Add CGM"},{"location":"operation/overview/#configurations","text":"There is a particular section of Loop's settings area called \"Configurations\". Within this section, you will be entering many settings that you are already familiar with such as basal rates, carb ratios, and insulin sensitivity factor (aka correction factor). There are also several new terms that you may be unfamiliar with like insulin model selection, suspend threshold, and override ranges. Make sure you walk through the setup guide here for the configurations.","title":"Configurations"},{"location":"operation/overview/#services-optional","text":"The last section of entries to your Loop app, Services involve optional services that you can choose to send Loop data to. The most popular of those services is likely your Nightscout site; but there are also logging sites that can store information about your Loop errors and messages. All of these services are optional; not using these services will not affect your ability to Loop.","title":"Services (optional)"},{"location":"operation/overview/#loop-displays","text":"After you are done setting up all your information, you will also need to familiarize yourself with the Loop's various information displays. This page will help you recognize what all the icons, graphs, and data mean.","title":"Loop Displays"},{"location":"operation/overview/#rileylink-menu","text":"The RileyLink itself has some menu displays and commands which provide useful information for your Loop. Check out this page to read up about the various options available.","title":"RileyLink menu"},{"location":"operation/algorithm/bolus/","text":"Bolus Recommendations \u2301 Loop will recommend bolus insulin corrections when the eventual blood glucose is greater than the correction target and the active insulin plus any active 30-minute temporary basal will not be sufficient to cover the predicted excursion above correction target. These recommendations are not proactively sent to the Loop user through any notification or banner alert; the recommendation is only viewable when the user clicks on the bolus tool. Note that Loop never issues a bolus command automatically; all boluses are initiated by the user. The bolus dose calculation is identical to the dose equation given in the basal recommendations section, with the exception that: the insulin contribution from the currently running temporary basal set by Loop is removed or subtracted from the recommended bolus amount, and the delta is calculated for the top of the correction range, rather than the average of the correction range. For recently saved carbohydrates where the projected carbohydrate absorption will outlast the insulin activity duration (e.g., very slow-digesting meals like pizza or pasta), Loop\u2019s algorithm will inherently decrease the initial meal bolus \u2014 to prevent hypoglycemia events that often occur after these meals \u2014 by only recommending enough bolus to prevent going below the correction range. As described above, the Loop algorithm computes the recommended bolus such that predicted glucose will not dip below the correction range. This may result in future blood glucose levels predicted above correction range, but will prevent a hypoglycemia event shortly after the meal (as is sometimes occurs for people giving a \"pizza bolus\" in traditional pump therapy). Loop will then later make corrections by issuing higher temporary basals. In effect, this algorithm behavior mimics traditional pump therapy of \u201cextended\u201d or \u201cdual wave\u201d bolusing, but with the benefit of added information about actual carbohydrate absorption effects as time goes by. Finally, Loop checks that the result of the calculations is below the maximum single bolus the Loop user specified in their settings. If the calculated bolus is less than the maximum single bolus setting, then the recommended bolus will be displayed in Loop\u2019s bolus tool. Bolusing safety feature If the current blood glucose, or any predicted blood glucose, falls below the suspend threshold, Loop will not return a recommended bolus. When the minimum blood glucose rises above the suspend threshold, the bolus tool will provide a recommended bolus.","title":"Bolus Recommendations"},{"location":"operation/algorithm/bolus/#bolus-recommendations","text":"Loop will recommend bolus insulin corrections when the eventual blood glucose is greater than the correction target and the active insulin plus any active 30-minute temporary basal will not be sufficient to cover the predicted excursion above correction target. These recommendations are not proactively sent to the Loop user through any notification or banner alert; the recommendation is only viewable when the user clicks on the bolus tool. Note that Loop never issues a bolus command automatically; all boluses are initiated by the user. The bolus dose calculation is identical to the dose equation given in the basal recommendations section, with the exception that: the insulin contribution from the currently running temporary basal set by Loop is removed or subtracted from the recommended bolus amount, and the delta is calculated for the top of the correction range, rather than the average of the correction range. For recently saved carbohydrates where the projected carbohydrate absorption will outlast the insulin activity duration (e.g., very slow-digesting meals like pizza or pasta), Loop\u2019s algorithm will inherently decrease the initial meal bolus \u2014 to prevent hypoglycemia events that often occur after these meals \u2014 by only recommending enough bolus to prevent going below the correction range. As described above, the Loop algorithm computes the recommended bolus such that predicted glucose will not dip below the correction range. This may result in future blood glucose levels predicted above correction range, but will prevent a hypoglycemia event shortly after the meal (as is sometimes occurs for people giving a \"pizza bolus\" in traditional pump therapy). Loop will then later make corrections by issuing higher temporary basals. In effect, this algorithm behavior mimics traditional pump therapy of \u201cextended\u201d or \u201cdual wave\u201d bolusing, but with the benefit of added information about actual carbohydrate absorption effects as time goes by. Finally, Loop checks that the result of the calculations is below the maximum single bolus the Loop user specified in their settings. If the calculated bolus is less than the maximum single bolus setting, then the recommended bolus will be displayed in Loop\u2019s bolus tool. Bolusing safety feature If the current blood glucose, or any predicted blood glucose, falls below the suspend threshold, Loop will not return a recommended bolus. When the minimum blood glucose rises above the suspend threshold, the bolus tool will provide a recommended bolus.","title":"Bolus Recommendations"},{"location":"operation/algorithm/overview/","text":"Overview \u2301 Loop\u2019s algorithm for adjusting insulin delivery is oriented around making a blood glucose prediction. Every five minutes, triggered by new blood glucose data, it generates a new prediction. Both bolus recommendations and temporary basal rates are set based on this prediction. Terminology \u2301 This graph and legend illustrates terms commonly used in discussing Loop's algorithm, and shows them in the context of historical and forecasted blood glucose in style similar to the status screen of Loop. Insulin activity duration The insulin activity duration is the duration of the insulin activity curve, and describes the point at which the delivered insulin dose no longer affects blood glucose. The insulin activity duration is 6 hours for Loop's rapid-acting and Fiasp insulin models. Correction range The correction range is the blood glucose range Loop uses to determine corrective actions (e.g., between 90 and 120 mg/dL in the figure). NOTE: Loop\u2019s correction range is a user setting and should not be confused with the target range, typically 70-180 mg/dL, used for the purpose of calculating the percent time in range. Correction minimum The lower or minimum value of the user\u2019s correction range, which is 90 mg/dL in the figure. Correction maximum The upper or maximum value of the user\u2019s correction range, which is 120 mg/dL in the figure. Correction target The correction target is the average value of the correction range. In the overview figure, this is 105 mg/dL given that the correction minimum is 90 mg/dL and the correction maximum is 120 mg/dL. Predicted blood glucose Loop makes a prediction of blood glucose values out for a length of time equal to your insulin action duration. The predicted blood glucose is the basis for how Loop makes its insulin delivery recommendations and actions. Eventual blood glucose The last value of the predicted glucose curve, in other words the very last blood glucose predicted at the end of your insulin action duration. In the figure above, this is 85 mg/dL. Minimum predicted blood glucose The lowest blood glucose value at any point in time within the prediction. In the figure above, this is 77 mg/dL. Delta The delta is the difference between the eventual blood glucose and the correction target. In the overview figure, the eventual blood glucose is 85 mg/dL and the correction target is 105 mg/dL, which means that the delta is -20 mg/dL. Suspend Threshold The suspend threshold is a safety feature of the Loop algorithm. If any predicted blood glucose is below this threshold, the Loop algorithm will issue a temporary basal rate of 0 CGM data Blood glucose readings made by a continuous glucose monitor. Insulin sensitivity factor A configuration value that provides an estimate of how much blood glucose will drop given a unit of insulin. Active insulin Active insulin is the remaining amount of insulin activity from boluses and temporary basal rates relative to a user\u2019s scheduled basal rates. More specifically, it is the total amount of insulin activity due to all bolus and basal insulin delivered within the last N hours, where N is determined by the insulin activity duration. The amount of \u201cactive\u201d insulin depends upon the insulin activity curve, and also accounts for the insulin withheld via basal suspensions. As such, it is possible that the active insulin can be negative. Negative active insulin will result in an increase in predicted blood glucose. The active insulin displayed in Loop's main display does not reflect the currently enacted temporary basal rate, as that basal rate may be canceled or modified before completion over the next 30 minutes. In others words, Loop doesn't count chickens before the eggs hatch...insulin delivery must be confirmed before being added to the active insulin reporting.","title":"Overview"},{"location":"operation/algorithm/overview/#overview","text":"Loop\u2019s algorithm for adjusting insulin delivery is oriented around making a blood glucose prediction. Every five minutes, triggered by new blood glucose data, it generates a new prediction. Both bolus recommendations and temporary basal rates are set based on this prediction.","title":"Overview"},{"location":"operation/algorithm/overview/#terminology","text":"This graph and legend illustrates terms commonly used in discussing Loop's algorithm, and shows them in the context of historical and forecasted blood glucose in style similar to the status screen of Loop. Insulin activity duration The insulin activity duration is the duration of the insulin activity curve, and describes the point at which the delivered insulin dose no longer affects blood glucose. The insulin activity duration is 6 hours for Loop's rapid-acting and Fiasp insulin models. Correction range The correction range is the blood glucose range Loop uses to determine corrective actions (e.g., between 90 and 120 mg/dL in the figure). NOTE: Loop\u2019s correction range is a user setting and should not be confused with the target range, typically 70-180 mg/dL, used for the purpose of calculating the percent time in range. Correction minimum The lower or minimum value of the user\u2019s correction range, which is 90 mg/dL in the figure. Correction maximum The upper or maximum value of the user\u2019s correction range, which is 120 mg/dL in the figure. Correction target The correction target is the average value of the correction range. In the overview figure, this is 105 mg/dL given that the correction minimum is 90 mg/dL and the correction maximum is 120 mg/dL. Predicted blood glucose Loop makes a prediction of blood glucose values out for a length of time equal to your insulin action duration. The predicted blood glucose is the basis for how Loop makes its insulin delivery recommendations and actions. Eventual blood glucose The last value of the predicted glucose curve, in other words the very last blood glucose predicted at the end of your insulin action duration. In the figure above, this is 85 mg/dL. Minimum predicted blood glucose The lowest blood glucose value at any point in time within the prediction. In the figure above, this is 77 mg/dL. Delta The delta is the difference between the eventual blood glucose and the correction target. In the overview figure, the eventual blood glucose is 85 mg/dL and the correction target is 105 mg/dL, which means that the delta is -20 mg/dL. Suspend Threshold The suspend threshold is a safety feature of the Loop algorithm. If any predicted blood glucose is below this threshold, the Loop algorithm will issue a temporary basal rate of 0 CGM data Blood glucose readings made by a continuous glucose monitor. Insulin sensitivity factor A configuration value that provides an estimate of how much blood glucose will drop given a unit of insulin. Active insulin Active insulin is the remaining amount of insulin activity from boluses and temporary basal rates relative to a user\u2019s scheduled basal rates. More specifically, it is the total amount of insulin activity due to all bolus and basal insulin delivered within the last N hours, where N is determined by the insulin activity duration. The amount of \u201cactive\u201d insulin depends upon the insulin activity curve, and also accounts for the insulin withheld via basal suspensions. As such, it is possible that the active insulin can be negative. Negative active insulin will result in an increase in predicted blood glucose. The active insulin displayed in Loop's main display does not reflect the currently enacted temporary basal rate, as that basal rate may be canceled or modified before completion over the next 30 minutes. In others words, Loop doesn't count chickens before the eggs hatch...insulin delivery must be confirmed before being added to the active insulin reporting.","title":"Terminology"},{"location":"operation/algorithm/prediction/","text":"Blood Glucose Prediction \u2301 Loop uses an algorithm to maintain blood glucose in a correction range by predicting the contributions from four individual effects (insulin, carbohydrates, retrospective correction, and blood glucose momentum) at any time t to recommend temporary basal rate corrections and boluses. You can see the individual contributions of these effects by tapping on the predicted blood glucose chart on Loop's status screen. Loop updates this blood glucose prediction every five minutes when a new CGM value has been received and the pump's status has been updated. Just a note, this whole section is fairly technical. While perhaps not the most interesting topic for many readers, if you are seeking the detailed view of the Loop algorithm this discussion is quite useful. If you want a more surface understanding, the overview and temporary basal recommendations sections alone are probably sufficient. Overview \u2301 Before we delve into each of the four individual effects, a general overview figure may be a helpful start. There are four effects summed together to produce Loop's final predicted blood glucose curve. Each individual effect, along with their combined effect, is illustrated in the figure below. Insulin, from boluses and temporary basals, will have a decreasing effect on the prediction. Carbohydrates will have an increasing effect on the prediction. Blood glucose momentum effect can have a positive or negative effect, depending on how blood glucose is trending in the most recent CGM values. As shown in the example below, blood glucose is trending slightly upwards at the time of the prediction. Therefore, the blood glucose momentum effect\u2019s contribution is pulling up the overall prediction from the other three effects for a short time. Retrospective correction is having a decreasing effect on the prediction, indicating that the recent rise in blood glucose was not as large as had been previously predicted by Loop in the recent past. The sections below provide detailed information on each of the four contributions. Insulin Effect \u2301 Most traditional pump users and caregivers are already familiar with the concept of an insulin activity curve, where the insulin\u2019s effect is time-dependent. Insulin takes a little while to affect blood glucose. The insulin effect typically peaks around one hour after giving insulin and then gradually decays. Loop provides users with two different classes of insulin models (i.e., an exponential model and the Walsh model). All of the exponential models have an insulin activity duration of 6 hours, whereas the insulin activity duration is customizable for the Walsh model. The rapid-acting and Fiasp insulin activity curves are modeled as exponential curves that match the shape of the insulin activity curves from insulin labeling, and as observed in both adults and children. The amount of insulin effect remaining, or percent of remaining active insulin after an insulin bolus is delivered, is modeled mathematically in Loop with an exponential decay curve. Insulin Effect Remaining \u2301 If a user\u2019s insulin sensitivity factor (ISF) is 50 mg/dL per 1 unit of insulin and the user gives 2 units of insulin, then the user\u2019s blood glucose would be expected to drop 100 mg/dL within the 6 hours following the insulin delivery. This insulin effect can be visualized in several different ways: the expected active insulin, expected drop in blood glucose every 5 minutes after delivery, and the expected cumulative drop in blood glucose. The figures below use the Rapid Acting - Adult insulin model in Loop. Active Insulin \u2301 This figure shows that 2 units of insulin are given initially, and the corresponding active insulin (i.e., insulin on board IOB) decays according to the curve below. The active insulin at any time is the product of original insulin delivered and the percent of insulin activity remaining. Knowing the expected active insulin over the next 6 hours, and the insulin sensitivity factor (50 mg/dL, in this case), Loop can calculate the expected drop in blood glucose from that dose of insulin as shown in the figure below. NOTE: ISF is also a function of time, which means if the user\u2019s scheduled ISF changes during the insulin activity time, it will change the expected drop in blood glucose due to the insulin effect. Expected Change in Blood Glucose \u2301 Lastly, taking the first derivative (i.e., the rate of change) of the cumulative drop in the blood glucose curve yields the expected change in blood glucose over the insulin activity duration. For each dose of insulin given, Loop calculates the expected discrete drop in blood glucose at each 5-minute period for the insulin activity duration, as shown below. Insulin Effect on Blood Glucose \u2301 For this example, assuming a user\u2019s blood glucose was 205 mg/dL at the time of insulin delivery, Loop would predict a drop in blood glucose due to the two units delivered at 12 pm as shown in the figure below. Scheduled Basal Rates \u2301 In traditional basal/bolus pump therapy, basal rates are set to accommodate the user's endogenous glucose production (EGP) that causes blood glucose to rise. If a user's basal settings were exactly right in traditional pump therapy, the user would have perfectly flat blood glucose all day, all other factors being equal. In reality, people with type 1 diabetes, and their caregivers, know that basal settings are never exactly right. Every day is a little different, and a myriad of factors that affect blood glucose (e.g., including stress, hormones, sleep, etc.) may affect insulin needs. Some people have different basal profiles to accommodate these variations. Some people regularly tune and adjust their basal rates, and/or do so at their endocrinology clinic visits. Since the Loop algorithm assumes that the user-set basal rates are correct, it calculates the effect of insulin relative to scheduled basal rates. If basal rates are not entirely correct, Loop can compensate a bit through the retrospective correction and blood glucose momentum effects, discussed later in this page. The insulin delivery chart below displays a bar-graph history of the temporary basal rates enacted by Loop. The display is relative to the scheduled basal rates entered in the Loop settings. A rate displayed in this chart as +0 would indicate that no temporary basal rate was set and that the basal rate being delivered was the scheduled basal rate. Positive values indicate a temporary basal rate was set above the scheduled basal rate (i.e., more insulin delivered), and negative values indicate that a temporary basal rate was set below the scheduled basal rate (i.e., less insulin delivered). For example, if the user\u2019s scheduled basal rate is 1 U/hr, and Loop gives a temporary basal rate of 3 U/hr, then it will calculate the expected drop in blood glucose due to +2 U/hr of insulin. Similarly if Loop sets a temporary basal rate of 0 U/hr for 1 hour, then the insulin effect will also be relative to the current scheduled basal rate of 1 U/hr, and Loop would predict the user\u2019s blood glucose to increase by the amount of change from -1 U/hr of insulin. If the user\u2019s ISF is 50 mg/dL, then Loop would predict blood glucose to rise 50 mg/dL over the insulin activity duration (6 hours). Here is a real-world example where Loop is setting many temporary basal rates over the course of the day. The light orange bars are the temporary basal rates delivered and the solid orange line is the active insulin at any given time during the day. Total Insulin Effect (combining boluses and temporary basal rates) \u2301 Loop will combine or stack the active insulin of all the discrete (individual) boluses and temporary basal rates over the past insulin activity duration (6 hours), to predict the active insulin for the next 6 hours. As demonstrated above, using the predicted active insulin Loop can predict the blood glucose drop over the next 6 hours. Lastly, the combined effect of bolus and basal insulin are visually represented for the user by Loop\u2019s insulin charts: The insulin effect can be expressed mathematically: where BG is the expected change in blood glucose with the units (mg/dL/5min), ISF is the insulin sensitivity factor (mg/dL/U) at time t, and IA is the insulin activity (U/5min) at time t . Insulin activity can also be thought of as a velocity or rate of change in blood glucose due to insulin. The insulin activity accounts for the EGP and any active insulin from basals and boluses. Carbohydrate Effect \u2301 Carbohydrates will raise blood glucose, but the speed and degree to which they impact blood glucose are dependent on the type of carbohydrates. High glycemic index (GI) carbohydrates will raise blood glucose quickly over a shorter time, whereas low GI foods will raise blood glucose more slowly over a longer period. Foods like candy, juice, and fruits tend to be high GI foods, while pizza, burritos, and quesadillas are usually lower GI foods. Digestion issues like gastroparesis may also contribute to variations in carbohydrate absorption. Because carbohydrate absorption can be quite variable, Loop has a model that dynamically adjusts the expected remaining time of carbohydrate absorption. To start with, Loop allows the user to input a rough guess of how long they think the food or drink will take to absorb. The user\u2019s guess is used as a middle of the road estimate, and Loop\u2019s algorithm will shorten or lengthen it based on observed blood glucose change. For all carbohydrate entries, Loop assumes carbohydrates will not start absorbing for 10 minutes, so there is a 10-minute period of no absorption that is modeled prior to the absorption modeled in the next sections. Linear Carbohydrate Absorption \u2301 Loop takes a conservative view of how fast the remaining carbohydrates will absorb. Because it is safer to under-deliver insulin for long-duration meals, Loop starts out at a minimum rate of absorption based on extending the entered carbohydrate duration by 50%. Said another way, the minimum carbohydrate absorption rate is the total number of grams of carbohydrates over 150% of the entered duration. Using this initial minimum absorption rate, the remaining carbohydrates are modeled to absorb linearly. For example, if the user enters a 72g carbohydrate meal, and selects an estimated absorption time of 4 hours, then Loop will forecast a 12g/hr absorption rate for the next 6 hours. This rate can be termed the minimum absorption rate, which can be represented mathematically as: where MAR is the minimum absorption rate (g/hr), CA is the number of carbohydrates (g) and d is the expected duration (hr) it will take the carbohydrates to absorb. Dynamic Carbohydrate Absorption \u2301 The linear model above is modulated by an additional calculation that uses recently observed blood glucose data to estimate how fast carbohydrates have been absorbing. The expected change in blood glucose due to insulin effects alone is compared to the actual observed changes in blood glucose. This difference is termed the insulin counteraction effect (ICE): where, ICE (mg/dL/5 min) is the insulin counteraction effect, OA is the observed activity (mg/dL/5min) or observed change in blood glucose at time t , and IA is the insulin activity (mg/dL/5min). Insulin counteraction effects are caused by more than just carbohydrates, and can include exercise, sensitivity changes, or incorrectly configured insulin delivery settings (e.g., basal rate, ISF, etc.). However, since the effect of carbohydrates is often dominant (after insulin), Loop can still make useful ongoing adjustments to its carbohydrate model by assuming that the increase in blood glucose is mainly carbohydrate absorption in the period following recorded meal entries. The insulin counteraction effect is converted into an estimated carbohydrate absorption amount by using the current carbohydrate-to-insulin ratio and the insulin sensitivity factor at the time of the recorded meal entry. where AC is the number of carbohydrates absorbed (g/5min), ICE is the insulin counteraction effect, CIR is the carbohydrate-to-insulin ratio (g/U), and ISF is the insulin sensitivity factor (mg/dL/U) at time t . If multiple meal entries are active (i.e., still absorbing), the estimated absorption is split between each carbohydrate entry in proportion to each carbohydrate entry\u2019s minimum absorption rate. For example, if 72g carbohydrates with an expected absorption time of 4 hours was consumed at 12 pm, and another 72g of carbohydrates with an expected absorption time of 2 hours was consumed at 3 pm, then the minimum absorption rate (see MAR equation above) would be 12 g/hr and 6 g/hr respectively, or 1 g/5min and 0.5 g/5min. Examining just the simple linear carbohydrate effect of these two meals: If we further expand this example, by assuming the following at 4pm: that there are still carbohydrates left to be absorbed from both meals, that the estimated insulin counteraction effect (ICE) is +15 , and the user\u2019s CIR is 10 g/U and the ISF is 50 mg/dL/U, then the estimated amount of carbohydrates absorbed at 4pm would be 3g: Those 3g of carbohydrates would then be split amongst the meals proportional to their minimum absorption rates: resulting in 2g of absorption being attributed to Meal 1 and 1g attributed to Meal 2. Minimum Carbohydrate Absorption Rate \u2301 If the estimated carbohydrate absorption of a meal entry is less than what would have been absorbed using the minimum absorption rate, then the minimum absorption rate is used instead. This is to ensure that meal entries expire in a reasonable amount of time. Modeling Remaining Active Carbohydrates \u2301 After the estimated absorbed carbohydrates have been subtracted from each meal entry, the remaining carbohydrates (for each entry) are then forecasted to decay or absorb using the minimum absorption rate. Loop uses this forecast to estimate the effect (active carbohydrates, or carbohydrate activity) of the remaining carbohydrates. The carbohydrate effect can be expressed mathematically using the terms described above: Retrospective Correction Effect \u2301 The retrospective correction effect allows the Loop algorithm to account for effects that are not modeled with the insulin and carbohydrate effects, by comparing historical predictions to the actual blood glucose. In addition to the modeled effects of insulin and carbohydrates, there are many other factors that affect blood glucose (e.g., exercise, stress, hormones, etc.). Many of these effects are active for a period of time. By observing its own forecast error, Loop can estimate the magnitude of these effects and, by assuming that they will continue for some short period of time, incorporate them into the forecast to improve forecast accuracy. To do this, Loop calculates a retrospective forecast with a start time of 30 minutes in the past, ending at the current time. Loop compares the retrospective forecast to the actual observed change in blood glucose, and the difference is summed into a blood glucose velocity or rate of difference: where BG vel is a velocity term (mg/dL per 5min) that represents the average blood glucose difference between the retrospective forecast (RF) and the actual blood glucose (BG) over the last 30 minutes. This term is applied to the current forecast from the insulin and carb effects with a linear decay over the next hour. For example, the first forecast point (t=5) is approximately 100% of this velocity, the forecast point one-half hour from now is adjusted by 50% of the velocity, and points from one hour or more in the future are not affected by this term. The retrospective correction effect can be expressed mathematically: where BG is the predicted change in blood glucose with the units (mg/dL/5min) at time t over the time range of 5 to 60 minutes, and the other term gives the percentage of BG vel that is applied to this effect. The retrospective correction effect can be illustrated with an example: if the BG vel over the past 30 minutes was -10 mg/dL per 5min, then the retrospective correction effect over the next 60 minutes would be as follows: Minutes relative to now ( t=0 ) Percent of BG vel Applied to RC Effect 5 100% -10 10 91% -9.1 15 82% -8.2 20 73% -7.3 25 64% -6.4 30 55% -5.5 35 45% -4.5 40 36% -3.6 45 27% -2.7 50 18% -1.8 55 9% -0.9 60 0% 0 Here\u2019s an example below that shows the retrospective correction effect when the BG vel over the past 30 minutes was -10mg/dL/5min. Blood Glucose Momentum Effect \u2301 The blood glucose momentum effect incorporates a prediction component based on the assumption that recent blood glucose trends tend to persist for a short period of time. In other words, the best predictor of the future is the recent past. The blood glucose momentum portion of the algorithm gives weight or importance to recent blood glucose to improve the near-future forecast. Loop calculates the slope of the last 3 continuous CGM readings (i.e., the last 15 minutes) using linear regression. Using multiple points helps filter out noise in the CGM data while still responding fast to changing situations. That momentum slope (Mslope) is the approximate or average rate of change over the last 15 minutes, though it is normalized to 5 minutes so that the units are (mg/dL/5min). The momentum slope is then blended into the next 20 minutes of predicted blood glucose from the other effects (i.e., insulin, carbohydrates, and retrospective correction effects). This, in essence, makes the next 20 minutes of blood glucose prediction more sensitive to recent blood glucose trends. The blending of the recent trend slope into the next 20 minutes is weighted so that the first prediction point (5 minutes into the future) is highly influenced by the slope, and the influence of the slope gradually decays over the 20 minute time period. The momentum effect can be expressed mathematically as: NOTE: The term is also applied to the combined insulin, carbohydrates, and retrospective correction effects to get the delta blood glucose prediction. The momentum effect can be illustrated with an example: if the last 3 blood glucose readings were 100, 103, and 106 mg/dL, then the slope would be 3 mg/dL per 5 minutes (0.6 mg/dL per minute). The amount of that recent trend or slope applied to the next 20 minutes of predictions (i.e., the next 4 predictions from the other effects) is roughly 100% (3 mg/dL per 5 min) at 5 minutes, 66% (2 mg/dL per 5 min) at 10 minutes, 33% (1 mg/dL per 5 min) at 15 minutes, and 0% (0 mg/dL per 5 min) at 20 minutes. Also, if the combined effect from the insulin, carbohydrates, and retrospective correction is assumed to be a constant 6 mg/dL/5min over the next 20 minutes, then the expected overall effect and the predicted blood glucose can be calculated as follows. Minutes relative to now ( t=0 ) Percent of Slope Applied to Momentum Effect Momentum Effect (3mg/dL/5min) Percent of Other Effects Applied Overall Effect Other Effects (Insulin, Carbohydrate, and Retrospective Correction) Overall Effect (mg/dL/5min) Predicted BG (mg/dL) 5 100% 3 0 6 3 109 10 66.6% 2 33.3%< 6 4 113 15 33.3% 1 66.6% 6 5 118 20 0% 0 100% 6 6 124 This example is illustrated in the figure below. It is also worth noting that Loop will not calculate blood glucose momentum in instances where CGM data is not continuous (i.e., must have at least three continuous CGM readings to draw the best-fit straight line trend). It also will not calculate blood glucose momentum when the last three CGM readings contain any calibration points, as those may not be representative of true blood glucose momentum trends. Predicting Glucose \u2301 As described in the momentum effect section, the momentum effect is blended with the insulin, carbohydrate, and retrospective correction effects to predict the change in blood glucose: Lastly, the forecast or predicted blood glucose BG at time t is the current blood glucose BG plus the sum of all blood glucose effects BG over the time interval [t5, t]: Each individual effect along with the combined effects are illustrated in the figure below. As shown, blood glucose is trending slightly upwards at the time of the prediction. Therefore, the blood glucose momentum effect\u2019s contribution is pulling up the overall prediction from the other three effects for a short time. Retrospective correction is having a dampening effect on the prediction, indicating that the recent rise in blood glucose was not as great as had been previously predicted in the recent past.","title":"Glucose Prediction"},{"location":"operation/algorithm/prediction/#blood-glucose-prediction","text":"Loop uses an algorithm to maintain blood glucose in a correction range by predicting the contributions from four individual effects (insulin, carbohydrates, retrospective correction, and blood glucose momentum) at any time t to recommend temporary basal rate corrections and boluses. You can see the individual contributions of these effects by tapping on the predicted blood glucose chart on Loop's status screen. Loop updates this blood glucose prediction every five minutes when a new CGM value has been received and the pump's status has been updated. Just a note, this whole section is fairly technical. While perhaps not the most interesting topic for many readers, if you are seeking the detailed view of the Loop algorithm this discussion is quite useful. If you want a more surface understanding, the overview and temporary basal recommendations sections alone are probably sufficient.","title":"Blood Glucose Prediction"},{"location":"operation/algorithm/prediction/#overview","text":"Before we delve into each of the four individual effects, a general overview figure may be a helpful start. There are four effects summed together to produce Loop's final predicted blood glucose curve. Each individual effect, along with their combined effect, is illustrated in the figure below. Insulin, from boluses and temporary basals, will have a decreasing effect on the prediction. Carbohydrates will have an increasing effect on the prediction. Blood glucose momentum effect can have a positive or negative effect, depending on how blood glucose is trending in the most recent CGM values. As shown in the example below, blood glucose is trending slightly upwards at the time of the prediction. Therefore, the blood glucose momentum effect\u2019s contribution is pulling up the overall prediction from the other three effects for a short time. Retrospective correction is having a decreasing effect on the prediction, indicating that the recent rise in blood glucose was not as large as had been previously predicted by Loop in the recent past. The sections below provide detailed information on each of the four contributions.","title":"Overview"},{"location":"operation/algorithm/prediction/#insulin-effect","text":"Most traditional pump users and caregivers are already familiar with the concept of an insulin activity curve, where the insulin\u2019s effect is time-dependent. Insulin takes a little while to affect blood glucose. The insulin effect typically peaks around one hour after giving insulin and then gradually decays. Loop provides users with two different classes of insulin models (i.e., an exponential model and the Walsh model). All of the exponential models have an insulin activity duration of 6 hours, whereas the insulin activity duration is customizable for the Walsh model. The rapid-acting and Fiasp insulin activity curves are modeled as exponential curves that match the shape of the insulin activity curves from insulin labeling, and as observed in both adults and children. The amount of insulin effect remaining, or percent of remaining active insulin after an insulin bolus is delivered, is modeled mathematically in Loop with an exponential decay curve.","title":"Insulin Effect"},{"location":"operation/algorithm/prediction/#insulin-effect-remaining","text":"If a user\u2019s insulin sensitivity factor (ISF) is 50 mg/dL per 1 unit of insulin and the user gives 2 units of insulin, then the user\u2019s blood glucose would be expected to drop 100 mg/dL within the 6 hours following the insulin delivery. This insulin effect can be visualized in several different ways: the expected active insulin, expected drop in blood glucose every 5 minutes after delivery, and the expected cumulative drop in blood glucose. The figures below use the Rapid Acting - Adult insulin model in Loop.","title":"Insulin Effect Remaining"},{"location":"operation/algorithm/prediction/#active-insulin","text":"This figure shows that 2 units of insulin are given initially, and the corresponding active insulin (i.e., insulin on board IOB) decays according to the curve below. The active insulin at any time is the product of original insulin delivered and the percent of insulin activity remaining. Knowing the expected active insulin over the next 6 hours, and the insulin sensitivity factor (50 mg/dL, in this case), Loop can calculate the expected drop in blood glucose from that dose of insulin as shown in the figure below. NOTE: ISF is also a function of time, which means if the user\u2019s scheduled ISF changes during the insulin activity time, it will change the expected drop in blood glucose due to the insulin effect.","title":"Active Insulin"},{"location":"operation/algorithm/prediction/#expected-change-in-blood-glucose","text":"Lastly, taking the first derivative (i.e., the rate of change) of the cumulative drop in the blood glucose curve yields the expected change in blood glucose over the insulin activity duration. For each dose of insulin given, Loop calculates the expected discrete drop in blood glucose at each 5-minute period for the insulin activity duration, as shown below.","title":"Expected Change in Blood Glucose"},{"location":"operation/algorithm/prediction/#insulin-effect-on-blood-glucose","text":"For this example, assuming a user\u2019s blood glucose was 205 mg/dL at the time of insulin delivery, Loop would predict a drop in blood glucose due to the two units delivered at 12 pm as shown in the figure below.","title":"Insulin Effect on Blood Glucose"},{"location":"operation/algorithm/prediction/#scheduled-basal-rates","text":"In traditional basal/bolus pump therapy, basal rates are set to accommodate the user's endogenous glucose production (EGP) that causes blood glucose to rise. If a user's basal settings were exactly right in traditional pump therapy, the user would have perfectly flat blood glucose all day, all other factors being equal. In reality, people with type 1 diabetes, and their caregivers, know that basal settings are never exactly right. Every day is a little different, and a myriad of factors that affect blood glucose (e.g., including stress, hormones, sleep, etc.) may affect insulin needs. Some people have different basal profiles to accommodate these variations. Some people regularly tune and adjust their basal rates, and/or do so at their endocrinology clinic visits. Since the Loop algorithm assumes that the user-set basal rates are correct, it calculates the effect of insulin relative to scheduled basal rates. If basal rates are not entirely correct, Loop can compensate a bit through the retrospective correction and blood glucose momentum effects, discussed later in this page. The insulin delivery chart below displays a bar-graph history of the temporary basal rates enacted by Loop. The display is relative to the scheduled basal rates entered in the Loop settings. A rate displayed in this chart as +0 would indicate that no temporary basal rate was set and that the basal rate being delivered was the scheduled basal rate. Positive values indicate a temporary basal rate was set above the scheduled basal rate (i.e., more insulin delivered), and negative values indicate that a temporary basal rate was set below the scheduled basal rate (i.e., less insulin delivered). For example, if the user\u2019s scheduled basal rate is 1 U/hr, and Loop gives a temporary basal rate of 3 U/hr, then it will calculate the expected drop in blood glucose due to +2 U/hr of insulin. Similarly if Loop sets a temporary basal rate of 0 U/hr for 1 hour, then the insulin effect will also be relative to the current scheduled basal rate of 1 U/hr, and Loop would predict the user\u2019s blood glucose to increase by the amount of change from -1 U/hr of insulin. If the user\u2019s ISF is 50 mg/dL, then Loop would predict blood glucose to rise 50 mg/dL over the insulin activity duration (6 hours). Here is a real-world example where Loop is setting many temporary basal rates over the course of the day. The light orange bars are the temporary basal rates delivered and the solid orange line is the active insulin at any given time during the day.","title":"Scheduled Basal Rates"},{"location":"operation/algorithm/prediction/#total-insulin-effect-combining-boluses-and-temporary-basal-rates","text":"Loop will combine or stack the active insulin of all the discrete (individual) boluses and temporary basal rates over the past insulin activity duration (6 hours), to predict the active insulin for the next 6 hours. As demonstrated above, using the predicted active insulin Loop can predict the blood glucose drop over the next 6 hours. Lastly, the combined effect of bolus and basal insulin are visually represented for the user by Loop\u2019s insulin charts: The insulin effect can be expressed mathematically: where BG is the expected change in blood glucose with the units (mg/dL/5min), ISF is the insulin sensitivity factor (mg/dL/U) at time t, and IA is the insulin activity (U/5min) at time t . Insulin activity can also be thought of as a velocity or rate of change in blood glucose due to insulin. The insulin activity accounts for the EGP and any active insulin from basals and boluses.","title":"Total Insulin Effect (combining boluses and temporary basal rates)"},{"location":"operation/algorithm/prediction/#carbohydrate-effect","text":"Carbohydrates will raise blood glucose, but the speed and degree to which they impact blood glucose are dependent on the type of carbohydrates. High glycemic index (GI) carbohydrates will raise blood glucose quickly over a shorter time, whereas low GI foods will raise blood glucose more slowly over a longer period. Foods like candy, juice, and fruits tend to be high GI foods, while pizza, burritos, and quesadillas are usually lower GI foods. Digestion issues like gastroparesis may also contribute to variations in carbohydrate absorption. Because carbohydrate absorption can be quite variable, Loop has a model that dynamically adjusts the expected remaining time of carbohydrate absorption. To start with, Loop allows the user to input a rough guess of how long they think the food or drink will take to absorb. The user\u2019s guess is used as a middle of the road estimate, and Loop\u2019s algorithm will shorten or lengthen it based on observed blood glucose change. For all carbohydrate entries, Loop assumes carbohydrates will not start absorbing for 10 minutes, so there is a 10-minute period of no absorption that is modeled prior to the absorption modeled in the next sections.","title":"Carbohydrate Effect"},{"location":"operation/algorithm/prediction/#linear-carbohydrate-absorption","text":"Loop takes a conservative view of how fast the remaining carbohydrates will absorb. Because it is safer to under-deliver insulin for long-duration meals, Loop starts out at a minimum rate of absorption based on extending the entered carbohydrate duration by 50%. Said another way, the minimum carbohydrate absorption rate is the total number of grams of carbohydrates over 150% of the entered duration. Using this initial minimum absorption rate, the remaining carbohydrates are modeled to absorb linearly. For example, if the user enters a 72g carbohydrate meal, and selects an estimated absorption time of 4 hours, then Loop will forecast a 12g/hr absorption rate for the next 6 hours. This rate can be termed the minimum absorption rate, which can be represented mathematically as: where MAR is the minimum absorption rate (g/hr), CA is the number of carbohydrates (g) and d is the expected duration (hr) it will take the carbohydrates to absorb.","title":"Linear Carbohydrate Absorption"},{"location":"operation/algorithm/prediction/#dynamic-carbohydrate-absorption","text":"The linear model above is modulated by an additional calculation that uses recently observed blood glucose data to estimate how fast carbohydrates have been absorbing. The expected change in blood glucose due to insulin effects alone is compared to the actual observed changes in blood glucose. This difference is termed the insulin counteraction effect (ICE): where, ICE (mg/dL/5 min) is the insulin counteraction effect, OA is the observed activity (mg/dL/5min) or observed change in blood glucose at time t , and IA is the insulin activity (mg/dL/5min). Insulin counteraction effects are caused by more than just carbohydrates, and can include exercise, sensitivity changes, or incorrectly configured insulin delivery settings (e.g., basal rate, ISF, etc.). However, since the effect of carbohydrates is often dominant (after insulin), Loop can still make useful ongoing adjustments to its carbohydrate model by assuming that the increase in blood glucose is mainly carbohydrate absorption in the period following recorded meal entries. The insulin counteraction effect is converted into an estimated carbohydrate absorption amount by using the current carbohydrate-to-insulin ratio and the insulin sensitivity factor at the time of the recorded meal entry. where AC is the number of carbohydrates absorbed (g/5min), ICE is the insulin counteraction effect, CIR is the carbohydrate-to-insulin ratio (g/U), and ISF is the insulin sensitivity factor (mg/dL/U) at time t . If multiple meal entries are active (i.e., still absorbing), the estimated absorption is split between each carbohydrate entry in proportion to each carbohydrate entry\u2019s minimum absorption rate. For example, if 72g carbohydrates with an expected absorption time of 4 hours was consumed at 12 pm, and another 72g of carbohydrates with an expected absorption time of 2 hours was consumed at 3 pm, then the minimum absorption rate (see MAR equation above) would be 12 g/hr and 6 g/hr respectively, or 1 g/5min and 0.5 g/5min. Examining just the simple linear carbohydrate effect of these two meals: If we further expand this example, by assuming the following at 4pm: that there are still carbohydrates left to be absorbed from both meals, that the estimated insulin counteraction effect (ICE) is +15 , and the user\u2019s CIR is 10 g/U and the ISF is 50 mg/dL/U, then the estimated amount of carbohydrates absorbed at 4pm would be 3g: Those 3g of carbohydrates would then be split amongst the meals proportional to their minimum absorption rates: resulting in 2g of absorption being attributed to Meal 1 and 1g attributed to Meal 2.","title":"Dynamic Carbohydrate Absorption"},{"location":"operation/algorithm/prediction/#minimum-carbohydrate-absorption-rate","text":"If the estimated carbohydrate absorption of a meal entry is less than what would have been absorbed using the minimum absorption rate, then the minimum absorption rate is used instead. This is to ensure that meal entries expire in a reasonable amount of time.","title":"Minimum Carbohydrate Absorption Rate"},{"location":"operation/algorithm/prediction/#modeling-remaining-active-carbohydrates","text":"After the estimated absorbed carbohydrates have been subtracted from each meal entry, the remaining carbohydrates (for each entry) are then forecasted to decay or absorb using the minimum absorption rate. Loop uses this forecast to estimate the effect (active carbohydrates, or carbohydrate activity) of the remaining carbohydrates. The carbohydrate effect can be expressed mathematically using the terms described above:","title":"Modeling Remaining Active Carbohydrates"},{"location":"operation/algorithm/prediction/#retrospective-correction-effect","text":"The retrospective correction effect allows the Loop algorithm to account for effects that are not modeled with the insulin and carbohydrate effects, by comparing historical predictions to the actual blood glucose. In addition to the modeled effects of insulin and carbohydrates, there are many other factors that affect blood glucose (e.g., exercise, stress, hormones, etc.). Many of these effects are active for a period of time. By observing its own forecast error, Loop can estimate the magnitude of these effects and, by assuming that they will continue for some short period of time, incorporate them into the forecast to improve forecast accuracy. To do this, Loop calculates a retrospective forecast with a start time of 30 minutes in the past, ending at the current time. Loop compares the retrospective forecast to the actual observed change in blood glucose, and the difference is summed into a blood glucose velocity or rate of difference: where BG vel is a velocity term (mg/dL per 5min) that represents the average blood glucose difference between the retrospective forecast (RF) and the actual blood glucose (BG) over the last 30 minutes. This term is applied to the current forecast from the insulin and carb effects with a linear decay over the next hour. For example, the first forecast point (t=5) is approximately 100% of this velocity, the forecast point one-half hour from now is adjusted by 50% of the velocity, and points from one hour or more in the future are not affected by this term. The retrospective correction effect can be expressed mathematically: where BG is the predicted change in blood glucose with the units (mg/dL/5min) at time t over the time range of 5 to 60 minutes, and the other term gives the percentage of BG vel that is applied to this effect. The retrospective correction effect can be illustrated with an example: if the BG vel over the past 30 minutes was -10 mg/dL per 5min, then the retrospective correction effect over the next 60 minutes would be as follows: Minutes relative to now ( t=0 ) Percent of BG vel Applied to RC Effect 5 100% -10 10 91% -9.1 15 82% -8.2 20 73% -7.3 25 64% -6.4 30 55% -5.5 35 45% -4.5 40 36% -3.6 45 27% -2.7 50 18% -1.8 55 9% -0.9 60 0% 0 Here\u2019s an example below that shows the retrospective correction effect when the BG vel over the past 30 minutes was -10mg/dL/5min.","title":"Retrospective Correction Effect"},{"location":"operation/algorithm/prediction/#blood-glucose-momentum-effect","text":"The blood glucose momentum effect incorporates a prediction component based on the assumption that recent blood glucose trends tend to persist for a short period of time. In other words, the best predictor of the future is the recent past. The blood glucose momentum portion of the algorithm gives weight or importance to recent blood glucose to improve the near-future forecast. Loop calculates the slope of the last 3 continuous CGM readings (i.e., the last 15 minutes) using linear regression. Using multiple points helps filter out noise in the CGM data while still responding fast to changing situations. That momentum slope (Mslope) is the approximate or average rate of change over the last 15 minutes, though it is normalized to 5 minutes so that the units are (mg/dL/5min). The momentum slope is then blended into the next 20 minutes of predicted blood glucose from the other effects (i.e., insulin, carbohydrates, and retrospective correction effects). This, in essence, makes the next 20 minutes of blood glucose prediction more sensitive to recent blood glucose trends. The blending of the recent trend slope into the next 20 minutes is weighted so that the first prediction point (5 minutes into the future) is highly influenced by the slope, and the influence of the slope gradually decays over the 20 minute time period. The momentum effect can be expressed mathematically as: NOTE: The term is also applied to the combined insulin, carbohydrates, and retrospective correction effects to get the delta blood glucose prediction. The momentum effect can be illustrated with an example: if the last 3 blood glucose readings were 100, 103, and 106 mg/dL, then the slope would be 3 mg/dL per 5 minutes (0.6 mg/dL per minute). The amount of that recent trend or slope applied to the next 20 minutes of predictions (i.e., the next 4 predictions from the other effects) is roughly 100% (3 mg/dL per 5 min) at 5 minutes, 66% (2 mg/dL per 5 min) at 10 minutes, 33% (1 mg/dL per 5 min) at 15 minutes, and 0% (0 mg/dL per 5 min) at 20 minutes. Also, if the combined effect from the insulin, carbohydrates, and retrospective correction is assumed to be a constant 6 mg/dL/5min over the next 20 minutes, then the expected overall effect and the predicted blood glucose can be calculated as follows. Minutes relative to now ( t=0 ) Percent of Slope Applied to Momentum Effect Momentum Effect (3mg/dL/5min) Percent of Other Effects Applied Overall Effect Other Effects (Insulin, Carbohydrate, and Retrospective Correction) Overall Effect (mg/dL/5min) Predicted BG (mg/dL) 5 100% 3 0 6 3 109 10 66.6% 2 33.3%< 6 4 113 15 33.3% 1 66.6% 6 5 118 20 0% 0 100% 6 6 124 This example is illustrated in the figure below. It is also worth noting that Loop will not calculate blood glucose momentum in instances where CGM data is not continuous (i.e., must have at least three continuous CGM readings to draw the best-fit straight line trend). It also will not calculate blood glucose momentum when the last three CGM readings contain any calibration points, as those may not be representative of true blood glucose momentum trends.","title":"Blood Glucose Momentum Effect"},{"location":"operation/algorithm/prediction/#predicting-glucose","text":"As described in the momentum effect section, the momentum effect is blended with the insulin, carbohydrate, and retrospective correction effects to predict the change in blood glucose: Lastly, the forecast or predicted blood glucose BG at time t is the current blood glucose BG plus the sum of all blood glucose effects BG over the time interval [t5, t]: Each individual effect along with the combined effects are illustrated in the figure below. As shown, blood glucose is trending slightly upwards at the time of the prediction. Therefore, the blood glucose momentum effect\u2019s contribution is pulling up the overall prediction from the other three effects for a short time. Retrospective correction is having a dampening effect on the prediction, indicating that the recent rise in blood glucose was not as great as had been previously predicted in the recent past.","title":"Predicting Glucose"},{"location":"operation/algorithm/temp-basal/","text":"Basal Adjustments \u2301 The Loop algorithm takes one of four actions depending upon the eventual blood glucose, predicted glucose, and suspend threshold. Note that all temporary basal rate commands are issued for 30 minutes, however they may be updated (re-issued) every 5 minutes. Said another way, Loop may enact a new temporary basal rate every 5 minutes. But, if communication with the pump is lost, the last issued temporary basal rate will last for at most 30 minutes before the pump reverts to the user\u2019s scheduled basal rates. Note: If a user is operating Loop in open-loop mode, the Loop will only recommend basal dosing actions and will not automatically enact those recommendations. Four Possible Actions \u2301 Loop implements one of four possible basal actions: decrease , increase , suspend , or resume a scheduled basal rate. Decrease Basal Rate \u2301 If the eventual blood glucose is less than the correction range and all of the predicted glucose values are above the suspend threshold, then Loop will issue a temporary basal rate that is lower than the current scheduled basal rate to bring the eventual blood glucose up to the correction target. Increase Basal Rate \u2301 If the eventual blood glucose is greater than the correction range and all of the predicted glucose values are both above the suspend threshold and equal to or above the correction range, then Loop will issue a temporary basal rate that is higher than the current basal rate to bring the eventual blood glucose down to the correction target. Suspend Basal Rate \u2301 If the minimum predicted blood glucose goes below the suspend threshold, then Loop will issue a temporary basal rate of zero units per hour, regardless of the eventual blood glucose. Resume Basal Rate \u2301 There are three situations where the Loop algorithm will resume the current scheduled basal rate. If the eventual blood glucose is within the correction range, and all of the predicted glucose values are above the suspend threshold, then Loop will resume the current scheduled basal rate. If the eventual blood glucose is above the correction range, and the predicted glucose values have a temporary excursion below the correction range but still above the suspend threshold, then Loop will resume the current scheduled basal rate. If the Loop algorithm does not have ALL of the data it needs to make a prediction, it will let the remaining temporary basal rate run its duration (maximum of 30 minutes), and then the basal rate will default back to the current scheduled basal rate, thus returning to the same therapy pattern that they would receive using a traditional insulin pump. Determining the Temporary Basal Rate \u2301 To determine the corrective temporary basal rate to implement, Loop calculates a \u201cdose\u201d in the same way doses are calculated in both open-loop and traditional insulin pump therapy. It's also the same math many people on multiple-daily injection therapy use. The benefit of Loop (and all other close-loop algorithms) is that it does this math every 5 minutes, and is far less prone to error than humans doing the math. Loop also does its math based on predicting into the future, which traditional pumps and humans, do not always have the time or inclination to do. The amount of insulin needed, or dose, is calculated using the desired reduction in blood glucose and the user\u2019s ISF. For the Loop algorithm, the desired reduction in blood glucose is the delta between the eventual blood glucose and the correction target: A major difference between traditional pump therapy and how the Loop calculates dose is that in pump therapy the current blood glucose is used to estimate the dose, whereas in the Loop algorithm the eventual and minimum blood glucose predictions are also used in determining dosing decisions. Loop then converts the dose into a basal rate using the Loop\u2019s temporary basal rate duration of 30 minutes: where BR is the basal rate (U/hr), which is the amount of insulin needed over the next 30 minutes to bring the eventual blood glucose to the correction target. The basal rate, however, is the amount of basal rate needed beyond the user\u2019s scheduled basal rate. As such, the required basal rate can be determined by: where RBR is the required basal rate and SBR is the scheduled basal rate. Finally, Loop compares the RBR with the user-specified maximum temporary basal rate setting to determine the temporary basal to issue: If RBR \u2265 maximum basal rate, then Loop will issue the maximum basal rate If RBR < maximum temporary basal rate, then Loop will issue RBR After running the temporary basal calculation described above, Loop checks whether there is already an appropriate basal running with at least 10 minutes remaining. If so, Loop will not reissue the temporary basal. However, if the recommended temporary basal differs from the currently running temporary basal \u2014 or the current scheduled basal if no temporary is running \u2014 then Loop will replace the current basal rate with the recommended temporary basal rate. As mentioned at the beginning of this section, the process of determining whether a temporary basal should be issued is repeated every 5 minutes. Temporary Basal Rate Calculation Example \u2301 To illustrate how the Loop calculates the temporary basal rate to issue, consider the calculation for the following scenario: Eventual blood glucose = 200 mg/dL Correction target = 100 mg/dL ISF = 50 mg/dL/U Current scheduled basal rate (SBR) is 1 U/hr Maximum basal setting (set by user in Loop) = 6 U/hr First, calculate the dose: Then, convert the dose into a basal rate to be issued for the next 30 minutes: Next, calculate the required basal rate: Lastly, compare the required basal rate to the maximum temporary basal rate, and find that Loop will enact a temporary basal rate of 5 U/hr for 30 minutes since this temporary basal rate is below the maximum temporary basal rate of 6 U/hr, which was set by the user in Loop app settings.","title":"Temp Basal Adjustments"},{"location":"operation/algorithm/temp-basal/#basal-adjustments","text":"The Loop algorithm takes one of four actions depending upon the eventual blood glucose, predicted glucose, and suspend threshold. Note that all temporary basal rate commands are issued for 30 minutes, however they may be updated (re-issued) every 5 minutes. Said another way, Loop may enact a new temporary basal rate every 5 minutes. But, if communication with the pump is lost, the last issued temporary basal rate will last for at most 30 minutes before the pump reverts to the user\u2019s scheduled basal rates. Note: If a user is operating Loop in open-loop mode, the Loop will only recommend basal dosing actions and will not automatically enact those recommendations.","title":"Basal Adjustments"},{"location":"operation/algorithm/temp-basal/#four-possible-actions","text":"Loop implements one of four possible basal actions: decrease , increase , suspend , or resume a scheduled basal rate.","title":"Four Possible Actions"},{"location":"operation/algorithm/temp-basal/#decrease-basal-rate","text":"If the eventual blood glucose is less than the correction range and all of the predicted glucose values are above the suspend threshold, then Loop will issue a temporary basal rate that is lower than the current scheduled basal rate to bring the eventual blood glucose up to the correction target.","title":"Decrease Basal Rate"},{"location":"operation/algorithm/temp-basal/#increase-basal-rate","text":"If the eventual blood glucose is greater than the correction range and all of the predicted glucose values are both above the suspend threshold and equal to or above the correction range, then Loop will issue a temporary basal rate that is higher than the current basal rate to bring the eventual blood glucose down to the correction target.","title":"Increase Basal Rate"},{"location":"operation/algorithm/temp-basal/#suspend-basal-rate","text":"If the minimum predicted blood glucose goes below the suspend threshold, then Loop will issue a temporary basal rate of zero units per hour, regardless of the eventual blood glucose.","title":"Suspend Basal Rate"},{"location":"operation/algorithm/temp-basal/#resume-basal-rate","text":"There are three situations where the Loop algorithm will resume the current scheduled basal rate. If the eventual blood glucose is within the correction range, and all of the predicted glucose values are above the suspend threshold, then Loop will resume the current scheduled basal rate. If the eventual blood glucose is above the correction range, and the predicted glucose values have a temporary excursion below the correction range but still above the suspend threshold, then Loop will resume the current scheduled basal rate. If the Loop algorithm does not have ALL of the data it needs to make a prediction, it will let the remaining temporary basal rate run its duration (maximum of 30 minutes), and then the basal rate will default back to the current scheduled basal rate, thus returning to the same therapy pattern that they would receive using a traditional insulin pump.","title":"Resume Basal Rate"},{"location":"operation/algorithm/temp-basal/#determining-the-temporary-basal-rate","text":"To determine the corrective temporary basal rate to implement, Loop calculates a \u201cdose\u201d in the same way doses are calculated in both open-loop and traditional insulin pump therapy. It's also the same math many people on multiple-daily injection therapy use. The benefit of Loop (and all other close-loop algorithms) is that it does this math every 5 minutes, and is far less prone to error than humans doing the math. Loop also does its math based on predicting into the future, which traditional pumps and humans, do not always have the time or inclination to do. The amount of insulin needed, or dose, is calculated using the desired reduction in blood glucose and the user\u2019s ISF. For the Loop algorithm, the desired reduction in blood glucose is the delta between the eventual blood glucose and the correction target: A major difference between traditional pump therapy and how the Loop calculates dose is that in pump therapy the current blood glucose is used to estimate the dose, whereas in the Loop algorithm the eventual and minimum blood glucose predictions are also used in determining dosing decisions. Loop then converts the dose into a basal rate using the Loop\u2019s temporary basal rate duration of 30 minutes: where BR is the basal rate (U/hr), which is the amount of insulin needed over the next 30 minutes to bring the eventual blood glucose to the correction target. The basal rate, however, is the amount of basal rate needed beyond the user\u2019s scheduled basal rate. As such, the required basal rate can be determined by: where RBR is the required basal rate and SBR is the scheduled basal rate. Finally, Loop compares the RBR with the user-specified maximum temporary basal rate setting to determine the temporary basal to issue: If RBR \u2265 maximum basal rate, then Loop will issue the maximum basal rate If RBR < maximum temporary basal rate, then Loop will issue RBR After running the temporary basal calculation described above, Loop checks whether there is already an appropriate basal running with at least 10 minutes remaining. If so, Loop will not reissue the temporary basal. However, if the recommended temporary basal differs from the currently running temporary basal \u2014 or the current scheduled basal if no temporary is running \u2014 then Loop will replace the current basal rate with the recommended temporary basal rate. As mentioned at the beginning of this section, the process of determining whether a temporary basal should be issued is repeated every 5 minutes.","title":"Determining the Temporary Basal Rate"},{"location":"operation/algorithm/temp-basal/#temporary-basal-rate-calculation-example","text":"To illustrate how the Loop calculates the temporary basal rate to issue, consider the calculation for the following scenario: Eventual blood glucose = 200 mg/dL Correction target = 100 mg/dL ISF = 50 mg/dL/U Current scheduled basal rate (SBR) is 1 U/hr Maximum basal setting (set by user in Loop) = 6 U/hr First, calculate the dose: Then, convert the dose into a basal rate to be issued for the next 30 minutes: Next, calculate the required basal rate: Lastly, compare the required basal rate to the maximum temporary basal rate, and find that Loop will enact a temporary basal rate of 5 U/hr for 30 minutes since this temporary basal rate is below the maximum temporary basal rate of 6 U/hr, which was set by the user in Loop app settings.","title":"Temporary Basal Rate Calculation Example"},{"location":"operation/features/battery/","text":"Pump Battery \u2301 One common confusion point for new Loop users is how to interpret their pump's battery levels and whether they need to change their pump batteries based on which pieces of information. Discharge Curves \u2301 There are generally two different types of AAA batteries that we use in these Medtronic pumps; alkaline or lithium. To understand pump battery levels, you first need to know a little about battery discharge curves . It's not a hard concept...basically how a battery dies over time as it is used or sits in a drawer. More technically said, a battery discharge curve is the measure of volts that a battery puts out over time. Batteries start at a higher voltage output and slowly that voltage output degrades over time (or use) until the battery no longer provides enough \"ummph\" to keep the electronic gadget going. BUT, alkaline batteries and lithium batteries have different discharge curves due to the chemistry inside them, and the curves can be slightly different depending on the environment (temperature) and battery manufacturer. Alkaline batteries have a relatively steady voltage drop over time, as shown below. Notice the shape of the curve has a significant amount of time in the 1.3 to 1.2 volts range, and a relatively smooth decline to about 1.2 volts. Lithium batteries have a much steadier voltage output over time, as shown below. Notice how the shape of the curve is relatively flat for a large portion of the battery life before suddenly off around 1.3 volts. What does the above information mean in terms of Looping? A lithium battery at 1.3v is going to have a much quicker time to death than an alkaline battery sitting at 1.3v. You might only get a couple of hours of looping left when a lithium battery is at 1.3v, but an alkaline battery at 1.3v might go for several more days. So when we talk about setting alarm levels in either system, your battery type is an important consideration. Medtronic Pump Battery Level Indicator \u2301 If you read Medtronic's literature, it will tell you to use Energizer alkaline batteries in their pumps. Why would that be? Hint: the answer doesn't mean that Duracell batteries are inherently worse than Energizer or that lithium batteries won't work in Medtronic pumps. The answer is all about the accuracy of their little pump battery level indicator on their pump's screen. Medtronic calibrated their pump battery level indicator to: Energizer alkaline batteries Normal (non-Loop) uses Temperatures between 37\u00b0F (3\u00b0C) to 104\u00b0F (40\u00b0C). In other words, Medtronic ran experiments to see exactly how long an Energizer alkaline battery will last in normal pump use and made their own discharge curve. They programmed their pump battery level indicator to change from 4 bars to 3 bars to 2 bars to 1 bar based on that particular discharge curve. However, Loop users are slightly more demanding on the pump's battery/voltage than simply delivering insulin. We are also asking for the pump to perform radio communications, in addition to delivering insulin. Those radio communications needs a slightly higher voltage than the typical \"normal\" pump use. So while a non-Looper might be ok running their pump until a voltage of about 1.12 for insulin delivery, radio communications might stop at a voltage output of about 1.17. If you experiment with your Looping pump, you'll find Loop will turn red from failed pump comms before the pump actually fails at insulin delivery. This difference between \"failure\" voltages needs to be considered when determining how much useful battery life is left for a pump battery. In summary, that little pump battery indicator on the Medtronic pump screen is ONLY useful if you are: not using the pump for Looping, using Energizer alkaline batteries, and in the temperature environment similar to their testing. Loop users should not rely on their Medtronic pump screen's pump battery indicator, and instead use the Loop's pump battery level indicator. Loop's Pump Battery Level Indicator \u2301 Keeping the information about battery discharge curves in mind, Loop developers tested various battery brands and types to develop discharge curves for Loop users. These discharge curves form the basis of the pump battery level indicator found in the top right of the Loop's main display screen and the pump battery notifications provided by the Loop app. The pump battery level indicator will also report in %. For x23 and x54 model users, the Loop's pump battery level will move in 25% increments. For x15 and x22 model users, the Loop's pump battery level will move in discrete % increments. Based on the battery type selected and the pump model being used, the Loop's pump battery level notifications are designed to give the user about 8 hours of notice before pump communications are likely to fail. The Loop user should have some additional time after pump comms fail before actual insulin delivery would stop. Nightscout Pump Battery Display \u2301 The Nightscout information regarding pump battery levels will depend on pump model being used. If you use an x23 or x54 pump and MySentry, the pump levels are reported as a percent to NS, because that's how MySentry reports the data to Loop. The packets use 100%, 75%, 50%, and 25% increments, and the Loop's main display matches the NS pump display. If you use an x22 or x15 pump, the pump levels are reported as voltage readings to NS because Loop has to specifically request the voltage reading from the pump. The Loop's main display will show pump battery level as discrete %, not the individual voltage measurement. No matter what pump you are using, you can always get the current pump battery's voltage by using the RileyLink's Read Pump Status command. The extra communications effort for non-MySentry model pumps will mean slightly shorter battery life vs. MySentry model pumps. Nightscout Pump Battery Alarms \u2301 The Nightscout alarms are based on the Heroku settings that you have input specifically. If you don't specifically set them, Nightscout will use the default settings for pump battery alerts as shown below: Nightscout pump battery levels, if you leave things at default installation, will not trigger alarms. If however you add a setting of PUMP_ENABLE_ALERTS to true , you will receive pump battery notifications according to the levels shown in the parenthesis above. For example, your x23 pump is reporting its levels in percent, therefore you'd receive a yellow warning alarm at 30% and an urgent red alarm at 20%. Your x22 pump however is reporting its levels at voltage readings, therefore you'd receive a warning yellow alarm at 1.35v and an urgent red alarm at 1.30v. Are the default NS alarm levels going to work for you? The answer depends on what type of battery level you are using, what model pump you are using, and how much advance notification you want to receive before needing to change a pump battery. There is a bit of personal preference and experimentation to finding what works for you. For x22 or x15 pump users, the NS alert settings that may need to be adjusted are the ones based on voltage. Generally speaking, for a x22 or x15 pump using alkaline batteries, the default NS alarm levels will be too early to be useful and lead you to change out your battery too frequently. Alkaline batteries can go to low 1.2s or high 1.1s before Looping starts to have communication problems. How much lower than the default voltage 1.35/1.30 alarm levels you want to go will depend on how far in advance you want to be warned about an upcoming battery change. If however, you are using a x22 or x15 pump with lithium batteries, the default 1.35v/1.30v alarm levels may be completely appropriate. Remember how the lithium battery curves at the start of this discussion died off quickly around 1.3v? You won't get hardly any heads-up notice for a lithium battery if you set the alarm below 1.3v. For x23 or x54 pump users, the NS alert settings that may need to be adjusted are the ones based on percentage settings. Alkaline and lithium batteries should have automatically had their percentage-remaining based on the correct battery type in your Loop settings. So, generally speaking the default NS alert levels don't generally need adjusting. However, if you are using lithium batteries, the drop off between 75% to 25% can be quite dramatic and not be easy to anticipate (especially if the drop happens overnight). As an alternative method of tracking pump battery changes, you could use the insulin age (IAGE) plug-in to anticipate your pump battery changes as well. For example, after tracking pump battery life on my 723 using energizer batteries lithium batteries for the last several months, I know that we get about 15 days plus a handful of hours. The amount of hours more beyond 15 days varies depending on how much we've interacted with the pump buttons directly, whether we've looped the full 15-days solid, and if the pump has been in extreme weather (cold weather can sap pump battery life). By tracking the pump battery changes with NS's careportal \"insulin cartridge change\", I can see in advance if we are nearing an overnight on a 15 day battery and decide to change batteries before overnight to prevent any middle-of-night battery issues. Lithium batteries will get a significantly longer life than an alkaline battery. Experiment and track your particular pump model and battery type to understand what NS settings will work best for you. Do not rely on the pump's on-screen pump battery indicator, especially when using lithium batteries.","title":"Pump Battery"},{"location":"operation/features/battery/#pump-battery","text":"One common confusion point for new Loop users is how to interpret their pump's battery levels and whether they need to change their pump batteries based on which pieces of information.","title":"Pump Battery"},{"location":"operation/features/battery/#discharge-curves","text":"There are generally two different types of AAA batteries that we use in these Medtronic pumps; alkaline or lithium. To understand pump battery levels, you first need to know a little about battery discharge curves . It's not a hard concept...basically how a battery dies over time as it is used or sits in a drawer. More technically said, a battery discharge curve is the measure of volts that a battery puts out over time. Batteries start at a higher voltage output and slowly that voltage output degrades over time (or use) until the battery no longer provides enough \"ummph\" to keep the electronic gadget going. BUT, alkaline batteries and lithium batteries have different discharge curves due to the chemistry inside them, and the curves can be slightly different depending on the environment (temperature) and battery manufacturer. Alkaline batteries have a relatively steady voltage drop over time, as shown below. Notice the shape of the curve has a significant amount of time in the 1.3 to 1.2 volts range, and a relatively smooth decline to about 1.2 volts. Lithium batteries have a much steadier voltage output over time, as shown below. Notice how the shape of the curve is relatively flat for a large portion of the battery life before suddenly off around 1.3 volts. What does the above information mean in terms of Looping? A lithium battery at 1.3v is going to have a much quicker time to death than an alkaline battery sitting at 1.3v. You might only get a couple of hours of looping left when a lithium battery is at 1.3v, but an alkaline battery at 1.3v might go for several more days. So when we talk about setting alarm levels in either system, your battery type is an important consideration.","title":"Discharge Curves"},{"location":"operation/features/battery/#medtronic-pump-battery-level-indicator","text":"If you read Medtronic's literature, it will tell you to use Energizer alkaline batteries in their pumps. Why would that be? Hint: the answer doesn't mean that Duracell batteries are inherently worse than Energizer or that lithium batteries won't work in Medtronic pumps. The answer is all about the accuracy of their little pump battery level indicator on their pump's screen. Medtronic calibrated their pump battery level indicator to: Energizer alkaline batteries Normal (non-Loop) uses Temperatures between 37\u00b0F (3\u00b0C) to 104\u00b0F (40\u00b0C). In other words, Medtronic ran experiments to see exactly how long an Energizer alkaline battery will last in normal pump use and made their own discharge curve. They programmed their pump battery level indicator to change from 4 bars to 3 bars to 2 bars to 1 bar based on that particular discharge curve. However, Loop users are slightly more demanding on the pump's battery/voltage than simply delivering insulin. We are also asking for the pump to perform radio communications, in addition to delivering insulin. Those radio communications needs a slightly higher voltage than the typical \"normal\" pump use. So while a non-Looper might be ok running their pump until a voltage of about 1.12 for insulin delivery, radio communications might stop at a voltage output of about 1.17. If you experiment with your Looping pump, you'll find Loop will turn red from failed pump comms before the pump actually fails at insulin delivery. This difference between \"failure\" voltages needs to be considered when determining how much useful battery life is left for a pump battery. In summary, that little pump battery indicator on the Medtronic pump screen is ONLY useful if you are: not using the pump for Looping, using Energizer alkaline batteries, and in the temperature environment similar to their testing. Loop users should not rely on their Medtronic pump screen's pump battery indicator, and instead use the Loop's pump battery level indicator.","title":"Medtronic Pump Battery Level Indicator"},{"location":"operation/features/battery/#loops-pump-battery-level-indicator","text":"Keeping the information about battery discharge curves in mind, Loop developers tested various battery brands and types to develop discharge curves for Loop users. These discharge curves form the basis of the pump battery level indicator found in the top right of the Loop's main display screen and the pump battery notifications provided by the Loop app. The pump battery level indicator will also report in %. For x23 and x54 model users, the Loop's pump battery level will move in 25% increments. For x15 and x22 model users, the Loop's pump battery level will move in discrete % increments. Based on the battery type selected and the pump model being used, the Loop's pump battery level notifications are designed to give the user about 8 hours of notice before pump communications are likely to fail. The Loop user should have some additional time after pump comms fail before actual insulin delivery would stop.","title":"Loop's Pump Battery Level Indicator"},{"location":"operation/features/battery/#nightscout-pump-battery-display","text":"The Nightscout information regarding pump battery levels will depend on pump model being used. If you use an x23 or x54 pump and MySentry, the pump levels are reported as a percent to NS, because that's how MySentry reports the data to Loop. The packets use 100%, 75%, 50%, and 25% increments, and the Loop's main display matches the NS pump display. If you use an x22 or x15 pump, the pump levels are reported as voltage readings to NS because Loop has to specifically request the voltage reading from the pump. The Loop's main display will show pump battery level as discrete %, not the individual voltage measurement. No matter what pump you are using, you can always get the current pump battery's voltage by using the RileyLink's Read Pump Status command. The extra communications effort for non-MySentry model pumps will mean slightly shorter battery life vs. MySentry model pumps.","title":"Nightscout Pump Battery Display"},{"location":"operation/features/battery/#nightscout-pump-battery-alarms","text":"The Nightscout alarms are based on the Heroku settings that you have input specifically. If you don't specifically set them, Nightscout will use the default settings for pump battery alerts as shown below: Nightscout pump battery levels, if you leave things at default installation, will not trigger alarms. If however you add a setting of PUMP_ENABLE_ALERTS to true , you will receive pump battery notifications according to the levels shown in the parenthesis above. For example, your x23 pump is reporting its levels in percent, therefore you'd receive a yellow warning alarm at 30% and an urgent red alarm at 20%. Your x22 pump however is reporting its levels at voltage readings, therefore you'd receive a warning yellow alarm at 1.35v and an urgent red alarm at 1.30v. Are the default NS alarm levels going to work for you? The answer depends on what type of battery level you are using, what model pump you are using, and how much advance notification you want to receive before needing to change a pump battery. There is a bit of personal preference and experimentation to finding what works for you. For x22 or x15 pump users, the NS alert settings that may need to be adjusted are the ones based on voltage. Generally speaking, for a x22 or x15 pump using alkaline batteries, the default NS alarm levels will be too early to be useful and lead you to change out your battery too frequently. Alkaline batteries can go to low 1.2s or high 1.1s before Looping starts to have communication problems. How much lower than the default voltage 1.35/1.30 alarm levels you want to go will depend on how far in advance you want to be warned about an upcoming battery change. If however, you are using a x22 or x15 pump with lithium batteries, the default 1.35v/1.30v alarm levels may be completely appropriate. Remember how the lithium battery curves at the start of this discussion died off quickly around 1.3v? You won't get hardly any heads-up notice for a lithium battery if you set the alarm below 1.3v. For x23 or x54 pump users, the NS alert settings that may need to be adjusted are the ones based on percentage settings. Alkaline and lithium batteries should have automatically had their percentage-remaining based on the correct battery type in your Loop settings. So, generally speaking the default NS alert levels don't generally need adjusting. However, if you are using lithium batteries, the drop off between 75% to 25% can be quite dramatic and not be easy to anticipate (especially if the drop happens overnight). As an alternative method of tracking pump battery changes, you could use the insulin age (IAGE) plug-in to anticipate your pump battery changes as well. For example, after tracking pump battery life on my 723 using energizer batteries lithium batteries for the last several months, I know that we get about 15 days plus a handful of hours. The amount of hours more beyond 15 days varies depending on how much we've interacted with the pump buttons directly, whether we've looped the full 15-days solid, and if the pump has been in extreme weather (cold weather can sap pump battery life). By tracking the pump battery changes with NS's careportal \"insulin cartridge change\", I can see in advance if we are nearing an overnight on a 15 day battery and decide to change batteries before overnight to prevent any middle-of-night battery issues. Lithium batteries will get a significantly longer life than an alkaline battery. Experiment and track your particular pump model and battery type to understand what NS settings will work best for you. Do not rely on the pump's on-screen pump battery indicator, especially when using lithium batteries.","title":"Nightscout Pump Battery Alarms"},{"location":"operation/features/bolus/","text":"Bolus \u2301 To start a bolus entry, tap on the double orange triangles (circled below) in the toolbar at the bottom of the Loop status screen. The Loop app will open to the Bolus screen. This looks similar to the Meal Bolus screen, but doesn't list the meal entry. If Loop predicts you need more insulin, there will be a recommended value. In this example, the current glucose is below the correction range, but the prediction is well above the range. Loop allows you to dip below the correction range but its recommended bolus will be limited by your Suspend Threshold. Check back once your blood glucose (BG) starts to rise and there will probably be a bigger recommendation. You can tap on the Recommended line and that value will be transferred to the Bolus line or tap on 0.0u on the Bolus row and type in your desired bolus amount. As soon as a value is entered on the Bolus row, the Deliver button turns blue and can be tapped to deliver that amount via your pump. Correction Bolus \u2301 Loop reassesses your insulin needs every time a new BG reading is detected, typically every 5 minutes. If Loop predicts that your BG will be above the high end of your correction range at the end of the Duration of Insulin Activity (DIA) and that your BG will not dip below the suspend threshold at any point during that time period, it will calculate a Correction Bolus. Loop will not give an alert when a correction bolus is being recommended, the bolus entry tool must be clicked to check for one. The Loop pill in Nightscout will display when Loop is recommending a correction bolus. If you are using the master branch or the automatic-bolus branch with Dosing Strategy set to Temp Basal Loop will provide increased temporary basal rates until it has delivered enough insulin to bring predicted BG into range The increased temporary basal rates are subject to your Delivery Limits. If you are using the automatic-bolus branch with Dosing Strategy set to Automatic Bolus Loop will recalculate the correction bolus at each successive loop interval, i.e., every 5 minutes Loop will then automatically deliver 40% of that new correction value Each automatic bolus is subject to your Delivery Limits Bolus Status Line \u2301 When the phone is in portrait mode, a bolus status line will appear below the Heads Up Display when Loop is sending a bolus command to the pump. The \"starting bolus\" indicator is shown in the left screenshot above. Once the bolus begins, the bolused xx of yy with the circle display begins, as shown in the right screenshot above. If you change your mind, just click on the bolus status line while the bolus is in progress to cancel your bolus, as shown in the screenshot below. If you see a 'pump is suspended notice' in the bolus status line after cancelling your bolus, just tap on it to resume pump operations. Bolus Failure Notifications \u2301 On occasion, you will receive a notification that a bolus may have failed. If you're using AB branch, this can happen when an automatic bolus is in progress. In some of these cases, the bolus was delivered. On a Medtronic pump, you should check the pump screen to verify the bolus status before attempting to redeliver a failed bolus. Omnipod users can hear the clicks if the room is quiet enough. If you get an uncertain delivery message, you may still see the \"bolused xx of yy\" display continue for as long as it would have taken to actually deliver the bolus. This display is driven by a timer and logic on the phone. (Loop is not asking the pump repeatedly - \"are you done yet?\"). You may want to interrupt an uncertain bolus if it is large, evaluate status and then resume with a fresh bolus. Loop should update the status the next time it contacts the pump. It can determine whether that bolus actually went through or not and will update the screen. Look at the Event History screen (accessed by tapping the Active Insulin or Insulin Delivery plots). Turn your phone to landscape orientation and you should see either \"Certain\" or \"Uncertain\" at the end of each Bolus record. (If you tap on the specific record, even more detail is displayed.) If an \"uncertain\" delivery is not resolved, try this: Omnipod: Execute a Read Pod Status command Medtronic: Execute a Fetch Recent History command If that does not resolve the issue, please tap on Loop Settings, Issue Report and email it to yourself. Then post on Facebook or Zulipchat, explain what happened and say you have an Issue Report. Someone should reach out to you.","title":"Bolus"},{"location":"operation/features/bolus/#bolus","text":"To start a bolus entry, tap on the double orange triangles (circled below) in the toolbar at the bottom of the Loop status screen. The Loop app will open to the Bolus screen. This looks similar to the Meal Bolus screen, but doesn't list the meal entry. If Loop predicts you need more insulin, there will be a recommended value. In this example, the current glucose is below the correction range, but the prediction is well above the range. Loop allows you to dip below the correction range but its recommended bolus will be limited by your Suspend Threshold. Check back once your blood glucose (BG) starts to rise and there will probably be a bigger recommendation. You can tap on the Recommended line and that value will be transferred to the Bolus line or tap on 0.0u on the Bolus row and type in your desired bolus amount. As soon as a value is entered on the Bolus row, the Deliver button turns blue and can be tapped to deliver that amount via your pump.","title":"Bolus"},{"location":"operation/features/bolus/#correction-bolus","text":"Loop reassesses your insulin needs every time a new BG reading is detected, typically every 5 minutes. If Loop predicts that your BG will be above the high end of your correction range at the end of the Duration of Insulin Activity (DIA) and that your BG will not dip below the suspend threshold at any point during that time period, it will calculate a Correction Bolus. Loop will not give an alert when a correction bolus is being recommended, the bolus entry tool must be clicked to check for one. The Loop pill in Nightscout will display when Loop is recommending a correction bolus. If you are using the master branch or the automatic-bolus branch with Dosing Strategy set to Temp Basal Loop will provide increased temporary basal rates until it has delivered enough insulin to bring predicted BG into range The increased temporary basal rates are subject to your Delivery Limits. If you are using the automatic-bolus branch with Dosing Strategy set to Automatic Bolus Loop will recalculate the correction bolus at each successive loop interval, i.e., every 5 minutes Loop will then automatically deliver 40% of that new correction value Each automatic bolus is subject to your Delivery Limits","title":"Correction Bolus"},{"location":"operation/features/bolus/#bolus-status-line","text":"When the phone is in portrait mode, a bolus status line will appear below the Heads Up Display when Loop is sending a bolus command to the pump. The \"starting bolus\" indicator is shown in the left screenshot above. Once the bolus begins, the bolused xx of yy with the circle display begins, as shown in the right screenshot above. If you change your mind, just click on the bolus status line while the bolus is in progress to cancel your bolus, as shown in the screenshot below. If you see a 'pump is suspended notice' in the bolus status line after cancelling your bolus, just tap on it to resume pump operations.","title":"Bolus Status Line"},{"location":"operation/features/bolus/#bolus-failure-notifications","text":"On occasion, you will receive a notification that a bolus may have failed. If you're using AB branch, this can happen when an automatic bolus is in progress. In some of these cases, the bolus was delivered. On a Medtronic pump, you should check the pump screen to verify the bolus status before attempting to redeliver a failed bolus. Omnipod users can hear the clicks if the room is quiet enough. If you get an uncertain delivery message, you may still see the \"bolused xx of yy\" display continue for as long as it would have taken to actually deliver the bolus. This display is driven by a timer and logic on the phone. (Loop is not asking the pump repeatedly - \"are you done yet?\"). You may want to interrupt an uncertain bolus if it is large, evaluate status and then resume with a fresh bolus. Loop should update the status the next time it contacts the pump. It can determine whether that bolus actually went through or not and will update the screen. Look at the Event History screen (accessed by tapping the Active Insulin or Insulin Delivery plots). Turn your phone to landscape orientation and you should see either \"Certain\" or \"Uncertain\" at the end of each Bolus record. (If you tap on the specific record, even more detail is displayed.) If an \"uncertain\" delivery is not resolved, try this: Omnipod: Execute a Read Pod Status command Medtronic: Execute a Fetch Recent History command If that does not resolve the issue, please tap on Loop Settings, Issue Report and email it to yourself. Then post on Facebook or Zulipchat, explain what happened and say you have an Issue Report. Someone should reach out to you.","title":"Bolus Failure Notifications"},{"location":"operation/features/carbs/","text":"Meal Entry \u2301 To start a new meal entry, tap on the green plate icon (circled below) in the toolbar at the bottom of the Loop status screen. Your Loop app will open to the Add Carb Entry screen. Many Loopers increase the carbohydrate amount to cover the expected effect of protein and adjust the expected absorption time for fat in their meal entry. For simplicity, the rest of this page only refers to carbs because all the figures show carbs or carbohydrates in the menus. You should consider the whole meal, including fat and protein, especially if you eat lower carb. Meal Entry - Fast Version There is a lot of information on this page, most of which will become second nature. At first, it may seem incredibly complicated. The short version is here (assuming you accept all the default settings that Loop offers). Tap meal entry icon on toolbar Enter number of grams of carbs in the Add Carb Entry screen Tap continue to advance to the Meal Bolus screen Tap Recommended line to transfer the value to the Bolus line Tap Deliver Things to Know Do not enter carbs into your Medtronic pump If you use your Medtronic pump bolus wizard or carb entry screen, the pump will give you insulin but Loop will not know about the carbs The Loop predictions will be off and next time Loop reads the reservoir history on the pump, it will probably send your basal rate to zero If you enter carbs in the Nightscout careportal, they will not be detected by Loop There may be times you want to do this, e.g., you want to indicate a low treatment you don't want Loop to know about New Meals \u2301 The figure below shows step-by-step instructions on initiating the meal entry in Loop. Note that when you tap continue this takes you to the Meal Bolus screen. The carb entry is not saved until you complete the Meal Bolus screen. To start recording your meal, simply enter the desired number of carbs in the Amount Consumed line. The default Date is the current date and time, but you can easily scroll the time forward or back. If you inadvertently missed recording an earlier meal, just scroll the time back to when that food started to absorb. If you want to prebolus some portion of the meal that you're about to eat, just scroll the time forward. You can prebolus part of your meal with the current time, and then record a second entry by scrolling the time forward for an hour or two to prebolus a slower absorping item, e.g., a steak that may not start absorbing right away. Next, you have the option to select your absorption time and select an icon. This is not required - you can just accept the default taco absorption time and keep going. The standard icons and absorption times are listed below. You may have modified these by doing a Code Customization . The lollipop corresponds to a 2 hour absorption (FAST) The taco corresponds to a 3 hour absorption (MEDIUM) The pizza corresponds to a 4 hour absorption (SLOW) If you don't want to use the default taco absorption time, you can tap on the lollipop or the pizza icon to select those absorption times, or manually enter an absorption time between 30 min and 8 hours (method described below). If you want more detail recorded about the meal, there are alternative food icons and even text labels you can select. The alternative food icons are revealed by tapping anywhere on Food Type row that is not a lollipop, taco or pizza icon. These alternative food icons are arranged (scroll left or right) based upon how long each food takes to absorb. From left to right is FAST, MEDIUM, SLOW or OTHER. If you mix two icons from different categories, the absorption time updates to the longest absorption time. With three or more, you should double-check the absorption time and adjust it if necessary. You can also tap on the abc that appears in the lower left corner and manually type in your food label. Note that the lollipop, taco and pizza do not show up on the Nightscout screen whereas the alternative icons and labels are displayed. Regardless of the choice of icons on the Food Type row, you have the option to adjust the Absorption Time in half-hour increments from 30 minutes to 8 hours. (Note the dial may go past 8 hours, but it spins back to 8 if you try to exceed that time.) Loop will initially estimate your absorption time at 150% of the time that you enter. As a result, carbs entered using the taco icon will initially be treated as 4.5 hour absorption. More about this later in the Dynamic Carb Absorption section. You do not have to enter all carbs for a meal at the same absorption or eating time. If you want to enter some of the meal's carbs as faster and some as slower, you can log the meal over several individual entries. For example, for meals that have sugary carbs as well as slow acting carbs (Chinese food), you may want to record some carbs as lollipop and some as pizza. Another example would be steak and potatoes, you may want to record the potatoes with a current start time and taco absorption and the steak with a start time of 1-2 hours into the future and a 5 hour absorption time. When you are done recording a given food entry, press Continue and the Meal Bolus tool will open. Meal Bolus \u2301 You can tap on the Recommended line and that value will be transferred to the Bolus line, OR tap on 0.0u on the Bolus row and type in your desired bolus amount OR Save Without Bolusing The Save Without Bolusing option is used if you'd like to add to your meal entry or do not want to accept a bolus right now. The meal entry is NOT saved until you either Deliver or Save Without Bolusing . The graph at the top of the Meal Bolus screen will show your BG prediction based upon your meal entry and desired bolus amount. You can adjust your desired bolus amount or click <Carb Entry to adjust your meal entry and then return to Meal Bolus to see how your BG prediction changes. When you're ready to bolus, click Deliver . If you start a bolus and plan to add additional meal entries, you will probably need to Save without Bolusing for the next entry because Loop will mid-bolus, and you cannot initiate a new bolus while one is in progress. After entering the rest of the meal, don't forget to bolus manually. If you need to modify or cancel a bolus in progress, turn the phone to portait orientation and tap the bolus in progress line right below the heads up display (HUD). Loop will immediately cancel the in-progress bolus. If you desire, then you can bolus manually to modify the insulin to be delivered via bolus. Remember - once the Deliver button is tapped, the carb entry associated with that bolus is saved. Loop will increase insulin delivery based on that entry. So if you canceled a bolus prior to modifying a carb entry, be sure to edit the carbs already saved instead of entering a new carb entry. If your BG is below your correction range, Loop's Recommended bolus will have a small warning above it stating that \"Current glucose of xx is below correction range\". You can either skip the bolus or enter a portion or all of the Recommended bolus. If your BG is below your suspend threshold, Loop will not recommend a bolus. If this happens, you can calculate the bolus using your carbohydrate ratio and enter a portion or all of this amount or you can set a 15 minute timer and wait for your BG to start to rise and then reassess when and how much to bolus. Automatic-Bolus (AB) Branch \u2301 Loopers who are using AB still typically prebolus and/or bolus for meals. The amount of Recommended insulin that will appear in the Meal Bolus screen will be the full amount of the bolus Loop recommends (not the 40% partial bolus delivered automatically). As discussed above, you can accept this recommendation or enter a different amount, however, and this is very important , if your Dosing Strategy is set to Automatic Bolus, by entering less than the recommended amount and tapping Deliver or tapping Save Without Bolusing , you are telling Loop to deliver the remaining recommended insulin in the future using 40% of the recommended bolus at each successive Loop interval. Note that this same automatic delivery of insulin in response to entered carbs occurs in the master branch, or when Dosing Strategy is set to Temp Basal in AB branch, but the delivery via temporary basal rates is slower, providing more time for an error to be noticed. By the same token, AB branch responds more quickly to increases in blood glucose. Dynamic Carb Absorption \u2301 Loop observes the blood glucose impact of the meal within the 150% absorption time window. Loop calculates how many carbs have been absorbed (regardless of how many you entered) based on your BG pattern and your settings. You can watch the progression of Loop's observations of your meal by tapping on the Active Carbohydrates chart at the bottom of Loop's main screen and watching the insulin counteraction effects (ICE) on the Carbohydrates screen. An example of the screen is on the left side of the figure below. An explanation of the dual lines for each entry and the color coding scheme is explained below the figure. Top line of each entry Amount you entered, time of entry, absorption time entered Bottom line of each entry (changes with each CGM reading) Amount absorbed, estimated time when amount you entered will be absorbed Color codes while within the 150% absorption time window Green: amount absorbed is less than 10% above the entered amount Yellow: amount absorbed exceeds 10% above the entered amount Color codes after 150% absorption time window expires Grey: amount absorbed is within 10% of the entered amount Yellow: amount absorbed is exceeds 10% above or below the entered amount The information available on the Carbohydrates screen disappears for any meals not still active at midnight, so if you're looking for details as to how a particular meal absorbed, you need to screenshot or otherwise capture this information before midnight. Previous entries can be modified or deleted through this screen. To adjust an entry, simply tap on it (you don't need to tap the Edit Carb Entry at the top of the screen). You can change a prebolus time, modify carb amounts, or adjust absorption times (even mid-meal). To delete an entry, you first tap Edit Carb Entry and tap on the red circle to the left of the entry that you would like to delete. It is a little counterintuitive, but the Edit Carb Entry button lets you delete, but not edit an entry. Edit Meals \u2301 Adjusting a meal entry can be a particularly useful tool when: You did not finish an entire meal that you bolused for, You did not get to eat the meal at the time you originally expected, You ate more servings than originally entered, or You suspect your carb count was in error because BGs are rising more/less than expected. Avoid Double Meal Entries \u2301 Be Aware If you have accidentally made duplicate entries for the same meal, click on the Active Carbohydrates chart in the main Loop screen and tap Edit Carb Entry to delete the redundant entries. Deleting the meal entry will not impact the insulin that has already been delivered, but it will alert Loop to adjust your BG projection for purposes of calculating future insulin delivery. Third Party Apps \u2301 Please see Loop Permissions . Carb Absorption Model \u2301 For more information about the way Loop models the effects of carbs, insulin, etc., see the algorithm page .","title":"Meal Entries"},{"location":"operation/features/carbs/#meal-entry","text":"To start a new meal entry, tap on the green plate icon (circled below) in the toolbar at the bottom of the Loop status screen. Your Loop app will open to the Add Carb Entry screen. Many Loopers increase the carbohydrate amount to cover the expected effect of protein and adjust the expected absorption time for fat in their meal entry. For simplicity, the rest of this page only refers to carbs because all the figures show carbs or carbohydrates in the menus. You should consider the whole meal, including fat and protein, especially if you eat lower carb. Meal Entry - Fast Version There is a lot of information on this page, most of which will become second nature. At first, it may seem incredibly complicated. The short version is here (assuming you accept all the default settings that Loop offers). Tap meal entry icon on toolbar Enter number of grams of carbs in the Add Carb Entry screen Tap continue to advance to the Meal Bolus screen Tap Recommended line to transfer the value to the Bolus line Tap Deliver Things to Know Do not enter carbs into your Medtronic pump If you use your Medtronic pump bolus wizard or carb entry screen, the pump will give you insulin but Loop will not know about the carbs The Loop predictions will be off and next time Loop reads the reservoir history on the pump, it will probably send your basal rate to zero If you enter carbs in the Nightscout careportal, they will not be detected by Loop There may be times you want to do this, e.g., you want to indicate a low treatment you don't want Loop to know about","title":"Meal Entry"},{"location":"operation/features/carbs/#new-meals","text":"The figure below shows step-by-step instructions on initiating the meal entry in Loop. Note that when you tap continue this takes you to the Meal Bolus screen. The carb entry is not saved until you complete the Meal Bolus screen. To start recording your meal, simply enter the desired number of carbs in the Amount Consumed line. The default Date is the current date and time, but you can easily scroll the time forward or back. If you inadvertently missed recording an earlier meal, just scroll the time back to when that food started to absorb. If you want to prebolus some portion of the meal that you're about to eat, just scroll the time forward. You can prebolus part of your meal with the current time, and then record a second entry by scrolling the time forward for an hour or two to prebolus a slower absorping item, e.g., a steak that may not start absorbing right away. Next, you have the option to select your absorption time and select an icon. This is not required - you can just accept the default taco absorption time and keep going. The standard icons and absorption times are listed below. You may have modified these by doing a Code Customization . The lollipop corresponds to a 2 hour absorption (FAST) The taco corresponds to a 3 hour absorption (MEDIUM) The pizza corresponds to a 4 hour absorption (SLOW) If you don't want to use the default taco absorption time, you can tap on the lollipop or the pizza icon to select those absorption times, or manually enter an absorption time between 30 min and 8 hours (method described below). If you want more detail recorded about the meal, there are alternative food icons and even text labels you can select. The alternative food icons are revealed by tapping anywhere on Food Type row that is not a lollipop, taco or pizza icon. These alternative food icons are arranged (scroll left or right) based upon how long each food takes to absorb. From left to right is FAST, MEDIUM, SLOW or OTHER. If you mix two icons from different categories, the absorption time updates to the longest absorption time. With three or more, you should double-check the absorption time and adjust it if necessary. You can also tap on the abc that appears in the lower left corner and manually type in your food label. Note that the lollipop, taco and pizza do not show up on the Nightscout screen whereas the alternative icons and labels are displayed. Regardless of the choice of icons on the Food Type row, you have the option to adjust the Absorption Time in half-hour increments from 30 minutes to 8 hours. (Note the dial may go past 8 hours, but it spins back to 8 if you try to exceed that time.) Loop will initially estimate your absorption time at 150% of the time that you enter. As a result, carbs entered using the taco icon will initially be treated as 4.5 hour absorption. More about this later in the Dynamic Carb Absorption section. You do not have to enter all carbs for a meal at the same absorption or eating time. If you want to enter some of the meal's carbs as faster and some as slower, you can log the meal over several individual entries. For example, for meals that have sugary carbs as well as slow acting carbs (Chinese food), you may want to record some carbs as lollipop and some as pizza. Another example would be steak and potatoes, you may want to record the potatoes with a current start time and taco absorption and the steak with a start time of 1-2 hours into the future and a 5 hour absorption time. When you are done recording a given food entry, press Continue and the Meal Bolus tool will open.","title":"New Meals"},{"location":"operation/features/carbs/#meal-bolus","text":"You can tap on the Recommended line and that value will be transferred to the Bolus line, OR tap on 0.0u on the Bolus row and type in your desired bolus amount OR Save Without Bolusing The Save Without Bolusing option is used if you'd like to add to your meal entry or do not want to accept a bolus right now. The meal entry is NOT saved until you either Deliver or Save Without Bolusing . The graph at the top of the Meal Bolus screen will show your BG prediction based upon your meal entry and desired bolus amount. You can adjust your desired bolus amount or click <Carb Entry to adjust your meal entry and then return to Meal Bolus to see how your BG prediction changes. When you're ready to bolus, click Deliver . If you start a bolus and plan to add additional meal entries, you will probably need to Save without Bolusing for the next entry because Loop will mid-bolus, and you cannot initiate a new bolus while one is in progress. After entering the rest of the meal, don't forget to bolus manually. If you need to modify or cancel a bolus in progress, turn the phone to portait orientation and tap the bolus in progress line right below the heads up display (HUD). Loop will immediately cancel the in-progress bolus. If you desire, then you can bolus manually to modify the insulin to be delivered via bolus. Remember - once the Deliver button is tapped, the carb entry associated with that bolus is saved. Loop will increase insulin delivery based on that entry. So if you canceled a bolus prior to modifying a carb entry, be sure to edit the carbs already saved instead of entering a new carb entry. If your BG is below your correction range, Loop's Recommended bolus will have a small warning above it stating that \"Current glucose of xx is below correction range\". You can either skip the bolus or enter a portion or all of the Recommended bolus. If your BG is below your suspend threshold, Loop will not recommend a bolus. If this happens, you can calculate the bolus using your carbohydrate ratio and enter a portion or all of this amount or you can set a 15 minute timer and wait for your BG to start to rise and then reassess when and how much to bolus.","title":"Meal Bolus"},{"location":"operation/features/carbs/#automatic-bolus-ab-branch","text":"Loopers who are using AB still typically prebolus and/or bolus for meals. The amount of Recommended insulin that will appear in the Meal Bolus screen will be the full amount of the bolus Loop recommends (not the 40% partial bolus delivered automatically). As discussed above, you can accept this recommendation or enter a different amount, however, and this is very important , if your Dosing Strategy is set to Automatic Bolus, by entering less than the recommended amount and tapping Deliver or tapping Save Without Bolusing , you are telling Loop to deliver the remaining recommended insulin in the future using 40% of the recommended bolus at each successive Loop interval. Note that this same automatic delivery of insulin in response to entered carbs occurs in the master branch, or when Dosing Strategy is set to Temp Basal in AB branch, but the delivery via temporary basal rates is slower, providing more time for an error to be noticed. By the same token, AB branch responds more quickly to increases in blood glucose.","title":"Automatic-Bolus (AB) Branch"},{"location":"operation/features/carbs/#dynamic-carb-absorption","text":"Loop observes the blood glucose impact of the meal within the 150% absorption time window. Loop calculates how many carbs have been absorbed (regardless of how many you entered) based on your BG pattern and your settings. You can watch the progression of Loop's observations of your meal by tapping on the Active Carbohydrates chart at the bottom of Loop's main screen and watching the insulin counteraction effects (ICE) on the Carbohydrates screen. An example of the screen is on the left side of the figure below. An explanation of the dual lines for each entry and the color coding scheme is explained below the figure. Top line of each entry Amount you entered, time of entry, absorption time entered Bottom line of each entry (changes with each CGM reading) Amount absorbed, estimated time when amount you entered will be absorbed Color codes while within the 150% absorption time window Green: amount absorbed is less than 10% above the entered amount Yellow: amount absorbed exceeds 10% above the entered amount Color codes after 150% absorption time window expires Grey: amount absorbed is within 10% of the entered amount Yellow: amount absorbed is exceeds 10% above or below the entered amount The information available on the Carbohydrates screen disappears for any meals not still active at midnight, so if you're looking for details as to how a particular meal absorbed, you need to screenshot or otherwise capture this information before midnight. Previous entries can be modified or deleted through this screen. To adjust an entry, simply tap on it (you don't need to tap the Edit Carb Entry at the top of the screen). You can change a prebolus time, modify carb amounts, or adjust absorption times (even mid-meal). To delete an entry, you first tap Edit Carb Entry and tap on the red circle to the left of the entry that you would like to delete. It is a little counterintuitive, but the Edit Carb Entry button lets you delete, but not edit an entry.","title":"Dynamic Carb Absorption"},{"location":"operation/features/carbs/#edit-meals","text":"Adjusting a meal entry can be a particularly useful tool when: You did not finish an entire meal that you bolused for, You did not get to eat the meal at the time you originally expected, You ate more servings than originally entered, or You suspect your carb count was in error because BGs are rising more/less than expected.","title":"Edit Meals"},{"location":"operation/features/carbs/#avoid-double-meal-entries","text":"Be Aware If you have accidentally made duplicate entries for the same meal, click on the Active Carbohydrates chart in the main Loop screen and tap Edit Carb Entry to delete the redundant entries. Deleting the meal entry will not impact the insulin that has already been delivered, but it will alert Loop to adjust your BG projection for purposes of calculating future insulin delivery.","title":"Avoid Double Meal Entries"},{"location":"operation/features/carbs/#third-party-apps","text":"Please see Loop Permissions .","title":"Third Party Apps"},{"location":"operation/features/carbs/#carb-absorption-model","text":"For more information about the way Loop models the effects of carbs, insulin, etc., see the algorithm page .","title":"Carb Absorption Model"},{"location":"operation/features/healthapp/","text":"Health App \u2301 Loop app uses the iPhone's Health app to store BGs, insulin, and carbohydrate data. You can check your Health App settings as shown here . The figure and description from below are from iOS 12, but with the help of your favorite search engine, you can determine how to get similar plots with iOS 14. Summaries of your carbohydrates, insulin, and BG results can be found by clicking on the Browse option at the bottom toolbar of the Health app. Blood glucose data are located in the Vitals section, Carbohydrates are in the Nutrition section, and insulin data are in the Other Data section. If you tap the star on the \"add to favorites\" slider for the individual data categories (insulin, BGs, carbohydrates), the data from those categories will be added to your Health toolbar's Summary view for easy quick reference and access. The summary data for the categories can help you follow monthly trends, help identify periods of insulin sensitivity/resistance, evaluate total daily insulin use, breakdown of basal vs bolus insulin, and carbohydrate consumptions. You can sort your data trends by day, week, month, or year views and scroll back through time in each of those data trends. You can even quickly use these data for endocrinology appointments discussions...as they provide the endocrinologist with a very quick and useful set of data points directly from your Loop system.","title":"Health app"},{"location":"operation/features/healthapp/#health-app","text":"Loop app uses the iPhone's Health app to store BGs, insulin, and carbohydrate data. You can check your Health App settings as shown here . The figure and description from below are from iOS 12, but with the help of your favorite search engine, you can determine how to get similar plots with iOS 14. Summaries of your carbohydrates, insulin, and BG results can be found by clicking on the Browse option at the bottom toolbar of the Health app. Blood glucose data are located in the Vitals section, Carbohydrates are in the Nutrition section, and insulin data are in the Other Data section. If you tap the star on the \"add to favorites\" slider for the individual data categories (insulin, BGs, carbohydrates), the data from those categories will be added to your Health toolbar's Summary view for easy quick reference and access. The summary data for the categories can help you follow monthly trends, help identify periods of insulin sensitivity/resistance, evaluate total daily insulin use, breakdown of basal vs bolus insulin, and carbohydrate consumptions. You can sort your data trends by day, week, month, or year views and scroll back through time in each of those data trends. You can even quickly use these data for endocrinology appointments discussions...as they provide the endocrinologist with a very quick and useful set of data points directly from your Loop system.","title":"Health App"},{"location":"operation/features/ice/","text":"Insulin Counteraction Effects \u2301 Tapping on your Carbohydrates graph will open up a page that tracks your carb entries for the day (since midnight). At the top of the page is a useful graphic called Insulin Counteraction Effects (ICE for short). What is it? Basically, a graphical representation of predicted upward-BG effects vs. encountered upward-BG effects. Consider the possible sources of triggers that counteract insulin (in other words, make BGs go up) food stress illness someone sat too close to you As we all know, this list can be long but, on \"normal\" days FOOD will be the single strongest \"insulin counteracter\". Food will be the most influence on making BGs go up. There are also other reasons that BGs climb when we may have expected them to be steady; basals being set too low, failed infusion site, etc. If we assume that it's a \"normal\" day (basals are close to correct, illness is not an issue, the site is good), Loop will expect most of the UPWARD pressure on BGs are from food. Loop is calling that upward pressure Insulin Counteraction Effect (ICE). This is a pretty reasonable assumption so let's use that for the rest of this discussion. ICE display \u2301 Let's take a look at an example day using the screenshot below. The graph at the top of your ICE page represents that upward pressure Loop expects from the food entries. The predicted ICE is shown as grey bars. As a meal is tracked by Loop, you'll see green bars of observed ICE. When you make a food entry originally, Loop will save your entry as you've made it. On the line below your original entry, Loop will also start tracking your food entry assuming a 1.5 times longer carb absorption time. This helps Loop track carbs that may actually be absorbing longer than you expected (part of that whole dynamic carb absorption modeling). Loop will be updating that value of \"observed\" carb absorption time as well as absorbed carbs as your meal goes on. Practical use \u2301 So how can we use this information to make our Looping experience better? The answer is probably best illustrated using a real-world example. Chinese food...in fact, THIS Chinese dish. General Tso's chicken. As you can see in the recipe, loads of fast carbs with ingredients like hoisin sauce, brown sugar, and cornstarch. But also slower carbs like chicken. Rice can be a difficult one because for us, it acts fast but also seems to have a long tail. It was a busy day and I really didn't want to count carbs. Ok, even on the slow days I don't want to count carbs. I just eyeballed the bowl of food and guessed. As I entered the food in originally, I was still trying to come up with a good guess on the ratio of fast:slow carbs but kid was in a hurry to eat. My initial guess around 3:30pm was 70g of carbs at 5 hours absorption (note: it gets edited to 80g in a little bit), we bolused for that and she started to eat. About 10 minutes later, I decided to add 10g of fast-acting carbs at 1-hour absorption to help with the sauce's speedy carbs. Watching what was going on a little later...BGs were rising at a decent clip and I had a feeling I really didn't cover things super well...so I edited the original 70g entry, adding 10g and making it 80g instead. (That's why there is a 2U bolus around 4:20pm.) And of course around 5:40pm there was a little bit of nibbling on the leftovers as we put them into the fridge. We gave 10g for that. BGs climbed a bit more, not surprising given how we were underestimating fast carbs at this point...but still not so bad at 180 peak BG. (Anna gave 2 units correction at the peak because there was dessert coming later that night and she wanted to be ready for it without too much pre-bolus.) So, how can I use the ICE info to make this meal better? I can look at the observed ICE information and the observed carb entry Loop has recorded to adjust my insulin bolusing the next time we eat this meal. For example, the biggest weakness I had in this (and suspected it even as I did the initial bolus) was that I underestimated the sauce's fast carbs. I can see this in the observed ICE graph having the early green peaks after the meal, and in the way that the observed carb distribution was more like 7:2 vs my original guess of 8:1 (slow:fast carbs). Overall, it appears that I guess on overall carb content pretty closely (90g vs. 89g observed). Next time we have General Tso's chicken, I will likely bolus it as 70g at 5 hours and 20g at 2 hours. So remember to check your ICE page at the end of a meal's absorption. By checking in on the meal's observed behaviors, you'll have a good starting point to fine-tuning any new or unknown carb breakdown. Side note: remember this conversation is assuming you have basals fairly well set and are not sick. If other factors could be significantly causing your BGs to swing that Loop doesn't know about (bad sites, illness, or basal rates that need to be adjusted), they may be attributed to ICE when they really aren't food-related. In those cases, address the underlying cause and then use the ICE pages when you've come back to \"normal\".","title":"Using ICE info"},{"location":"operation/features/ice/#insulin-counteraction-effects","text":"Tapping on your Carbohydrates graph will open up a page that tracks your carb entries for the day (since midnight). At the top of the page is a useful graphic called Insulin Counteraction Effects (ICE for short). What is it? Basically, a graphical representation of predicted upward-BG effects vs. encountered upward-BG effects. Consider the possible sources of triggers that counteract insulin (in other words, make BGs go up) food stress illness someone sat too close to you As we all know, this list can be long but, on \"normal\" days FOOD will be the single strongest \"insulin counteracter\". Food will be the most influence on making BGs go up. There are also other reasons that BGs climb when we may have expected them to be steady; basals being set too low, failed infusion site, etc. If we assume that it's a \"normal\" day (basals are close to correct, illness is not an issue, the site is good), Loop will expect most of the UPWARD pressure on BGs are from food. Loop is calling that upward pressure Insulin Counteraction Effect (ICE). This is a pretty reasonable assumption so let's use that for the rest of this discussion.","title":"Insulin Counteraction Effects"},{"location":"operation/features/ice/#ice-display","text":"Let's take a look at an example day using the screenshot below. The graph at the top of your ICE page represents that upward pressure Loop expects from the food entries. The predicted ICE is shown as grey bars. As a meal is tracked by Loop, you'll see green bars of observed ICE. When you make a food entry originally, Loop will save your entry as you've made it. On the line below your original entry, Loop will also start tracking your food entry assuming a 1.5 times longer carb absorption time. This helps Loop track carbs that may actually be absorbing longer than you expected (part of that whole dynamic carb absorption modeling). Loop will be updating that value of \"observed\" carb absorption time as well as absorbed carbs as your meal goes on.","title":"ICE display"},{"location":"operation/features/ice/#practical-use","text":"So how can we use this information to make our Looping experience better? The answer is probably best illustrated using a real-world example. Chinese food...in fact, THIS Chinese dish. General Tso's chicken. As you can see in the recipe, loads of fast carbs with ingredients like hoisin sauce, brown sugar, and cornstarch. But also slower carbs like chicken. Rice can be a difficult one because for us, it acts fast but also seems to have a long tail. It was a busy day and I really didn't want to count carbs. Ok, even on the slow days I don't want to count carbs. I just eyeballed the bowl of food and guessed. As I entered the food in originally, I was still trying to come up with a good guess on the ratio of fast:slow carbs but kid was in a hurry to eat. My initial guess around 3:30pm was 70g of carbs at 5 hours absorption (note: it gets edited to 80g in a little bit), we bolused for that and she started to eat. About 10 minutes later, I decided to add 10g of fast-acting carbs at 1-hour absorption to help with the sauce's speedy carbs. Watching what was going on a little later...BGs were rising at a decent clip and I had a feeling I really didn't cover things super well...so I edited the original 70g entry, adding 10g and making it 80g instead. (That's why there is a 2U bolus around 4:20pm.) And of course around 5:40pm there was a little bit of nibbling on the leftovers as we put them into the fridge. We gave 10g for that. BGs climbed a bit more, not surprising given how we were underestimating fast carbs at this point...but still not so bad at 180 peak BG. (Anna gave 2 units correction at the peak because there was dessert coming later that night and she wanted to be ready for it without too much pre-bolus.) So, how can I use the ICE info to make this meal better? I can look at the observed ICE information and the observed carb entry Loop has recorded to adjust my insulin bolusing the next time we eat this meal. For example, the biggest weakness I had in this (and suspected it even as I did the initial bolus) was that I underestimated the sauce's fast carbs. I can see this in the observed ICE graph having the early green peaks after the meal, and in the way that the observed carb distribution was more like 7:2 vs my original guess of 8:1 (slow:fast carbs). Overall, it appears that I guess on overall carb content pretty closely (90g vs. 89g observed). Next time we have General Tso's chicken, I will likely bolus it as 70g at 5 hours and 20g at 2 hours. So remember to check your ICE page at the end of a meal's absorption. By checking in on the meal's observed behaviors, you'll have a good starting point to fine-tuning any new or unknown carb breakdown. Side note: remember this conversation is assuming you have basals fairly well set and are not sick. If other factors could be significantly causing your BGs to swing that Loop doesn't know about (bad sites, illness, or basal rates that need to be adjusted), they may be attributed to ICE when they really aren't food-related. In those cases, address the underlying cause and then use the ICE pages when you've come back to \"normal\".","title":"Practical use"},{"location":"operation/features/notifications/","text":"Loop Notifications \u2301 Loop provides discrete notifications on the iPhone and Watch which will appear on the (locked) screen and vibrate, depending on your notification settings of Loop. Omnipod \u2301 Most beep alarms are disabled for a much more discrete use of the omnipod. Only the following audible acknowledgments or alarms are currently used: Pod activated acknowledgment when filling the pod with enough insulin when pairing a new Pod. Pod expiration advisory alarm at 72 hours/3 days (which you can silence in the pod status settings ) Pod empty reservoir (which you can silence in the pod status settings ) Pod deactivation acknowledgment Pod fault alarm (also called a screamer) when reaching the max life of the Pod: 80 hours (3 days + 8 hours) or a fault/occlusion happens. (which you can silence using the replace pod ) command in the pod settings page) Notification settings for Loop \u2301 You can customize the way notifications of Loop are behaving in the Settings App of the iPhone: Settings of Loop: Loop Failure \u2301 At 20, 40, 60, and 120 minutes, there is a Loop Failure notification. This mostly happens when the connection is lost for a longer period of time between the CGM or the Rileylink and Loop. Bolus Failure \u2301 If Loop detects that a bolus was not able to be delivered, it will provide a notification. Bolus failures are usually due to stale pump data. Try fetching recent history from the RileyLink menu to update pump data. Loop will also notify of partial bolus deliveries. Low Reservoir \u2301 Medtronic At 20% and 10% remaining reservoir volume, there is a Low Reservoir notification. Omnipod At <30U, <20U, <10U Empty Reservoir \u2301 Loop will notify when the reservoir is empty. Loop will notify you every minute with this notification. Omnipod Normally you will have 5-30 minutes to replace the pod, but do know the pod can scream at any moment from this point on. Pod Expiration (Omnipod) \u2301 You can customize the time of notification when to replace your pod any time from 1 hour up to 71 hours (3 days - 1 hour) after staring a new pod or you change the time later in the [pod configuration settings]../loop-settings/omnipod-pump.md#configuration). The expiry alarm will always sound when the pod reaches a running full 3 days (72 hours) which you can silence in the pod status settings . Low Battery (Medtronic) \u2301 Loop will notify when battery levels have approximately 8-10 hours of battery life remaining. Remote Notifications \u2301 Loop does not have a remote notification to other devices. If you are a remotely monitoring parent, you will want to read here about setting up pushover alerts using your Nightscout site if you want proactive notifications of looping related information.","title":"Loop Notifications"},{"location":"operation/features/notifications/#loop-notifications","text":"Loop provides discrete notifications on the iPhone and Watch which will appear on the (locked) screen and vibrate, depending on your notification settings of Loop.","title":"Loop Notifications"},{"location":"operation/features/notifications/#omnipod","text":"Most beep alarms are disabled for a much more discrete use of the omnipod. Only the following audible acknowledgments or alarms are currently used: Pod activated acknowledgment when filling the pod with enough insulin when pairing a new Pod. Pod expiration advisory alarm at 72 hours/3 days (which you can silence in the pod status settings ) Pod empty reservoir (which you can silence in the pod status settings ) Pod deactivation acknowledgment Pod fault alarm (also called a screamer) when reaching the max life of the Pod: 80 hours (3 days + 8 hours) or a fault/occlusion happens. (which you can silence using the replace pod ) command in the pod settings page)","title":"Omnipod"},{"location":"operation/features/notifications/#notification-settings-for-loop","text":"You can customize the way notifications of Loop are behaving in the Settings App of the iPhone: Settings of Loop:","title":"Notification settings for Loop"},{"location":"operation/features/notifications/#loop-failure","text":"At 20, 40, 60, and 120 minutes, there is a Loop Failure notification. This mostly happens when the connection is lost for a longer period of time between the CGM or the Rileylink and Loop.","title":"Loop Failure"},{"location":"operation/features/notifications/#bolus-failure","text":"If Loop detects that a bolus was not able to be delivered, it will provide a notification. Bolus failures are usually due to stale pump data. Try fetching recent history from the RileyLink menu to update pump data. Loop will also notify of partial bolus deliveries.","title":"Bolus Failure"},{"location":"operation/features/notifications/#low-reservoir","text":"Medtronic At 20% and 10% remaining reservoir volume, there is a Low Reservoir notification. Omnipod At <30U, <20U, <10U","title":"Low Reservoir"},{"location":"operation/features/notifications/#empty-reservoir","text":"Loop will notify when the reservoir is empty. Loop will notify you every minute with this notification. Omnipod Normally you will have 5-30 minutes to replace the pod, but do know the pod can scream at any moment from this point on.","title":"Empty Reservoir"},{"location":"operation/features/notifications/#pod-expiration-omnipod","text":"You can customize the time of notification when to replace your pod any time from 1 hour up to 71 hours (3 days - 1 hour) after staring a new pod or you change the time later in the [pod configuration settings]../loop-settings/omnipod-pump.md#configuration). The expiry alarm will always sound when the pod reaches a running full 3 days (72 hours) which you can silence in the pod status settings .","title":"Pod Expiration (Omnipod)"},{"location":"operation/features/notifications/#low-battery-medtronic","text":"Loop will notify when battery levels have approximately 8-10 hours of battery life remaining.","title":"Low Battery (Medtronic)"},{"location":"operation/features/notifications/#remote-notifications","text":"Loop does not have a remote notification to other devices. If you are a remotely monitoring parent, you will want to read here about setting up pushover alerts using your Nightscout site if you want proactive notifications of looping related information.","title":"Remote Notifications"},{"location":"operation/features/premeal/","text":"Pre-meal targets \u2301 The Loop toolbar's second icon from the left is a small clock with a knife and fork on the sides. This is the pre-meal tool. The tool will be colored grey until you define a set of blood glucose targets for it in Loop settings (within the Correction Range section). Once you set pre-meal targets in that section, the icon will be colored green and available for use. The pre-meal override target can be used to as an easy way to get a small amount of insulin delivered before a meal in order to help control post-meal blood glucose spikes. It's not designed to replace a traditional pre-bolus, but rather as a more gentle way to build up some pre-meal insulin activity. If your normal target is 100-110 mg/dL and pre-meal target is 80-80 mg/dL, for example, Loop will give you an extra push to get you to the lower target number before the meal. This early insulin brings you into the meal with a mini-prebolus. The pre-meal target, when activated by pressing on the icon, will stay active for one hour, until carbs are entered, or until it is manually cancelled...whichever comes first. Setting an override will also cancel pre-meal target. Loop will adjust any insulin bolus as needed based on the extra insulin provided during this pre-meal time.","title":"Pre-meal target"},{"location":"operation/features/premeal/#pre-meal-targets","text":"The Loop toolbar's second icon from the left is a small clock with a knife and fork on the sides. This is the pre-meal tool. The tool will be colored grey until you define a set of blood glucose targets for it in Loop settings (within the Correction Range section). Once you set pre-meal targets in that section, the icon will be colored green and available for use. The pre-meal override target can be used to as an easy way to get a small amount of insulin delivered before a meal in order to help control post-meal blood glucose spikes. It's not designed to replace a traditional pre-bolus, but rather as a more gentle way to build up some pre-meal insulin activity. If your normal target is 100-110 mg/dL and pre-meal target is 80-80 mg/dL, for example, Loop will give you an extra push to get you to the lower target number before the meal. This early insulin brings you into the meal with a mini-prebolus. The pre-meal target, when activated by pressing on the icon, will stay active for one hour, until carbs are entered, or until it is manually cancelled...whichever comes first. Setting an override will also cancel pre-meal target. Loop will adjust any insulin bolus as needed based on the extra insulin provided during this pre-meal time.","title":"Pre-meal targets"},{"location":"operation/features/watch/","text":"Apple Watch \u2301 If you add an Apple Watch after building Loop, you will need to pair your watch to your iPhone and then rebuild Loop to enable the Loop watch app to show up as an available watch app. Loop is currently supported with all released versions of the Apple Watch and Apple watchOS 4.1 and newer. The cool factor is increased since the Loop user can directly enter carbs and boluses straight from the watch, without needing to access the iPhone. The Loop watch app shows the Loop status, current BG, eventual BG, carb tool, and bolus tool. By tapping on the carb or bolus tools, you can adjust the entries using the crown to dial in more/less. You can manually scroll to change the desired bolus amount, if you want to decrease/increase from recommended amount. If you swipe the Apple Watch Loop screen from right-to-left, a second screen is available. This second screen displays a graph of recent BG and predicted BG data. The crown can be turned to display IOB and COB as well. A loop complication exists to show BG on the watch face but the update rate is limited to ~30mins due to limitations imposed by Apple to increase battery life. If constant, real-time monitoring is desired, you should use the Loop app as the main screen. This can be achieved by setting the watch to always show the last opened app on wake. Loop will always have to be the last app opened for this to work. (Note: recent watchOS seems to be a bit flakey on actually bringing up the last app used, and instead often defaults to the user's watch face instead. If you have a Loop complication installed in the watch face, you can simply tap the complication to open Loop's watch app.)","title":"Apple Watch"},{"location":"operation/features/watch/#apple-watch","text":"If you add an Apple Watch after building Loop, you will need to pair your watch to your iPhone and then rebuild Loop to enable the Loop watch app to show up as an available watch app. Loop is currently supported with all released versions of the Apple Watch and Apple watchOS 4.1 and newer. The cool factor is increased since the Loop user can directly enter carbs and boluses straight from the watch, without needing to access the iPhone. The Loop watch app shows the Loop status, current BG, eventual BG, carb tool, and bolus tool. By tapping on the carb or bolus tools, you can adjust the entries using the crown to dial in more/less. You can manually scroll to change the desired bolus amount, if you want to decrease/increase from recommended amount. If you swipe the Apple Watch Loop screen from right-to-left, a second screen is available. This second screen displays a graph of recent BG and predicted BG data. The crown can be turned to display IOB and COB as well. A loop complication exists to show BG on the watch face but the update rate is limited to ~30mins due to limitations imposed by Apple to increase battery life. If constant, real-time monitoring is desired, you should use the Loop app as the main screen. This can be achieved by setting the watch to always show the last opened app on wake. Loop will always have to be the last app opened for this to work. (Note: recent watchOS seems to be a bit flakey on actually bringing up the last app used, and instead often defaults to the user's watch face instead. If you have a Loop complication installed in the watch face, you can simply tap the complication to open Loop's watch app.)","title":"Apple Watch"},{"location":"operation/features/widget/","text":"iPhone Widget \u2301 The Loop app will automatically build a widget that will be available on your iPhone. The widget is available in the Today view of your iPhone. Swipe right on your iPhone home screen and your widgets will be available. The Loop widget maybe at the bottom of your widget list. Scroll down to the bottom of the screen and press the edit button. That opens an \"Add Widgets\" screen. If you hold and drag the three horizontal lines on the Loop widget row, you can drag it up to the order you'd like it to appear on your widget list.","title":"iPhone widget"},{"location":"operation/features/widget/#iphone-widget","text":"The Loop app will automatically build a widget that will be available on your iPhone. The widget is available in the Today view of your iPhone. Swipe right on your iPhone home screen and your widgets will be available. The Loop widget maybe at the bottom of your widget list. Scroll down to the bottom of the screen and press the edit button. That opens an \"Add Widgets\" screen. If you hold and drag the three horizontal lines on the Loop widget row, you can drag it up to the order you'd like it to appear on your widget list.","title":"iPhone Widget"},{"location":"operation/features/workout/","text":"Overrides \u2301 Overrides were developed as a method of letting Loop know that you have a situation affecting your overall insulin needs, without needing to manually edit your basal schedule/ISF/carb ratios individually. Examples where this can be helpful include hormone cycles, steroid medications, exercise, and other situations which may temporarily (either shorter or longer term) affect your underlying insulin needs. Override presets are (1) optional and (2) can be configured within Loop's workout icon (the little blue heart icon in the Loop toolbar). Once override presets are created, they can be turned on/off by using the workout icon as well. How overrides work \u2301 Overrides allow you to specify an overall insulin needs adjustment, a target range, and a duration for the override with each preset. The overall insulin needs adjustment is an adjustment to your scheduled basal rates, carb ratios, and insulin sensitivities all together. In other words, overall insulin needs percent will affect boluses, temp basals, and correction recommendations. Notice the fine-print below the orange bar showing the overall adjustment graphic...\"Basal, bolus, and correction insulin dose amounts are increased by 20%\" in the example with a 120% overall insulin needs adjustment. So, 100% overall needs means no multiplier will be applied to your basal, insulin sensitivities, or carb ratio...but you could still use a 100% preset simply to define a different target range for a period of time. Recapping: If you set an overall insulin needs adjustment below 100%, you are telling Loop that you are more insulin sensitive and will need a lighter touch with all things insulin. If you set an overall insulin needs adjustment above 100%, you are telling Loop that you are less insulin sensitive and will need a more aggressive touch with all things insulin. How overrides do NOT work \u2301 Overrides will work while you are Looping. Sounds obvious, right? But, the thing to remember is that the adjustments (multipliers) that overrides make are not saved back to your Medtronic pump or Omnipod. They only exist in the Loop app. If you walk away from iPhone and/or RileyLink... If you stop Looping (i.e., walk away from your gear), your existing temp basal will complete the remainder of whatever is left of its original 30 minutes and you will return to scheduled basal rates AS DEFINED IN YOUR LOOP SETTINGS. Your adjusted needs as set-up in any override will not continue if your Loop is not running properly. So you cannot set a 50% override and then hop in the ocean for a 2-mile swim without your iPhone and RileyLink and expect decreased basals of 50%. Just be aware that in situations where you need prolonged lower basals while away from Looping gear, you will need to edit your scheduled basals. Overrides also should not be used as a temporary sledgehammer to force Loop into an immediate suspend. There have been users, for example, setting a 10% override to force Loop to suspend. Then they've decided to manually bolus for food during the time that override is active. Loop will be assuming you only need 10% of your usual insulin needs...so the insulin you delivered to cover the meal will be perceived as ridiculously too much and your predicted BG curve will turn very, very low for the next 6 hours or so. Instead of trying to use a 10% override to force Loop into a suspend, you are better off simply issuing a suspend command to the pod and setting a reminder in your phone to resume insulin deliver later. Another option would be (assuming you aren't going out for a swim away from your Loop gear)...just let Loop do its thing and suspend insulin delivery via temp basals as needed. Making your override presets \u2301 To make your override presets, simply tap on the workout icon. Then click the + sign in the upper right corner to start a new preset entry. All the rows need to be filled out in the preset in order to save your new preset Pick an emoji Enter a name for the preset (the default \"Running\" is just a placeholder) Enter an overall insulin needs adjustment (10% to 200% in increments of ten percent, with 100% being your regularly scheduled insulin needs) Enter a target range ( make sure to enter the target range low-high or you could crash your app...do not enter the range high-low.) If you do not enter a target range, Loop will use your existing scheduled target ranges. Select whether you want the override to run indefinitely or for a finite time. When you've made all those adjustments, save the the preset using the \"Save\" button in the upper right corner. Activating your override \u2301 To enact your override preset, you simply tap on the workout icon toolbar and select your override from your list of presets that you programmed in previously in the step above. The heart will be highlighted in a blue square while active and a banner notification will appear at the top of the Loop's main screen. Additionally, you'll see a darker blue target area indicating the override's target range and duration in your Loop's blood glucose graph. You can also setup a future start time for the override by selecting the override preset and setting the \"Start time\" row. Save the future override by pressing the \"Enable\" button in the top right corner. A future override can be very helpful, for example, to set an exercise override the night before your workout. Set your exercise override to activate 2 hours before you wake up for your 5am spin class in the morning. You'll wake up with less insulin on board and at your desired exercise targets, without needing to set an alarm to wake up simply to set an override. Deactivating your override \u2301 This is simple...just tap the heart icon to turn off your override at any time. Override presets that have been programmed with a finite duration will automatically deactivate when their time's duration reaches the end. Remote overrides \u2301 You can also use your Nightscout site to activate/deactivate your Loop's override presets. To accomplish this, you will need to do some legwork as outlined on this page for how how to setup Remote Overrides in Nightscout and you will need to be using a paid Apple developer account. Remote overrides require Apple Push Notifications service, and that is only available on paid accounts.","title":"Overrides"},{"location":"operation/features/workout/#overrides","text":"Overrides were developed as a method of letting Loop know that you have a situation affecting your overall insulin needs, without needing to manually edit your basal schedule/ISF/carb ratios individually. Examples where this can be helpful include hormone cycles, steroid medications, exercise, and other situations which may temporarily (either shorter or longer term) affect your underlying insulin needs. Override presets are (1) optional and (2) can be configured within Loop's workout icon (the little blue heart icon in the Loop toolbar). Once override presets are created, they can be turned on/off by using the workout icon as well.","title":"Overrides"},{"location":"operation/features/workout/#how-overrides-work","text":"Overrides allow you to specify an overall insulin needs adjustment, a target range, and a duration for the override with each preset. The overall insulin needs adjustment is an adjustment to your scheduled basal rates, carb ratios, and insulin sensitivities all together. In other words, overall insulin needs percent will affect boluses, temp basals, and correction recommendations. Notice the fine-print below the orange bar showing the overall adjustment graphic...\"Basal, bolus, and correction insulin dose amounts are increased by 20%\" in the example with a 120% overall insulin needs adjustment. So, 100% overall needs means no multiplier will be applied to your basal, insulin sensitivities, or carb ratio...but you could still use a 100% preset simply to define a different target range for a period of time. Recapping: If you set an overall insulin needs adjustment below 100%, you are telling Loop that you are more insulin sensitive and will need a lighter touch with all things insulin. If you set an overall insulin needs adjustment above 100%, you are telling Loop that you are less insulin sensitive and will need a more aggressive touch with all things insulin.","title":"How overrides work"},{"location":"operation/features/workout/#how-overrides-do-not-work","text":"Overrides will work while you are Looping. Sounds obvious, right? But, the thing to remember is that the adjustments (multipliers) that overrides make are not saved back to your Medtronic pump or Omnipod. They only exist in the Loop app. If you walk away from iPhone and/or RileyLink... If you stop Looping (i.e., walk away from your gear), your existing temp basal will complete the remainder of whatever is left of its original 30 minutes and you will return to scheduled basal rates AS DEFINED IN YOUR LOOP SETTINGS. Your adjusted needs as set-up in any override will not continue if your Loop is not running properly. So you cannot set a 50% override and then hop in the ocean for a 2-mile swim without your iPhone and RileyLink and expect decreased basals of 50%. Just be aware that in situations where you need prolonged lower basals while away from Looping gear, you will need to edit your scheduled basals. Overrides also should not be used as a temporary sledgehammer to force Loop into an immediate suspend. There have been users, for example, setting a 10% override to force Loop to suspend. Then they've decided to manually bolus for food during the time that override is active. Loop will be assuming you only need 10% of your usual insulin needs...so the insulin you delivered to cover the meal will be perceived as ridiculously too much and your predicted BG curve will turn very, very low for the next 6 hours or so. Instead of trying to use a 10% override to force Loop into a suspend, you are better off simply issuing a suspend command to the pod and setting a reminder in your phone to resume insulin deliver later. Another option would be (assuming you aren't going out for a swim away from your Loop gear)...just let Loop do its thing and suspend insulin delivery via temp basals as needed.","title":"How overrides do NOT work"},{"location":"operation/features/workout/#making-your-override-presets","text":"To make your override presets, simply tap on the workout icon. Then click the + sign in the upper right corner to start a new preset entry. All the rows need to be filled out in the preset in order to save your new preset Pick an emoji Enter a name for the preset (the default \"Running\" is just a placeholder) Enter an overall insulin needs adjustment (10% to 200% in increments of ten percent, with 100% being your regularly scheduled insulin needs) Enter a target range ( make sure to enter the target range low-high or you could crash your app...do not enter the range high-low.) If you do not enter a target range, Loop will use your existing scheduled target ranges. Select whether you want the override to run indefinitely or for a finite time. When you've made all those adjustments, save the the preset using the \"Save\" button in the upper right corner.","title":"Making your override presets"},{"location":"operation/features/workout/#activating-your-override","text":"To enact your override preset, you simply tap on the workout icon toolbar and select your override from your list of presets that you programmed in previously in the step above. The heart will be highlighted in a blue square while active and a banner notification will appear at the top of the Loop's main screen. Additionally, you'll see a darker blue target area indicating the override's target range and duration in your Loop's blood glucose graph. You can also setup a future start time for the override by selecting the override preset and setting the \"Start time\" row. Save the future override by pressing the \"Enable\" button in the top right corner. A future override can be very helpful, for example, to set an exercise override the night before your workout. Set your exercise override to activate 2 hours before you wake up for your 5am spin class in the morning. You'll wake up with less insulin on board and at your desired exercise targets, without needing to set an alarm to wake up simply to set an override.","title":"Activating your override"},{"location":"operation/features/workout/#deactivating-your-override","text":"This is simple...just tap the heart icon to turn off your override at any time. Override presets that have been programmed with a finite duration will automatically deactivate when their time's duration reaches the end.","title":"Deactivating your override"},{"location":"operation/features/workout/#remote-overrides","text":"You can also use your Nightscout site to activate/deactivate your Loop's override presets. To accomplish this, you will need to do some legwork as outlined on this page for how how to setup Remote Overrides in Nightscout and you will need to be using a paid Apple developer account. Remote overrides require Apple Push Notifications service, and that is only available on paid accounts.","title":"Remote overrides"},{"location":"operation/loop/close-loop/","text":"Close-Loop \u2301 When you feel like you have learned what you need from open-loop, you should be ready to switch to close-loop. There are several ways you can help make that transition as smooth as possible. Timing \u2301 Many people choose to transition to close-loop in a step-wise fashion. Starting close-loop on weekends is an easier starting point so that you can minimize distractions (let's face it...you'll probably be staring at the Loop a lot for those first few days). Typically, people have an easier time transitioning to close-loop for parts of their day that don't involve food...so nighttimes tend to be easier than daytimes to start. Maximum Basal Rate \u2301 When you are first beginning to close-loop, it is important to be conservative (low) in setting your maximum basal rate. If your settings are incorrect in other areas (basal rates, carb absorption time, carb ratio, etc), Loop may enact incorrectly aggressive high temp basals. Gradually increase your maximum basal rate as your comfort and confidence in Loop increase. Typically, experienced closed loop users set their max basal rate no more than 3-4 times their average basal rate. BG targets \u2301 If your basals, ISF, or carb ratios aren't set correctly, Loop may overshoot and leave you lower than expected (or with more IOB than you are comfortable with). Setting your low BG target slightly higher can help prevent unexpected lows or high IOB as you adjust your settings. Watch the IOB \u2301 Watch whether Loop accumulates positive or negative IOB while holding your BG steady when no food is present. If you find that you are \"carrying\" positive or negative IOB consistently, you should review your settings to see if perhaps your basal or ISF needs adjusting. Meals \u2301 Meals will likely be the hardest part of transitioning to close-loop. Starting with foods that you have a high comfort level with is a great idea. If you have favorite meals that you know well (how high BGs usually go, how much to bolus, how to pre-bolus, etc), these would be a good starting point. Watching when the Loop high temps or suspends basals (early vs late in the meal) will really help you adjust to find your typical carb absorption times. As a general idea, assuming other settings are accurate : early high temps in a meal that leave you low after, you may need to shorten carb absorption time early suspensions in a meal that leave you high after, you may need to lengthen carb absorption time This is definitely an area where YDMV (your diabetes may vary), so don't expect or accept that what works for others will work for you. Test, observe, and adjust as needed.","title":"Closed Loop"},{"location":"operation/loop/close-loop/#close-loop","text":"When you feel like you have learned what you need from open-loop, you should be ready to switch to close-loop. There are several ways you can help make that transition as smooth as possible.","title":"Close-Loop"},{"location":"operation/loop/close-loop/#timing","text":"Many people choose to transition to close-loop in a step-wise fashion. Starting close-loop on weekends is an easier starting point so that you can minimize distractions (let's face it...you'll probably be staring at the Loop a lot for those first few days). Typically, people have an easier time transitioning to close-loop for parts of their day that don't involve food...so nighttimes tend to be easier than daytimes to start.","title":"Timing"},{"location":"operation/loop/close-loop/#maximum-basal-rate","text":"When you are first beginning to close-loop, it is important to be conservative (low) in setting your maximum basal rate. If your settings are incorrect in other areas (basal rates, carb absorption time, carb ratio, etc), Loop may enact incorrectly aggressive high temp basals. Gradually increase your maximum basal rate as your comfort and confidence in Loop increase. Typically, experienced closed loop users set their max basal rate no more than 3-4 times their average basal rate.","title":"Maximum Basal Rate"},{"location":"operation/loop/close-loop/#bg-targets","text":"If your basals, ISF, or carb ratios aren't set correctly, Loop may overshoot and leave you lower than expected (or with more IOB than you are comfortable with). Setting your low BG target slightly higher can help prevent unexpected lows or high IOB as you adjust your settings.","title":"BG targets"},{"location":"operation/loop/close-loop/#watch-the-iob","text":"Watch whether Loop accumulates positive or negative IOB while holding your BG steady when no food is present. If you find that you are \"carrying\" positive or negative IOB consistently, you should review your settings to see if perhaps your basal or ISF needs adjusting.","title":"Watch the IOB"},{"location":"operation/loop/close-loop/#meals","text":"Meals will likely be the hardest part of transitioning to close-loop. Starting with foods that you have a high comfort level with is a great idea. If you have favorite meals that you know well (how high BGs usually go, how much to bolus, how to pre-bolus, etc), these would be a good starting point. Watching when the Loop high temps or suspends basals (early vs late in the meal) will really help you adjust to find your typical carb absorption times. As a general idea, assuming other settings are accurate : early high temps in a meal that leave you low after, you may need to shorten carb absorption time early suspensions in a meal that leave you high after, you may need to lengthen carb absorption time This is definitely an area where YDMV (your diabetes may vary), so don't expect or accept that what works for others will work for you. Test, observe, and adjust as needed.","title":"Meals"},{"location":"operation/loop/looptips/","text":"Loop Tips \u2301 These docs are a great resource for the technical aspects of building your Loop app. However, they don't really cover in detail a lot of the frequently asked questions about USING Loop. Things such as: How to enter low treatments while using Loop? What to discuss with your Endo? What data reports might be useful? How to deal with failed sites? What about pizza boluses? What do I do when I shower or swim? All of those usability questions and more are addressed over in the companion site called Looptips . Please head over to Looptips in order to read some really helpful tips to make your Looping easier.","title":"Loop Tips"},{"location":"operation/loop/looptips/#loop-tips","text":"These docs are a great resource for the technical aspects of building your Loop app. However, they don't really cover in detail a lot of the frequently asked questions about USING Loop. Things such as: How to enter low treatments while using Loop? What to discuss with your Endo? What data reports might be useful? How to deal with failed sites? What about pizza boluses? What do I do when I shower or swim? All of those usability questions and more are addressed over in the companion site called Looptips . Please head over to Looptips in order to read some really helpful tips to make your Looping easier.","title":"Loop Tips"},{"location":"operation/loop/open-loop/","text":"Open-Loop \u2301 Open-loop is a great place to start with Loop. When you are operating in open-loop mode, Loop is offering recommendations for temp basals and will display them on the main screen. The recommendations will not be enacted unless you specifically choose to enact the temp basal. Usually in open-loop mode, you aren't really enacting the recommended basals but instead watching how the recommendations come in and figuring out WHY they are being recommended. It is understandable to want to jump straight away into close-loop mode, but a lot can be learned by watching Loop operate in open mode. Becoming familiar with the algorithm can be easier by watching it in action rather than only reading about it in docs. Testing \u2301 A great benefit of open-loop mode is that you can establish a baseline of BG trends without the influence of temp basals from Loop. This is particularly helpful if you haven't used Medtronic sites/pumps prior to Loop. You may find that your basal rates change significantly coming from other brands of pumps. Taking the time to establish a good Medtronic pump basal profile will set you up for a smoother transition to close-loop mode. Test your ISF during open-loop time too, as ISF is an important component for every Loop calculation for temp basals. Every 5 minutes, Loop uses your ISF...so it's worth testing it ahead of close-loop mode. Eventual BG \u2301 One of the best things you can do is to train yourself to watch the eventual BG rather than the current BG for helping understand Loop recommendations for temp basals. So many of us have become accustomed to dealing with current BGs and perhaps IOB at the same time...but Loop is also looking at BG momentum, carbs on board, retrospective trends. Loop is utilizing all of those variables to predict an eventual BG. Its current decisions are based on that eventual BG. Training yourself to watch that eventual BG will help you understand the temp basals being offered at any given time. Carb Absorption \u2301 Probably the next most difficult transition involves using carb absorption as a component to every meal bolus. Understand that the default carb absorption times in Loop may not work for your particular body. Similar to how you perhaps had used extended boluses for meals that impacted BGs longer than the duration of your insulin...that same idea applies to estimate your carb absorption times. Watch your meals and try to estimate how long they are impacting your BG for various types of food. Watch the times when Loop would've wanted to suspend or high temp basal...ask yourself why it would be doing that. Especially ask yourself if that is the same decision as you would've made at that time in a meal normally. Would you be worried that you might go low later if you see Loop offering high temp basal early after a meal? Would you be worried about going high later if Loop wants to suspend basals instead? If you put some effort into this effort before closing the loop, it will pay off with a smoother transition to closed loop. Troubleshooting \u2301 Get used to carrying the RileyLink around. Find how far your connectivity stretches before you have pump communication problems. Get used to troubleshooting yellow and red loops, finding out the pattern/cause of any potential loop issues. You'll be less frustrated starting on closed loop if you aren't dealing with learning new electronics at the same time as you are learning carb absorption times in a closed loop. Learn how to retune your RL. Bolus \u2301 Bolus meals from the Loop, rather than the pump. Become familiar with entering carbs into the Loop app, as well as editing them. Watch how long it takes for Loop app to display the bolus after you enact it (hint: there's a delay until the bolus finishes delivery and the pump gets read). Familiarize yourself with the \"Bolus May Have Failed\" notifications and how to handle them. Double-check the pump and verify that the bolus didn't enact before trying to give the bolus again. Caregiver training \u2301 If you are the parent or guardian of a t1d kid using Loop, make sure you take the time to educate caregivers around your family and school for how to use Loop. Perhaps you want to draft individualized quick info sheets for those caregivers to use with Loop. If your child needs a site change at school, school staff or your child need to know how to delete reservoir history or change to open-loop for the duration of DIA. Try to watch Nightscout while you get to know Loop so that you can become better at remote troubleshooting of any problems that you might encounter.","title":"Open Loop"},{"location":"operation/loop/open-loop/#open-loop","text":"Open-loop is a great place to start with Loop. When you are operating in open-loop mode, Loop is offering recommendations for temp basals and will display them on the main screen. The recommendations will not be enacted unless you specifically choose to enact the temp basal. Usually in open-loop mode, you aren't really enacting the recommended basals but instead watching how the recommendations come in and figuring out WHY they are being recommended. It is understandable to want to jump straight away into close-loop mode, but a lot can be learned by watching Loop operate in open mode. Becoming familiar with the algorithm can be easier by watching it in action rather than only reading about it in docs.","title":"Open-Loop"},{"location":"operation/loop/open-loop/#testing","text":"A great benefit of open-loop mode is that you can establish a baseline of BG trends without the influence of temp basals from Loop. This is particularly helpful if you haven't used Medtronic sites/pumps prior to Loop. You may find that your basal rates change significantly coming from other brands of pumps. Taking the time to establish a good Medtronic pump basal profile will set you up for a smoother transition to close-loop mode. Test your ISF during open-loop time too, as ISF is an important component for every Loop calculation for temp basals. Every 5 minutes, Loop uses your ISF...so it's worth testing it ahead of close-loop mode.","title":"Testing"},{"location":"operation/loop/open-loop/#eventual-bg","text":"One of the best things you can do is to train yourself to watch the eventual BG rather than the current BG for helping understand Loop recommendations for temp basals. So many of us have become accustomed to dealing with current BGs and perhaps IOB at the same time...but Loop is also looking at BG momentum, carbs on board, retrospective trends. Loop is utilizing all of those variables to predict an eventual BG. Its current decisions are based on that eventual BG. Training yourself to watch that eventual BG will help you understand the temp basals being offered at any given time.","title":"Eventual BG"},{"location":"operation/loop/open-loop/#carb-absorption","text":"Probably the next most difficult transition involves using carb absorption as a component to every meal bolus. Understand that the default carb absorption times in Loop may not work for your particular body. Similar to how you perhaps had used extended boluses for meals that impacted BGs longer than the duration of your insulin...that same idea applies to estimate your carb absorption times. Watch your meals and try to estimate how long they are impacting your BG for various types of food. Watch the times when Loop would've wanted to suspend or high temp basal...ask yourself why it would be doing that. Especially ask yourself if that is the same decision as you would've made at that time in a meal normally. Would you be worried that you might go low later if you see Loop offering high temp basal early after a meal? Would you be worried about going high later if Loop wants to suspend basals instead? If you put some effort into this effort before closing the loop, it will pay off with a smoother transition to closed loop.","title":"Carb Absorption"},{"location":"operation/loop/open-loop/#troubleshooting","text":"Get used to carrying the RileyLink around. Find how far your connectivity stretches before you have pump communication problems. Get used to troubleshooting yellow and red loops, finding out the pattern/cause of any potential loop issues. You'll be less frustrated starting on closed loop if you aren't dealing with learning new electronics at the same time as you are learning carb absorption times in a closed loop. Learn how to retune your RL.","title":"Troubleshooting"},{"location":"operation/loop/open-loop/#bolus","text":"Bolus meals from the Loop, rather than the pump. Become familiar with entering carbs into the Loop app, as well as editing them. Watch how long it takes for Loop app to display the bolus after you enact it (hint: there's a delay until the bolus finishes delivery and the pump gets read). Familiarize yourself with the \"Bolus May Have Failed\" notifications and how to handle them. Double-check the pump and verify that the bolus didn't enact before trying to give the bolus again.","title":"Bolus"},{"location":"operation/loop/open-loop/#caregiver-training","text":"If you are the parent or guardian of a t1d kid using Loop, make sure you take the time to educate caregivers around your family and school for how to use Loop. Perhaps you want to draft individualized quick info sheets for those caregivers to use with Loop. If your child needs a site change at school, school staff or your child need to know how to delete reservoir history or change to open-loop for the duration of DIA. Try to watch Nightscout while you get to know Loop so that you can become better at remote troubleshooting of any problems that you might encounter.","title":"Caregiver training"},{"location":"operation/loop-settings/cgm/","text":"Add CGM \u2301 Now we need to add a CGM source so that Loop has BG data. From the Loop settings screen, select Add CGM . The standard selections available will be: Dexcom G6 Dexcom G5 Dexcom G4 Dexcom Share If you added a compatible Medtronic pump earlier in the setup process, then you will also see an option for the compatible Medtronic sensor that works with that same pump. If you are using a compatible MDT sensor, select that option and the CGM data will be uploaded to Loop when pump status is updated. About Dexcom Share credentials \u2301 Note that you do NOT need your Share account info listed in Loop settings if you are using a G4, G5, or G6 system. The transmitter ID is sufficient. In fact, I recommend that you leave your Share account empty so that you don't accidentally become internet-dependent for CGM data when you forget to update your transmitter ID when you start a new transmitter. Just leave the Share credentials blank. For all selections, the Dexcom Share credentials (in other words, account login) is the same as what you used to log in to the active Dexcom app on your iPhone. Dexcom Share account is not always the same login info as your Dexcom Clarity account. For G4 users, the Share account is found in the account tab on the app. For G5/G6 users, unfortunately, there is no information in the app displaying what your account name is. The information is entered when you first log in to the app and then is never displayed again, nor visible under any information screens. If you have forgotten your G5/G6 account info, you can delete the Dexcom app and redownload it to try logging in again. This will not cause a restart of any sensor sessions in progress. If you do not enter your Share credentials correctly, you will get an error when Loop tries to access your Share account to backfill CGM data. That error message will look like below. If you see that message, delete your Share account from Loop settings and try again...or just leave it out and depend on your transmitter ID. Dexcom G5 and G6 \u2301 The Dexcom G5 and G6 options only require the addition of the active transmitter ID, and the matching Dexcom app to be running on the Loop iPhone. You do not have to add your Dexcom Share account credentials, but if you do, make sure they match what you originally entered into your Dexcom app. When you change transmitters, you will need to select the Delete CGM button at the very bottom of the CGM info page in Loop. Then you will select your Dexcom system again and add the new transmitter ID. You cannot just tap on your old transmitter ID to update it. If you don't update your transmitter ID when you change active transmitters, your Loop will be forced to go to your Dexcom Share server to get your CGM data and will not work without cell or wifi connection. When Loop is using data from Dexcom Share servers, a small cloud will appear above the BG reading in Loop and should tip you off that maybe you forgot to update your transmitter ID. Dexcom G4 \u2301 Dexcom G4 users will need the Dexcom G4 Share2 app active on their iPhone and paired to their Dexcom G4 Share receiver. Dexcom Share \u2301 The Dexcom Share selection is primarily for people who wish to test Loop function without a local CGM source and who are not running the Dexcom app on their Loop iPhone. This selection will require login access to a Dexcom Share account with live data and active internet connection in order to work. Spike Users \u2301 Users who are using Spike app to access other CGM types (or to avoid using the Dexcom app), you will need to follow the directions contained within the Spike app in order to build/modify Loop with Spike. Loop does not natively support Spike app and does not currently plan to. You are responsible for modifying or adapting Loop in order to use Spike so that it is an available option as a CGM source. Next Step: Configuration \u2301 Now that you have added your CGM source, we need to complete the configuration and settings in your Loop. Please head over to the Configuration page for guidance with this important part of Loop's setup.","title":"Step 3: Add CGM"},{"location":"operation/loop-settings/cgm/#add-cgm","text":"Now we need to add a CGM source so that Loop has BG data. From the Loop settings screen, select Add CGM . The standard selections available will be: Dexcom G6 Dexcom G5 Dexcom G4 Dexcom Share If you added a compatible Medtronic pump earlier in the setup process, then you will also see an option for the compatible Medtronic sensor that works with that same pump. If you are using a compatible MDT sensor, select that option and the CGM data will be uploaded to Loop when pump status is updated.","title":"Add CGM"},{"location":"operation/loop-settings/cgm/#about-dexcom-share-credentials","text":"Note that you do NOT need your Share account info listed in Loop settings if you are using a G4, G5, or G6 system. The transmitter ID is sufficient. In fact, I recommend that you leave your Share account empty so that you don't accidentally become internet-dependent for CGM data when you forget to update your transmitter ID when you start a new transmitter. Just leave the Share credentials blank. For all selections, the Dexcom Share credentials (in other words, account login) is the same as what you used to log in to the active Dexcom app on your iPhone. Dexcom Share account is not always the same login info as your Dexcom Clarity account. For G4 users, the Share account is found in the account tab on the app. For G5/G6 users, unfortunately, there is no information in the app displaying what your account name is. The information is entered when you first log in to the app and then is never displayed again, nor visible under any information screens. If you have forgotten your G5/G6 account info, you can delete the Dexcom app and redownload it to try logging in again. This will not cause a restart of any sensor sessions in progress. If you do not enter your Share credentials correctly, you will get an error when Loop tries to access your Share account to backfill CGM data. That error message will look like below. If you see that message, delete your Share account from Loop settings and try again...or just leave it out and depend on your transmitter ID.","title":"About Dexcom Share credentials"},{"location":"operation/loop-settings/cgm/#dexcom-g5-and-g6","text":"The Dexcom G5 and G6 options only require the addition of the active transmitter ID, and the matching Dexcom app to be running on the Loop iPhone. You do not have to add your Dexcom Share account credentials, but if you do, make sure they match what you originally entered into your Dexcom app. When you change transmitters, you will need to select the Delete CGM button at the very bottom of the CGM info page in Loop. Then you will select your Dexcom system again and add the new transmitter ID. You cannot just tap on your old transmitter ID to update it. If you don't update your transmitter ID when you change active transmitters, your Loop will be forced to go to your Dexcom Share server to get your CGM data and will not work without cell or wifi connection. When Loop is using data from Dexcom Share servers, a small cloud will appear above the BG reading in Loop and should tip you off that maybe you forgot to update your transmitter ID.","title":"Dexcom G5 and G6"},{"location":"operation/loop-settings/cgm/#dexcom-g4","text":"Dexcom G4 users will need the Dexcom G4 Share2 app active on their iPhone and paired to their Dexcom G4 Share receiver.","title":"Dexcom G4"},{"location":"operation/loop-settings/cgm/#dexcom-share","text":"The Dexcom Share selection is primarily for people who wish to test Loop function without a local CGM source and who are not running the Dexcom app on their Loop iPhone. This selection will require login access to a Dexcom Share account with live data and active internet connection in order to work.","title":"Dexcom Share"},{"location":"operation/loop-settings/cgm/#spike-users","text":"Users who are using Spike app to access other CGM types (or to avoid using the Dexcom app), you will need to follow the directions contained within the Spike app in order to build/modify Loop with Spike. Loop does not natively support Spike app and does not currently plan to. You are responsible for modifying or adapting Loop in order to use Spike so that it is an available option as a CGM source.","title":"Spike Users"},{"location":"operation/loop-settings/cgm/#next-step-configuration","text":"Now that you have added your CGM source, we need to complete the configuration and settings in your Loop. Please head over to the Configuration page for guidance with this important part of Loop's setup.","title":"Next Step: Configuration"},{"location":"operation/loop-settings/configurations/","text":"Configuration \u2301 This page will cover two general parts of the Loop's settings, circled in red in the screenshot below. The headings will match the flow of the screen, top to bottom. The first circled section covers your Loop's closed/open loop status and Loop's Issue Report. The second circled section is the configuration section. This section contains a lot of really important settings that control how your Loop will calculate your predicted BG curve. Given the importance of your predicted BG curve to Loop's actions, please make sure you read over this page carefully to know how to navigate the selections and entries. Closed/Open Loop \u2301 The Closed Loop switch controls whether Loop automatically enacts its recommended temporary basal adjustments (closed loop mode) or whether you have to manually tap to enact the recommendations (open loop mode). In addition to the visual indicator on this switch discussed below, the Loop's status icon on the main screen will also appear differently depending on the mode selected. Open loop mode will have an incomplete circle for the Loop's status icon. Open Loop Mode \u2301 When the Closed Loop switch is in the (Off ) position, Loop WILL NOT enact recommended temp basals automatically. Instead, Loop will display recommended temp basals on the main status display, just above the blood glucose graph. This is called open loop , and is a good way to understand how Loop will function, and what type of recommendations it would make. If you click on the recommended temp basal line while in open loop mode, Loop will implement the temp basal. Closed Loop Mode \u2301 When the Closed Loop switch is in the ( On) position, Loop WILL automatically enact recommended temp basals on the configured insulin pump. This is known as closed loop . Typically, Loop will show the recommended temp basal just above the blood glucose graph prior to automatically enacting it. It may take a minute or so for the Loop to enact the recommended basal. Once the temp basal has been enacted successfully on the pump, the recommended temp basal will disappear from the screen and the new temp basal rate will be represented in the insulin delivery graphs. Issue Report \u2301 If you run into problems or errors with your Loop, an Issue Report can be used to help identify where the problem is occurring. The Issue Report is automatically generated and you can share it via email. Frequently, if you seek help with a technical problem, an Issue Report will provide insight for the developers and troubleshooters. Please email yourself an Issue Report anytime you are questioning Loop actions or displays. You can then use that Issue Report later to help debug the problem. Before you continue further, a word about BG units Entries into the configuration section will be available in mg/dL or mmol/L automatically, based upon how your blood glucose values are received. By default they are set to mg/dL, however once CGM values arrive in mmol/L these Loop settings can be entered in mmol/L. If you are planning to use mmol/L, be sure to wait to set your entries until after you have started to receive CGM values in Loop. If you do these in the wrong order, then your charts and entries may have incorrect units. Correction Range \u2301 The correction range is your blood glucose range that you would like Loop to correct to. Correction range is not necessarily the same target blood glucose range that you have discussed with your endocrinologist; generally the doctor's range may be much wider. For example, you may keep a correction target of 100-110 for Loop to aim to, but use a desired BG target range of 80-180 when discussing things with your endo about \"time in range\". Click the + in the upper right corner to add correction BG range(s). You can have multiple ranges based on time of day, but the first setting of the day needs to begin at midnight. Correction ranges can be a single number, such as 100-100 mg/dL, or a range such as 100-120 mg/dL. Generally speaking, if you choose to use a range, keeping the range between about 10-30 mg/dL between the lowest and highest value is a good starting place. Override Ranges \u2301 Below the Correction Range entry is a section called \"Overrides\" with a Pre-Meal setting. While active, the pre-meal targets will replace the usual correction range for Loop's temp basal recommendations. If a pre-meal range is not entered in this section, the icon will remain grey and unusable on the main screen's toolbar. The pre-meal override target can be used to as an easy way to get a small amount of insulin delivered before a meal in order to help control post-meal blood glucose spikes. If your normal target is 100-110 mg/dL and pre-meal target is 80-80 mg/dL, for example, Loop will give you an extra push to get you to the lower target number before the meal. This early insulin brings you into the meal with a mini-prebolus. The pre-meal target, when activated by pressing on the icon, will stay active for one hour, until carbs are entered, or until it is manually cancelled...whichever comes first. Loop will adjust any insulin bolus as needed based on the extra insulin provided during this pre-meal time. Suspend Threshold \u2301 The suspend threshold must be set up for successful configuration of Loop. Your Loop will not turn green without setting this value. This value affects both bolus and basal recommendations by Loop. Bolus \u2301 If you are trying to bolus a meal while any part of the predicted BG curve is below this suspend threshold value, Loop will not recommend a bolus. Instead, you will need to wait until your prediction curve is above the suspend threshold value in order to bolus. Basal \u2301 If your current or any point on your predicted BG curve is below the suspend threshold, Loop will always recommend a temporary basal rate of 0 U/hr. Reasonable settings for suspend threshold will depend on user preference, but recommended not set lower than 65 mg/dL. Basal Rates \u2301 Note: You cannot enter basal rates until you first add a pump in Loop settings. Your basal rates will be initially populated when you walk through the Add Pump part of the setup at the beginning of this setup guide. Only one basal schedule may be set in each Loop app. The basal increments are available according to the increments of the particular pump/pod you are using. Not all pumps provide the same increments for basal deliveries. Basal schedule must start at midnight and cannot contain rates of 0 U/hr. To edit a line in your basal schedule, tap the line and adjust the time and/or amount. To remove a line, select Edit in the top right and delete it. If tapping the line doesn't work, try closing and re-opening the app. When finished editing, click on the Save to Pump... or Sync With Pod button, depending on which pump you are using. If you make any basal edits and use the Cancel button to go back to the menu without successfully saving/syncing to pump/pod, the changes you made will not be saved. Loop makes saving/syncing to pump a mandatory step to successfully editing basal rates. If you get an error message while trying to save/sync the edited basal rates, please retry until successful. Delivery Limits \u2301 The maximum basal rate and maximum bolus settings are collectively referred to as Delivery Limits. This section will have been initially populated when you finished the Add Pump part of the setup previously. For safety, similar to basal schedule, you must keep these values the same on both the Loop app and within the pump/pod settings. If you edit these settings in Loop app, always use the Save to Pump... or Sync With Pod button, depending on which pump you are using. Maximum Basal Rate \u2301 Maximum basal rate will cap the the maximum temporary basal rate that the Loop is allowed to enact to meet your correction range. Typically, Loop users set their maximum basal rate around 3-4 times their highest scheduled basal rate. When you are first beginning to use Loop, it is wise to start conservative (low) in setting your maximum basal rate. If your settings are incorrect in other areas (basal rates, insulin sensitivity, carb ratio, etc), you may need time to identify where settings need to be adjusted. This process is easier if Loop is given less latitude to set high basal rates. Gradually increase your maximum basal rate as your comfort and confidence in Loop increases. If you need help with your settings adjustment, head over to LoopTips for some initial settings help Maximum Bolus \u2301 Enter your desired single bolus maximum here. For safety, don't set a maximum bolus limit any higher than your typical large meal bolus. Insulin Model \u2301 There are four insulin models to choose from; Walsh, Rapid-Acting Adults, Rapid-Acting Children, and Fiasp. If you want to read the nitty-gritty discussion that went into the development of the Rapid-Acting and Fiasp curves (collectively called \"exponential insulin models\"), you can see that in GitHub here . We highly recommend selecting one of the exponential insulin models (in other words, not the Walsh model). A common new Loop user error is to select Walsh model in order to easily shorten their insulin duration (DIA) to one like they used prior to Looping. This almost invariably leads to insulin stacking. If you would like to read more about why the duration of insulin action is important in Loop vs how you've traditionally used it, please click here to read a blog post about the subject. In summary, choosing Walsh curve just to shorten your DIA will lead to insulin stacking and less than desired bolusing recommendations. You can click on each model and see what each model's insulin activity curve looks like, active one selected in blue. The differences between the three exponential models (two Rapid-Acting and Fiasp) models has to do with the timing of the peak insulin activity timing. Not surprising, since Fiasp is marketed as the \"faster acting\" insulin. Currently all the exponential models are defaulted to an insulin duration of 6 hours, but the peak activity of the curves differs: Rapid-acting adult curve peaks at 75 minutes Rapid-acting child curve peaks at 65 minutes Fiasp peaks curve peaks at 55 minutes Carb Ratios \u2301 Click the + in the upper right to add carb ratios for various times of day. Loop works best if you have tested and optimized your carb ratio settings for accuracy. Beware of other apps writing carbs to Health app If you are using a third-party app (such as Spike or MyFitness) that can write carbohydrates to the phone's Health app, you will need to edit the permissions to make sure Loop doesn't double carb entries. You should disable the third-party app's permissions in Health so that they can only read and not write . See Carb Entries with Third Party apps for more information about this setting. Insulin Sensitivities \u2301 Insulin Sensitivity Factor (ISF) is the same term as Correction Factor used in some clinics and endocrinology offices. ISF represents the drop in blood glucose levels expected from one unit of insulin. Click the + in the upper right to add insulin sensitivities for various times of day. Loop works best if you have tested and optimized your ISF settings for accuracy. Insulin sensitivities can change for many reasons including waiting too long to change your infusion set. Loop will not auto-detect changes in ISF. Incorrectly set ISF is the most common cause of roller coaster BGs for new Loop users. You will need to raise (increase) your ISF value/number to help smooth a roller coaster BG trend. You can read about that topic more over in LoopTips here . Next Step: Loop Services \u2301 You have completed the required configurations and settings in your Loop app. If you have a Nightscout site you'd like to connect Loop to, please continue on to the Loop Services page . If you are not integrating with a Nightscout site and don't want any optional logging services connected, then please proceed to the Loop's displays page . Understanding the Loop displays can be a valuable tool to understanding your Loop's actions, and also for troubleshooting, if you are having issues.","title":"Step 4: Configurations"},{"location":"operation/loop-settings/configurations/#configuration","text":"This page will cover two general parts of the Loop's settings, circled in red in the screenshot below. The headings will match the flow of the screen, top to bottom. The first circled section covers your Loop's closed/open loop status and Loop's Issue Report. The second circled section is the configuration section. This section contains a lot of really important settings that control how your Loop will calculate your predicted BG curve. Given the importance of your predicted BG curve to Loop's actions, please make sure you read over this page carefully to know how to navigate the selections and entries.","title":"Configuration"},{"location":"operation/loop-settings/configurations/#closedopen-loop","text":"The Closed Loop switch controls whether Loop automatically enacts its recommended temporary basal adjustments (closed loop mode) or whether you have to manually tap to enact the recommendations (open loop mode). In addition to the visual indicator on this switch discussed below, the Loop's status icon on the main screen will also appear differently depending on the mode selected. Open loop mode will have an incomplete circle for the Loop's status icon.","title":"Closed/Open Loop"},{"location":"operation/loop-settings/configurations/#open-loop-mode","text":"When the Closed Loop switch is in the (Off ) position, Loop WILL NOT enact recommended temp basals automatically. Instead, Loop will display recommended temp basals on the main status display, just above the blood glucose graph. This is called open loop , and is a good way to understand how Loop will function, and what type of recommendations it would make. If you click on the recommended temp basal line while in open loop mode, Loop will implement the temp basal.","title":"Open Loop Mode"},{"location":"operation/loop-settings/configurations/#closed-loop-mode","text":"When the Closed Loop switch is in the ( On) position, Loop WILL automatically enact recommended temp basals on the configured insulin pump. This is known as closed loop . Typically, Loop will show the recommended temp basal just above the blood glucose graph prior to automatically enacting it. It may take a minute or so for the Loop to enact the recommended basal. Once the temp basal has been enacted successfully on the pump, the recommended temp basal will disappear from the screen and the new temp basal rate will be represented in the insulin delivery graphs.","title":"Closed Loop Mode"},{"location":"operation/loop-settings/configurations/#issue-report","text":"If you run into problems or errors with your Loop, an Issue Report can be used to help identify where the problem is occurring. The Issue Report is automatically generated and you can share it via email. Frequently, if you seek help with a technical problem, an Issue Report will provide insight for the developers and troubleshooters. Please email yourself an Issue Report anytime you are questioning Loop actions or displays. You can then use that Issue Report later to help debug the problem. Before you continue further, a word about BG units Entries into the configuration section will be available in mg/dL or mmol/L automatically, based upon how your blood glucose values are received. By default they are set to mg/dL, however once CGM values arrive in mmol/L these Loop settings can be entered in mmol/L. If you are planning to use mmol/L, be sure to wait to set your entries until after you have started to receive CGM values in Loop. If you do these in the wrong order, then your charts and entries may have incorrect units.","title":"Issue Report"},{"location":"operation/loop-settings/configurations/#correction-range","text":"The correction range is your blood glucose range that you would like Loop to correct to. Correction range is not necessarily the same target blood glucose range that you have discussed with your endocrinologist; generally the doctor's range may be much wider. For example, you may keep a correction target of 100-110 for Loop to aim to, but use a desired BG target range of 80-180 when discussing things with your endo about \"time in range\". Click the + in the upper right corner to add correction BG range(s). You can have multiple ranges based on time of day, but the first setting of the day needs to begin at midnight. Correction ranges can be a single number, such as 100-100 mg/dL, or a range such as 100-120 mg/dL. Generally speaking, if you choose to use a range, keeping the range between about 10-30 mg/dL between the lowest and highest value is a good starting place.","title":"Correction Range"},{"location":"operation/loop-settings/configurations/#override-ranges","text":"Below the Correction Range entry is a section called \"Overrides\" with a Pre-Meal setting. While active, the pre-meal targets will replace the usual correction range for Loop's temp basal recommendations. If a pre-meal range is not entered in this section, the icon will remain grey and unusable on the main screen's toolbar. The pre-meal override target can be used to as an easy way to get a small amount of insulin delivered before a meal in order to help control post-meal blood glucose spikes. If your normal target is 100-110 mg/dL and pre-meal target is 80-80 mg/dL, for example, Loop will give you an extra push to get you to the lower target number before the meal. This early insulin brings you into the meal with a mini-prebolus. The pre-meal target, when activated by pressing on the icon, will stay active for one hour, until carbs are entered, or until it is manually cancelled...whichever comes first. Loop will adjust any insulin bolus as needed based on the extra insulin provided during this pre-meal time.","title":"Override Ranges"},{"location":"operation/loop-settings/configurations/#suspend-threshold","text":"The suspend threshold must be set up for successful configuration of Loop. Your Loop will not turn green without setting this value. This value affects both bolus and basal recommendations by Loop.","title":"Suspend Threshold"},{"location":"operation/loop-settings/configurations/#bolus","text":"If you are trying to bolus a meal while any part of the predicted BG curve is below this suspend threshold value, Loop will not recommend a bolus. Instead, you will need to wait until your prediction curve is above the suspend threshold value in order to bolus.","title":"Bolus"},{"location":"operation/loop-settings/configurations/#basal","text":"If your current or any point on your predicted BG curve is below the suspend threshold, Loop will always recommend a temporary basal rate of 0 U/hr. Reasonable settings for suspend threshold will depend on user preference, but recommended not set lower than 65 mg/dL.","title":"Basal"},{"location":"operation/loop-settings/configurations/#basal-rates","text":"Note: You cannot enter basal rates until you first add a pump in Loop settings. Your basal rates will be initially populated when you walk through the Add Pump part of the setup at the beginning of this setup guide. Only one basal schedule may be set in each Loop app. The basal increments are available according to the increments of the particular pump/pod you are using. Not all pumps provide the same increments for basal deliveries. Basal schedule must start at midnight and cannot contain rates of 0 U/hr. To edit a line in your basal schedule, tap the line and adjust the time and/or amount. To remove a line, select Edit in the top right and delete it. If tapping the line doesn't work, try closing and re-opening the app. When finished editing, click on the Save to Pump... or Sync With Pod button, depending on which pump you are using. If you make any basal edits and use the Cancel button to go back to the menu without successfully saving/syncing to pump/pod, the changes you made will not be saved. Loop makes saving/syncing to pump a mandatory step to successfully editing basal rates. If you get an error message while trying to save/sync the edited basal rates, please retry until successful.","title":"Basal Rates"},{"location":"operation/loop-settings/configurations/#delivery-limits","text":"The maximum basal rate and maximum bolus settings are collectively referred to as Delivery Limits. This section will have been initially populated when you finished the Add Pump part of the setup previously. For safety, similar to basal schedule, you must keep these values the same on both the Loop app and within the pump/pod settings. If you edit these settings in Loop app, always use the Save to Pump... or Sync With Pod button, depending on which pump you are using.","title":"Delivery Limits"},{"location":"operation/loop-settings/configurations/#maximum-basal-rate","text":"Maximum basal rate will cap the the maximum temporary basal rate that the Loop is allowed to enact to meet your correction range. Typically, Loop users set their maximum basal rate around 3-4 times their highest scheduled basal rate. When you are first beginning to use Loop, it is wise to start conservative (low) in setting your maximum basal rate. If your settings are incorrect in other areas (basal rates, insulin sensitivity, carb ratio, etc), you may need time to identify where settings need to be adjusted. This process is easier if Loop is given less latitude to set high basal rates. Gradually increase your maximum basal rate as your comfort and confidence in Loop increases. If you need help with your settings adjustment, head over to LoopTips for some initial settings help","title":"Maximum Basal Rate"},{"location":"operation/loop-settings/configurations/#maximum-bolus","text":"Enter your desired single bolus maximum here. For safety, don't set a maximum bolus limit any higher than your typical large meal bolus.","title":"Maximum Bolus"},{"location":"operation/loop-settings/configurations/#insulin-model","text":"There are four insulin models to choose from; Walsh, Rapid-Acting Adults, Rapid-Acting Children, and Fiasp. If you want to read the nitty-gritty discussion that went into the development of the Rapid-Acting and Fiasp curves (collectively called \"exponential insulin models\"), you can see that in GitHub here . We highly recommend selecting one of the exponential insulin models (in other words, not the Walsh model). A common new Loop user error is to select Walsh model in order to easily shorten their insulin duration (DIA) to one like they used prior to Looping. This almost invariably leads to insulin stacking. If you would like to read more about why the duration of insulin action is important in Loop vs how you've traditionally used it, please click here to read a blog post about the subject. In summary, choosing Walsh curve just to shorten your DIA will lead to insulin stacking and less than desired bolusing recommendations. You can click on each model and see what each model's insulin activity curve looks like, active one selected in blue. The differences between the three exponential models (two Rapid-Acting and Fiasp) models has to do with the timing of the peak insulin activity timing. Not surprising, since Fiasp is marketed as the \"faster acting\" insulin. Currently all the exponential models are defaulted to an insulin duration of 6 hours, but the peak activity of the curves differs: Rapid-acting adult curve peaks at 75 minutes Rapid-acting child curve peaks at 65 minutes Fiasp peaks curve peaks at 55 minutes","title":"Insulin Model"},{"location":"operation/loop-settings/configurations/#carb-ratios","text":"Click the + in the upper right to add carb ratios for various times of day. Loop works best if you have tested and optimized your carb ratio settings for accuracy. Beware of other apps writing carbs to Health app If you are using a third-party app (such as Spike or MyFitness) that can write carbohydrates to the phone's Health app, you will need to edit the permissions to make sure Loop doesn't double carb entries. You should disable the third-party app's permissions in Health so that they can only read and not write . See Carb Entries with Third Party apps for more information about this setting.","title":"Carb Ratios"},{"location":"operation/loop-settings/configurations/#insulin-sensitivities","text":"Insulin Sensitivity Factor (ISF) is the same term as Correction Factor used in some clinics and endocrinology offices. ISF represents the drop in blood glucose levels expected from one unit of insulin. Click the + in the upper right to add insulin sensitivities for various times of day. Loop works best if you have tested and optimized your ISF settings for accuracy. Insulin sensitivities can change for many reasons including waiting too long to change your infusion set. Loop will not auto-detect changes in ISF. Incorrectly set ISF is the most common cause of roller coaster BGs for new Loop users. You will need to raise (increase) your ISF value/number to help smooth a roller coaster BG trend. You can read about that topic more over in LoopTips here .","title":"Insulin Sensitivities"},{"location":"operation/loop-settings/configurations/#next-step-loop-services","text":"You have completed the required configurations and settings in your Loop app. If you have a Nightscout site you'd like to connect Loop to, please continue on to the Loop Services page . If you are not integrating with a Nightscout site and don't want any optional logging services connected, then please proceed to the Loop's displays page . Understanding the Loop displays can be a valuable tool to understanding your Loop's actions, and also for troubleshooting, if you are having issues.","title":"Next Step: Loop Services"},{"location":"operation/loop-settings/displays/","text":"Loop Displays \u2301 This section of the docs will go over the Loop displays available and what information they offer. Information about your Loop's actions (or inactions) can often be found simply by looking at the visuals presented in the app. (Page updated for Loop v2.2.4 master.) Status Screen \u2301 The Status Screen is the main root navigation screen in Loop. It is broken up into 3 main display areas; Heads Up Display (HUD), Charts, and Toolbar. The HUD is the top area of the screen. This shows the status of the last time loop ran, current BG Reading, current temp basal, and current pump information. The next area is the charting area. This includes, glucose trend and prediction, Active Insulin, Insulin Delivery, and Carbohydrates. The final display area is the toolbar which has buttons for Carbs, Pre-Meal, Bolus, Overrides, and Settings. Heads Up Display \u2301 The Heads Up Display (HUD) is a very useful quick reference guide to your Loop's status. Every 5 minutes, Loop updates CGM and pump/pod data. Loop timestamps the HUD data with the last data point that came in. If a timestamp goes older than 5 minutes old, that is a valuable indicator to where your Loop is failing to get the needed information. The HUD's first three icons, from left to right, are the same no matter whether you are using a Medtronic pump or Omnipod; status of the last time loop ran, current BG Reading, and current relative temp basal. The last two icons will change depending on what type of pump you are using. Medtronic users: The last two icons are the most recent (1) pump/reservoir status and (2) pump percentage battery remaining. Details below Omnipod users: The last two icons are the most recent (1) pod status and (2) hours of pod use. Details below Loop Status \u2301 The Loop Status is the colored circle in the upper left corner of the main Loop display. There are four colors that are typically displayed. A grey circle indicates the Loop is warming up and hasn\u2019t yet completed its initial loop. When the Loop is first activated, it may take about 15-20 minutes to complete the first Loop, and the grey circle will be displayed. It needs CGM data to be gathered, so be patient. When it finally completes its first loop, the circle will turn green. If you can't get your grey loop to turn green, please see the Yellow and Red Loop troubleshooting page for tips. A green circle indicates the Loop has been successfully completed within the last 5 minutes. The time since the loop last completed will be displayed under the circle. A yellow circle indicates the Loop has not completed in the last 5-15 minutes. It is not unusual to have a few instances of yellow circles throughout a day of looping. They can be caused by temporarily getting too far away from RileyLink or iPhone (more than about 3-10 feet depending on conditions), CGM failing to read or being in ???, radio frequency \u201cnoise\u201d interference, and such. Generally, most yellow circles will self-resolve without needing any special troubleshooting. A red circle indicates the Loop has not completed in over 15 minutes. This is not a typical state, and you should troubleshoot why Loop is not completing. Please review the Yellow and Red Loop troubleshooting page for tips on how to get your green Loop back. Clicking on the red circle will also pop-up the last error message to help guide your troubleshooting. When the circle is notched and not complete, that means the Loop is operating in \u201copen-loop\u201d mode. When the \u201cclosed-loop\u201d setting is turned on, the loop status will show a completed circle. Fun Fact The loop status icon will pulse slightly when Loop is communicating with the pump. The pulsing will stop when the communication has completed (green loop) or given up (yellow or red loop). Glucose \u2301 The current BG reading from the CGM will display, including trending arrow and time the reading was taken. If the BG is being read straight from the G5/G6 transmitter or G4 receiver, no special symbols will appear. If the BG is being read from the Dexcom Share Servers, a small cloud icon will be in the corner of the BG reading. Internet access is required to run in this mode. When you first start Loop, there may be a small yellow alert next to the BG. This should go away within a short period of time (around 5 minutes or less). If the yellow alert remains, something may be wrong with fetching BG data. You can try restarting the Loop app (double tap home button, up-swipe on the app to close it) to see if BG data will resume. Special note for Dexcom G5/G6 users >, a yellow alert will appear when calibration is needed. The alert will clear once the calibration is given, but typically Loop will work IF the yellow alert is only for a needed G5/G6 calibration. Temp Basal \u2301 The temp basal will display the enacted temp basal change relative to the scheduled basal. So if the scheduled basal was 1.0 units per hour and Loop has set a temp basal of 0.2 units per hour, the temp basal icon will display -0.8 U, as shown in the graphic to the left. Reservoir (Medtronic Users) \u2301 The reservoir icon will remain grey and plain until insulin volume decreases. At 25% reservoir volume remaining, the reservoir icon will turn yellow. At 10% reservoir volume remaining, the reservoir icon will turn red. The remaining units will be displayed when it gets to these lower thresholds. Battery (Medtronic Users) \u2301 For x54 pumps, the battery icon will show 100/75/50/25% increments just as the pump does. As the battery level decreases, the icon will turn from grey to yellow to red. For x22, x23 pumps, the battery icon will read discrete % values. The warning colors/levels on Loop's battery indicator work in conjunction with the type of battery selected. If you change battery types, please make sure to update your battery selection in the Loop app settings. The pump's on-screen battery indicator is not a good indicator of remaining battery life for the purposes of looping. Loop's pump communications will fail from low battery levels sooner than the insulin delivery will fail. The Loop's battery level warnings are designed to give you approximately 8 hours of notice before the pump battery will need changing. Reservoir (Omnipod Users) \u2301 The pod icon will remain grey and plain until insulin volume decreases. At 50 units or less insulin remaining, the reservoir icon will turn yellow. At 20 units or less remaining, the reservoir icon will turn red. The remaining units will be displayed when it gets to these lower thresholds. When the reading is 0 units, there may be up to 4 unit of insulin available but don't count on it. If the pod senses insulin can no longer be delivered, the pod will have a sustained audible alarm (the scream). Tapping Replace Pod in Loop->Pod->Settings should silence the alarm. Pod Age (Omnipod Users) \u2301 The pod's age, typically a 3-day lifespan, is represented by three equal segments of the pod age icon. As the pod ages, the segments are converted to a darker grey color. At 54 hours old, the pod age icon will turn yellow. At 72 hours old, the pod age icon will turn red, the pod will begin the periodic warning beep, and the pod age icon will show a \"replace pod\" message in the HUD. When you reach 80 hours of pod use, the pod will have a sustained audible alarm (the scream) and stops all insulin delivery. Tapping Replace Pod in Loop->Pod->Settings should silence the alarm. Charts \u2301 There are several charts that help you navigate your Loop actions. Clicking on each of the charts will also open up additional information. Glucose Chart \u2301 The glucose chart displays BG values in your preferred units. (If not, quit and restart Loop app on your phone.) The vertical scale of the chart is calculated on the fly by Loop to be as useful as possible while including the highest and lowest readings in the chart. The horizontal axis is set to go forward from the current time until your DIA (insulin duration) forward (so you can see what Loop thinks BG will be eventually). It then goes back in time as far as it can, based upon the width in pixels of your screen. Note, if you turn your device to landscape mode you will have more screen real estate and thus will be able to see further back in time. The BG correction range is shown as a blue bar on the glucose chart. Single-value target BG range (such as 100-100 mg/dl), will have a narrower blue range. When a temporary override range is enabled, a darker blue bar where the overrides are set will be displayed, as well as the normal correction target in lighter blue. If you have a crazy negative prediction - it is likely that you set an override with a tiny sensitivity. Don't do that again. Best approach: Do not panic - this is a prediction only; not reality. Open the loop until the prediction settles down. In future, do not choose a tiny sensitivity to force less insulin, simply increase the correction range in your override - Loop will reduce your basal rate at the next cycle (within 5 minutes). The eventual BG displayed on the right side of the chart does NOT take into account a recently enacted temp basal. In other words, if you are above BG target and Loop just enacted a high temp basal to help, the eventual BG does not reflect the expected lowering of BGs that would result from that recently enacted temp basal. Loop waits until the insulin has actually been delivered before it \"uses\" the insulin in its calculations for BG impacts. If you suspended your pump or had a \"no delivery\" alarm shortly after the temp basal was started, you would want that accurately reflected in the insulin on board and associated eventual BG. If you tap on the Glucose Chart itself, it will open the Predicted Glucose chart described below. Predicted Glucose Chart \u2301 The predicted glucose view is a great way to gain insight into the various components\u2019 importance in Loop\u2019s prediction of eventual BG. The graph at the top of this view will match your Glucose Chart. Below this chart you will see a very detailed explanation of all of the variables that Loop takes into account in predicting your future BG value. Each of those effects (including Carbohydrates, Insulin, Glucose Momentum and Retrospective Correction) includes details of the calculation used. You can tap on any of the entries to turn them off and on for visualization. The resulting changes can be viewed by the changes in the dashed lines. Note - these elements are not turned on and off in the Loop predictions. They just modify the graph so you can view the relative effects. Active Insulin Chart \u2301 The Active Insulin chart displays the total insulin contribution from both temp basals and boluses. Active IOB can be either positive and negative IOB. Negative IOB results from the suspension of normally scheduled basals. The active insulin displayed in the upper right corner of the chart does NOT include insulin contributions from a recently enacted temp basal or bolus until the (for Medtronic) pump\u2019s reservoir volume is read and confirms a drop in reservoir volume (confirming the insulin has actually been delivered). The opposite is true for Omnipods. If a message is sent from Loop, it assumes the pod got the message and enacted it - even if the acknowledgement is not received. Later, when communication is restored, if a command was not enacted by the pod, the Event History is updated. Medtronic Only : So long as you have Event History as the Preferred Data Source in Loop settings, primed insulin deliveries (e.g., cannula fills or manual primes) will not be counted towards IOB. Insulin Delivery Chart \u2301 The Insulin Delivery chart displays a history of the temp basals enacted by Loop. The display is relative to the scheduled basal rates entered in the Loop settings. So, a rate displayed in this chart as +0 units would indicate no temp basal was set, and Loop defaulted to the scheduled basal rate. Individual boluses are indicated by an orange triangle on the chart (shown in the graphic above, near the left-most time). The total insulin delivered since midnight, including all basals and boluses AND (Medtronic Only) priming insulin , is given in the upper right corner of the graph. Please be patient for a bolus delivery to appear. There is a lag time from when you press the \u201cdeliver\u201d bolus button to when the orange triangle is drawn sometimes. The insulin has to be delivered and then the (Medtronic Only) pump reservoir needs to be read to confirm delivery, before the triangle will appear and IOB will be added. Occasionally, the bolus may be temporarily rendered (drawn) as a very high temp basal rate vs. a (triangle) discrete bolus event. This does NOT mean that the Loop actually enacted a high temp basal rate...only that the bolus is being drawn on the chart in the equivalent of a high temp basal rate. Reservoir and Event History \u2301 Clicking on either the Active Insulin or Insulin Delivery charts will open your Insulin Delivery history. The top of the screen will display the current IOB and the total insulin delivered for the day since midnight (or since the time the loop became active if you started Loop after midnight). There are two viewing options; Reservoir or Event History. Reservoir: Omnipod users should not worry about the reservoir display. Pods do not report or track insulin remaining until their reservoirs get below 50 units remaining. If your pod has more insulin than that - you'll see the reservoir history from the previous pod - ignore that. Medtronic users will have reservoir history displayed in 5-minute increments, unless Loop has been having communication issues. Event History: Event history is a detailed accounting of all pump/pod actions. Both Medtronic and Omnipod users will have a detailed record of event history. If you tap on an event, you get more detail. Turn your phone to landscape to improve readability. Carbohydrate Chart \u2301 The Carbohydrate chart displays the carbs used by Loop to predict BG changes. The active COB is displayed in the upper right corner of the chart. Clicking on the chart will open the Carb Entries history and you can edit/delete any previous entries through that screen. Please read the Carb Entry page for more information about editing carb entries. For more information about the Insulin Counteraction Effects information found in the Carb History, please see here . Tool Bar \u2301 The toolbar is where your inputs to the Loop behavior take place. The individual components of the toolbar are, left to right: Carb entry tool - click on this tool to enter carbs into the Loop app. Loop will not read carb entries from a Medtronic pump or Nightscout, so you must use the carb entry tool in Loop app in order to have carbs accounted for by the Loop. Detailed info regarding how to enter, save, and edit carb entries can be found in the Carb Entry page . Pre-meal target - click this tool to set the Pre-Meal temporary override target . (If you have not configured a pre-meal target under Loop Settings, this icon will be inactive - some people prefer this to avoid accidently tapping it.) This target will remain in effect (1) for 60 minutes, (2) until a carb entry is saved, or (3) until the target is toggled off manually or by tapping on the override icon, whichever comes first. The background coloring of the Pre-Meal target will turn green when active and there will be a dark blue line on the BG chart indicating where the override target is enabled. Bolus tool - click on this tool to bring up the bolus tool. Normally, this screen will automatically open on its own and function as a bolus wizard when a meal is saved on the carb entry tool screen. But you can click on this icon anytime to manually bolus. During rapidly rising BGs, where Loop doesn't have an adequate temp basal rate to cover the pace at which BGs are rising, you may try clicking on the bolus tool to see if Loop is recommending a correction bolus to help control the BG spike. Or if you want to trade bolus now for basal later (super bolus), you can enter a bolus greater than Loop recommends - Loop will set zero Temp Basal next cycle. For more information about the Bolus tool features and use, see the Bolus page . Overrides - click this tool to set an Override . Loop Settings - click on this tool to make changes to any of your Loop settings . Next Step: RileyLink Menu \u2301 You are almost there! One more Loop menu that you need to know about is the RileyLink (or compatible device) Menu. You can access your this menu (one for each Bluetooth connected device) by tapping on the pump/pod image in Loop settings (or HUD), look for the DEVICES section and tap on a \"My Device Name\" row that has a green slider. If you don't know what that means, check out the Pump Pairing section for Adding a Pump Medtronic or Omnipod . Click here to read more about what to expect to see when you tap on \"My Device Name\".","title":"Loop Displays"},{"location":"operation/loop-settings/displays/#loop-displays","text":"This section of the docs will go over the Loop displays available and what information they offer. Information about your Loop's actions (or inactions) can often be found simply by looking at the visuals presented in the app. (Page updated for Loop v2.2.4 master.)","title":"Loop Displays"},{"location":"operation/loop-settings/displays/#status-screen","text":"The Status Screen is the main root navigation screen in Loop. It is broken up into 3 main display areas; Heads Up Display (HUD), Charts, and Toolbar. The HUD is the top area of the screen. This shows the status of the last time loop ran, current BG Reading, current temp basal, and current pump information. The next area is the charting area. This includes, glucose trend and prediction, Active Insulin, Insulin Delivery, and Carbohydrates. The final display area is the toolbar which has buttons for Carbs, Pre-Meal, Bolus, Overrides, and Settings.","title":"Status Screen"},{"location":"operation/loop-settings/displays/#heads-up-display","text":"The Heads Up Display (HUD) is a very useful quick reference guide to your Loop's status. Every 5 minutes, Loop updates CGM and pump/pod data. Loop timestamps the HUD data with the last data point that came in. If a timestamp goes older than 5 minutes old, that is a valuable indicator to where your Loop is failing to get the needed information. The HUD's first three icons, from left to right, are the same no matter whether you are using a Medtronic pump or Omnipod; status of the last time loop ran, current BG Reading, and current relative temp basal. The last two icons will change depending on what type of pump you are using. Medtronic users: The last two icons are the most recent (1) pump/reservoir status and (2) pump percentage battery remaining. Details below Omnipod users: The last two icons are the most recent (1) pod status and (2) hours of pod use. Details below","title":"Heads Up Display"},{"location":"operation/loop-settings/displays/#loop-status","text":"The Loop Status is the colored circle in the upper left corner of the main Loop display. There are four colors that are typically displayed. A grey circle indicates the Loop is warming up and hasn\u2019t yet completed its initial loop. When the Loop is first activated, it may take about 15-20 minutes to complete the first Loop, and the grey circle will be displayed. It needs CGM data to be gathered, so be patient. When it finally completes its first loop, the circle will turn green. If you can't get your grey loop to turn green, please see the Yellow and Red Loop troubleshooting page for tips. A green circle indicates the Loop has been successfully completed within the last 5 minutes. The time since the loop last completed will be displayed under the circle. A yellow circle indicates the Loop has not completed in the last 5-15 minutes. It is not unusual to have a few instances of yellow circles throughout a day of looping. They can be caused by temporarily getting too far away from RileyLink or iPhone (more than about 3-10 feet depending on conditions), CGM failing to read or being in ???, radio frequency \u201cnoise\u201d interference, and such. Generally, most yellow circles will self-resolve without needing any special troubleshooting. A red circle indicates the Loop has not completed in over 15 minutes. This is not a typical state, and you should troubleshoot why Loop is not completing. Please review the Yellow and Red Loop troubleshooting page for tips on how to get your green Loop back. Clicking on the red circle will also pop-up the last error message to help guide your troubleshooting. When the circle is notched and not complete, that means the Loop is operating in \u201copen-loop\u201d mode. When the \u201cclosed-loop\u201d setting is turned on, the loop status will show a completed circle. Fun Fact The loop status icon will pulse slightly when Loop is communicating with the pump. The pulsing will stop when the communication has completed (green loop) or given up (yellow or red loop).","title":"Loop Status"},{"location":"operation/loop-settings/displays/#glucose","text":"The current BG reading from the CGM will display, including trending arrow and time the reading was taken. If the BG is being read straight from the G5/G6 transmitter or G4 receiver, no special symbols will appear. If the BG is being read from the Dexcom Share Servers, a small cloud icon will be in the corner of the BG reading. Internet access is required to run in this mode. When you first start Loop, there may be a small yellow alert next to the BG. This should go away within a short period of time (around 5 minutes or less). If the yellow alert remains, something may be wrong with fetching BG data. You can try restarting the Loop app (double tap home button, up-swipe on the app to close it) to see if BG data will resume. Special note for Dexcom G5/G6 users >, a yellow alert will appear when calibration is needed. The alert will clear once the calibration is given, but typically Loop will work IF the yellow alert is only for a needed G5/G6 calibration.","title":"Glucose"},{"location":"operation/loop-settings/displays/#temp-basal","text":"The temp basal will display the enacted temp basal change relative to the scheduled basal. So if the scheduled basal was 1.0 units per hour and Loop has set a temp basal of 0.2 units per hour, the temp basal icon will display -0.8 U, as shown in the graphic to the left.","title":"Temp Basal"},{"location":"operation/loop-settings/displays/#reservoir-medtronic-users","text":"The reservoir icon will remain grey and plain until insulin volume decreases. At 25% reservoir volume remaining, the reservoir icon will turn yellow. At 10% reservoir volume remaining, the reservoir icon will turn red. The remaining units will be displayed when it gets to these lower thresholds.","title":"Reservoir (Medtronic Users)"},{"location":"operation/loop-settings/displays/#battery-medtronic-users","text":"For x54 pumps, the battery icon will show 100/75/50/25% increments just as the pump does. As the battery level decreases, the icon will turn from grey to yellow to red. For x22, x23 pumps, the battery icon will read discrete % values. The warning colors/levels on Loop's battery indicator work in conjunction with the type of battery selected. If you change battery types, please make sure to update your battery selection in the Loop app settings. The pump's on-screen battery indicator is not a good indicator of remaining battery life for the purposes of looping. Loop's pump communications will fail from low battery levels sooner than the insulin delivery will fail. The Loop's battery level warnings are designed to give you approximately 8 hours of notice before the pump battery will need changing.","title":"Battery (Medtronic Users)"},{"location":"operation/loop-settings/displays/#reservoir-omnipod-users","text":"The pod icon will remain grey and plain until insulin volume decreases. At 50 units or less insulin remaining, the reservoir icon will turn yellow. At 20 units or less remaining, the reservoir icon will turn red. The remaining units will be displayed when it gets to these lower thresholds. When the reading is 0 units, there may be up to 4 unit of insulin available but don't count on it. If the pod senses insulin can no longer be delivered, the pod will have a sustained audible alarm (the scream). Tapping Replace Pod in Loop->Pod->Settings should silence the alarm.","title":"Reservoir (Omnipod Users)"},{"location":"operation/loop-settings/displays/#pod-age-omnipod-users","text":"The pod's age, typically a 3-day lifespan, is represented by three equal segments of the pod age icon. As the pod ages, the segments are converted to a darker grey color. At 54 hours old, the pod age icon will turn yellow. At 72 hours old, the pod age icon will turn red, the pod will begin the periodic warning beep, and the pod age icon will show a \"replace pod\" message in the HUD. When you reach 80 hours of pod use, the pod will have a sustained audible alarm (the scream) and stops all insulin delivery. Tapping Replace Pod in Loop->Pod->Settings should silence the alarm.","title":"Pod Age (Omnipod Users)"},{"location":"operation/loop-settings/displays/#charts","text":"There are several charts that help you navigate your Loop actions. Clicking on each of the charts will also open up additional information.","title":"Charts"},{"location":"operation/loop-settings/displays/#glucose-chart","text":"The glucose chart displays BG values in your preferred units. (If not, quit and restart Loop app on your phone.) The vertical scale of the chart is calculated on the fly by Loop to be as useful as possible while including the highest and lowest readings in the chart. The horizontal axis is set to go forward from the current time until your DIA (insulin duration) forward (so you can see what Loop thinks BG will be eventually). It then goes back in time as far as it can, based upon the width in pixels of your screen. Note, if you turn your device to landscape mode you will have more screen real estate and thus will be able to see further back in time. The BG correction range is shown as a blue bar on the glucose chart. Single-value target BG range (such as 100-100 mg/dl), will have a narrower blue range. When a temporary override range is enabled, a darker blue bar where the overrides are set will be displayed, as well as the normal correction target in lighter blue. If you have a crazy negative prediction - it is likely that you set an override with a tiny sensitivity. Don't do that again. Best approach: Do not panic - this is a prediction only; not reality. Open the loop until the prediction settles down. In future, do not choose a tiny sensitivity to force less insulin, simply increase the correction range in your override - Loop will reduce your basal rate at the next cycle (within 5 minutes). The eventual BG displayed on the right side of the chart does NOT take into account a recently enacted temp basal. In other words, if you are above BG target and Loop just enacted a high temp basal to help, the eventual BG does not reflect the expected lowering of BGs that would result from that recently enacted temp basal. Loop waits until the insulin has actually been delivered before it \"uses\" the insulin in its calculations for BG impacts. If you suspended your pump or had a \"no delivery\" alarm shortly after the temp basal was started, you would want that accurately reflected in the insulin on board and associated eventual BG. If you tap on the Glucose Chart itself, it will open the Predicted Glucose chart described below.","title":"Glucose Chart"},{"location":"operation/loop-settings/displays/#predicted-glucose-chart","text":"The predicted glucose view is a great way to gain insight into the various components\u2019 importance in Loop\u2019s prediction of eventual BG. The graph at the top of this view will match your Glucose Chart. Below this chart you will see a very detailed explanation of all of the variables that Loop takes into account in predicting your future BG value. Each of those effects (including Carbohydrates, Insulin, Glucose Momentum and Retrospective Correction) includes details of the calculation used. You can tap on any of the entries to turn them off and on for visualization. The resulting changes can be viewed by the changes in the dashed lines. Note - these elements are not turned on and off in the Loop predictions. They just modify the graph so you can view the relative effects.","title":"Predicted Glucose Chart"},{"location":"operation/loop-settings/displays/#active-insulin-chart","text":"The Active Insulin chart displays the total insulin contribution from both temp basals and boluses. Active IOB can be either positive and negative IOB. Negative IOB results from the suspension of normally scheduled basals. The active insulin displayed in the upper right corner of the chart does NOT include insulin contributions from a recently enacted temp basal or bolus until the (for Medtronic) pump\u2019s reservoir volume is read and confirms a drop in reservoir volume (confirming the insulin has actually been delivered). The opposite is true for Omnipods. If a message is sent from Loop, it assumes the pod got the message and enacted it - even if the acknowledgement is not received. Later, when communication is restored, if a command was not enacted by the pod, the Event History is updated. Medtronic Only : So long as you have Event History as the Preferred Data Source in Loop settings, primed insulin deliveries (e.g., cannula fills or manual primes) will not be counted towards IOB.","title":"Active Insulin Chart"},{"location":"operation/loop-settings/displays/#insulin-delivery-chart","text":"The Insulin Delivery chart displays a history of the temp basals enacted by Loop. The display is relative to the scheduled basal rates entered in the Loop settings. So, a rate displayed in this chart as +0 units would indicate no temp basal was set, and Loop defaulted to the scheduled basal rate. Individual boluses are indicated by an orange triangle on the chart (shown in the graphic above, near the left-most time). The total insulin delivered since midnight, including all basals and boluses AND (Medtronic Only) priming insulin , is given in the upper right corner of the graph. Please be patient for a bolus delivery to appear. There is a lag time from when you press the \u201cdeliver\u201d bolus button to when the orange triangle is drawn sometimes. The insulin has to be delivered and then the (Medtronic Only) pump reservoir needs to be read to confirm delivery, before the triangle will appear and IOB will be added. Occasionally, the bolus may be temporarily rendered (drawn) as a very high temp basal rate vs. a (triangle) discrete bolus event. This does NOT mean that the Loop actually enacted a high temp basal rate...only that the bolus is being drawn on the chart in the equivalent of a high temp basal rate.","title":"Insulin Delivery Chart"},{"location":"operation/loop-settings/displays/#reservoir-and-event-history","text":"Clicking on either the Active Insulin or Insulin Delivery charts will open your Insulin Delivery history. The top of the screen will display the current IOB and the total insulin delivered for the day since midnight (or since the time the loop became active if you started Loop after midnight). There are two viewing options; Reservoir or Event History. Reservoir: Omnipod users should not worry about the reservoir display. Pods do not report or track insulin remaining until their reservoirs get below 50 units remaining. If your pod has more insulin than that - you'll see the reservoir history from the previous pod - ignore that. Medtronic users will have reservoir history displayed in 5-minute increments, unless Loop has been having communication issues. Event History: Event history is a detailed accounting of all pump/pod actions. Both Medtronic and Omnipod users will have a detailed record of event history. If you tap on an event, you get more detail. Turn your phone to landscape to improve readability.","title":"Reservoir and Event History"},{"location":"operation/loop-settings/displays/#carbohydrate-chart","text":"The Carbohydrate chart displays the carbs used by Loop to predict BG changes. The active COB is displayed in the upper right corner of the chart. Clicking on the chart will open the Carb Entries history and you can edit/delete any previous entries through that screen. Please read the Carb Entry page for more information about editing carb entries. For more information about the Insulin Counteraction Effects information found in the Carb History, please see here .","title":"Carbohydrate Chart"},{"location":"operation/loop-settings/displays/#tool-bar","text":"The toolbar is where your inputs to the Loop behavior take place. The individual components of the toolbar are, left to right: Carb entry tool - click on this tool to enter carbs into the Loop app. Loop will not read carb entries from a Medtronic pump or Nightscout, so you must use the carb entry tool in Loop app in order to have carbs accounted for by the Loop. Detailed info regarding how to enter, save, and edit carb entries can be found in the Carb Entry page . Pre-meal target - click this tool to set the Pre-Meal temporary override target . (If you have not configured a pre-meal target under Loop Settings, this icon will be inactive - some people prefer this to avoid accidently tapping it.) This target will remain in effect (1) for 60 minutes, (2) until a carb entry is saved, or (3) until the target is toggled off manually or by tapping on the override icon, whichever comes first. The background coloring of the Pre-Meal target will turn green when active and there will be a dark blue line on the BG chart indicating where the override target is enabled. Bolus tool - click on this tool to bring up the bolus tool. Normally, this screen will automatically open on its own and function as a bolus wizard when a meal is saved on the carb entry tool screen. But you can click on this icon anytime to manually bolus. During rapidly rising BGs, where Loop doesn't have an adequate temp basal rate to cover the pace at which BGs are rising, you may try clicking on the bolus tool to see if Loop is recommending a correction bolus to help control the BG spike. Or if you want to trade bolus now for basal later (super bolus), you can enter a bolus greater than Loop recommends - Loop will set zero Temp Basal next cycle. For more information about the Bolus tool features and use, see the Bolus page . Overrides - click this tool to set an Override . Loop Settings - click on this tool to make changes to any of your Loop settings .","title":"Tool Bar"},{"location":"operation/loop-settings/displays/#next-step-rileylink-menu","text":"You are almost there! One more Loop menu that you need to know about is the RileyLink (or compatible device) Menu. You can access your this menu (one for each Bluetooth connected device) by tapping on the pump/pod image in Loop settings (or HUD), look for the DEVICES section and tap on a \"My Device Name\" row that has a green slider. If you don't know what that means, check out the Pump Pairing section for Adding a Pump Medtronic or Omnipod . Click here to read more about what to expect to see when you tap on \"My Device Name\".","title":"Next Step: RileyLink Menu"},{"location":"operation/loop-settings/mdt-pump/","text":"Medtronic Pump Users \u2301 Your Loop won\u2019t have much showing initially until we get some basic settings input. The beginning step will be to add a pump to your Loop. If you are using a Medtronic pump, you can follow along for the rest of this page. If, however, you are using an Omnipod pump, please head over to this page instead. Prepare Medtronic Pump \u2301 Before you begin the rest of the setup process, there are several steps on your Medtronic pump that you will need to complete prior to moving on with Loop setup. DO NOT SKIP THESE STEPS OR YOUR LOOP WILL NOT WORK. Turn off Patterns under the basal menu settings. This will force Loop to use your \"Standard\" basal rate schedule. Make sure your standard basal rate schedule is up-to-date and accurate. Loop will automatically import your pump's existing standard basal rate schedule when you add your pump in the subsequent parts of this page. If you change basal rates later...make sure to make those changes in the Loop app and use Loop to save the changes back to the pump. If you make changes directly in the pump, Loop will not automatically know about those changes and you will cause a mismatch. Set your pump's Temp Basal Type to Insulin Rate (U/hr) . Do NOT use percentage. Your Loop will not run unless your temp basal type is set to units/hour. Make sure your maximum basal rate and maximum bolus (those are particular settings in the pump) are reasonably set for your particular needs. For new Loop users, a maximum basal rate equal to approximately 2-4 times your highest scheduled basal rate is a good starting point as you learn Loop and dial in your other settings. You can adjust as your comfort and use of Loop develop. Set Remote Devices to ON and enter any random ID (000000 will work). This setting is found in the pump's Utilities menu (for x23 continue to Connect Devices, Remotes) and turn ON the Remote Options. Cancel any currently running extended or dual wave boluses. Loop cannot loop with those running. Make sure the other settings in your pump, such as bolus wizard settings, are up-to-date so that if you stop using Loop, those settings will be accurate for non-Loop traditional pump use. Select Pump Type \u2301 Let\u2019s start by clicking on the Loop Settings button in the tool bar at the bottom of your Loop app. It looks like a little sprocket. On the settings screen that opens, click on Add Pump and select the Medtronic pump option that appears. Pump Pairing \u2301 You now need to follow a few simple screen prompts to add your Medtronic pump to Loop: Make sure your RileyLink is turned on and nearby, then you will see a RileyLink listed in this area of the settings. Actually, you will see a list of any RileyLinks that are in the nearby area. Slide on the toggle for your RileyLink. Add your pump's region, color, and serial number. Click the Continue button to finish the addition of your pump. For x23 and x54 Medtronic pump users only For x23 and x54 Medtronic pump users, there is a packet of information special to those pumps called MySentry messages. If you have never setup this part of the pump previously, you may see a screen, called \"Pump Broadcasts\", at this point in the setup process. Follow the directions on the screen. They will require you to take some manual steps on your pump to \"pair\" it with your Loop app. Basically, you will need to go to your pump's main menu, scroll down to Utilities, then Connect Devices, then Other Devices, turn that setting On, and then select Find Device. Once you do that, click on the Continue button in Loop app and the pairing will take place. This will allow those MySentry packets of information to flow to Loop app. This step does not apply for x22 or x15 pump users, since those pumps do not have MySentry capabilities. Now that your pump is paired with Loop, you will be finishing these steps: Change your pump time using the Loop app (and read all the info on that screen) Import your pump's basal rate schedule, maximum basal rate, and maximum bolus (maximums are collectively called \"delivery limits\" in Loop) Select your pump's battery type (lithium or alakine) Leave the Preferred Data Souce on Event History Event History must be selected for Nightscout to display temp basals, carbs, and boluses from Loop. Event History must also be selected in order for prime events to be detected and NOT contribute to IOB during site changes. Please just leave the Preferred Data Source on Event History. Change Time Zone \u2301 Loop automatically prompts you to set your pump time using the Loop app as part of initial Loop setup. There will be other times you need to change the time - traveling or daylight savings time start and end. It is important that you use Loop to change time on your pump; do not adjust time on your pump directly once it is attached to Loop. If you are traveling through time zones, Loop continues to work - just be aware that your basal rate and other configuration settings will be in the original time zone. To change time zones, please follow the Change Time Zone instructions. Always use the Loop -> Pump -> Change Time command to change pump time. Do not use the Medtronic pump menus to change your pump's time when Looping. Next Step: Add CGM \u2301 Congrats! You've added your Medtronic pump to your Loop app. Now, click on the settings button in the upper left corner to take you back to Loop's settings menu. Your next step is to Add CGM to your Loop app. After all, without CGM data, your Loop won't loop.","title":"Add Medtronic"},{"location":"operation/loop-settings/mdt-pump/#medtronic-pump-users","text":"Your Loop won\u2019t have much showing initially until we get some basic settings input. The beginning step will be to add a pump to your Loop. If you are using a Medtronic pump, you can follow along for the rest of this page. If, however, you are using an Omnipod pump, please head over to this page instead.","title":"Medtronic Pump Users"},{"location":"operation/loop-settings/mdt-pump/#prepare-medtronic-pump","text":"Before you begin the rest of the setup process, there are several steps on your Medtronic pump that you will need to complete prior to moving on with Loop setup. DO NOT SKIP THESE STEPS OR YOUR LOOP WILL NOT WORK. Turn off Patterns under the basal menu settings. This will force Loop to use your \"Standard\" basal rate schedule. Make sure your standard basal rate schedule is up-to-date and accurate. Loop will automatically import your pump's existing standard basal rate schedule when you add your pump in the subsequent parts of this page. If you change basal rates later...make sure to make those changes in the Loop app and use Loop to save the changes back to the pump. If you make changes directly in the pump, Loop will not automatically know about those changes and you will cause a mismatch. Set your pump's Temp Basal Type to Insulin Rate (U/hr) . Do NOT use percentage. Your Loop will not run unless your temp basal type is set to units/hour. Make sure your maximum basal rate and maximum bolus (those are particular settings in the pump) are reasonably set for your particular needs. For new Loop users, a maximum basal rate equal to approximately 2-4 times your highest scheduled basal rate is a good starting point as you learn Loop and dial in your other settings. You can adjust as your comfort and use of Loop develop. Set Remote Devices to ON and enter any random ID (000000 will work). This setting is found in the pump's Utilities menu (for x23 continue to Connect Devices, Remotes) and turn ON the Remote Options. Cancel any currently running extended or dual wave boluses. Loop cannot loop with those running. Make sure the other settings in your pump, such as bolus wizard settings, are up-to-date so that if you stop using Loop, those settings will be accurate for non-Loop traditional pump use.","title":"Prepare Medtronic Pump"},{"location":"operation/loop-settings/mdt-pump/#select-pump-type","text":"Let\u2019s start by clicking on the Loop Settings button in the tool bar at the bottom of your Loop app. It looks like a little sprocket. On the settings screen that opens, click on Add Pump and select the Medtronic pump option that appears.","title":"Select Pump Type"},{"location":"operation/loop-settings/mdt-pump/#pump-pairing","text":"You now need to follow a few simple screen prompts to add your Medtronic pump to Loop: Make sure your RileyLink is turned on and nearby, then you will see a RileyLink listed in this area of the settings. Actually, you will see a list of any RileyLinks that are in the nearby area. Slide on the toggle for your RileyLink. Add your pump's region, color, and serial number. Click the Continue button to finish the addition of your pump. For x23 and x54 Medtronic pump users only For x23 and x54 Medtronic pump users, there is a packet of information special to those pumps called MySentry messages. If you have never setup this part of the pump previously, you may see a screen, called \"Pump Broadcasts\", at this point in the setup process. Follow the directions on the screen. They will require you to take some manual steps on your pump to \"pair\" it with your Loop app. Basically, you will need to go to your pump's main menu, scroll down to Utilities, then Connect Devices, then Other Devices, turn that setting On, and then select Find Device. Once you do that, click on the Continue button in Loop app and the pairing will take place. This will allow those MySentry packets of information to flow to Loop app. This step does not apply for x22 or x15 pump users, since those pumps do not have MySentry capabilities. Now that your pump is paired with Loop, you will be finishing these steps: Change your pump time using the Loop app (and read all the info on that screen) Import your pump's basal rate schedule, maximum basal rate, and maximum bolus (maximums are collectively called \"delivery limits\" in Loop) Select your pump's battery type (lithium or alakine) Leave the Preferred Data Souce on Event History Event History must be selected for Nightscout to display temp basals, carbs, and boluses from Loop. Event History must also be selected in order for prime events to be detected and NOT contribute to IOB during site changes. Please just leave the Preferred Data Source on Event History.","title":"Pump Pairing"},{"location":"operation/loop-settings/mdt-pump/#change-time-zone","text":"Loop automatically prompts you to set your pump time using the Loop app as part of initial Loop setup. There will be other times you need to change the time - traveling or daylight savings time start and end. It is important that you use Loop to change time on your pump; do not adjust time on your pump directly once it is attached to Loop. If you are traveling through time zones, Loop continues to work - just be aware that your basal rate and other configuration settings will be in the original time zone. To change time zones, please follow the Change Time Zone instructions. Always use the Loop -> Pump -> Change Time command to change pump time. Do not use the Medtronic pump menus to change your pump's time when Looping.","title":"Change Time Zone"},{"location":"operation/loop-settings/mdt-pump/#next-step-add-cgm","text":"Congrats! You've added your Medtronic pump to your Loop app. Now, click on the settings button in the upper left corner to take you back to Loop's settings menu. Your next step is to Add CGM to your Loop app. After all, without CGM data, your Loop won't loop.","title":"Next Step: Add CGM"},{"location":"operation/loop-settings/omnipod-pump/","text":"Omnipod Users \u2301 Your Loop won\u2019t have much showing initially until we get some basic settings input. The beginning step will be to add a pump to your Loop. If you are using an Omnipod pump, you can follow along for the rest of this page. If, however, you are using a Medtronic pump, please head over to this page instead. Select Pump Type \u2301 Let\u2019s start by clicking on the Loop Settings button in the toolbar at the bottom of your Loop app. It looks like a little sprocket. On the settings screen that opens, click on Add Pump and select the Omnipod option that appears. Select RileyLink \u2301 A list of all RileyLinks in the nearby area will display in the RileyLink Setup screen. Select your RileyLink by sliding the toggle to display green and then press the blue Continue button at the bottom of the screen. If your RileyLink does not appear, make sure that its switch is turned on (switch slide up toward the case's keyring) and lipo is charged. New RileyLink New RileyLinks won't have a name listed next to their slider at first. The name will only be displayed after connecting a RileyLink to a Loop for the first time. So, if all you see in the device list is a little toggle off to the left and no \"RileyLink\" name...go ahead and switch that toggle. The RileyLink name will appear after that toggle is green. Delivery Limits and Basals \u2301 The next screen will offer two areas where you will need to enter information: Delivery Limits: Delivery Limits are both your maximum basal rate and your maximum bolus amount. Your maximum basal rate will limit how aggressive your Loop will be able to set temporary basals to treat high blood glucose. Typically, new users should set this value conservatively around 3 times your highest scheduled basal rate until your comfort and experience with Loop develops. Basal Rates: Enter your scheduled basal rates, beginning at midnight. Consistent with Omnipod use, the scheduled basal rates have a maximum of 24 entries, no 0 u/hr entries allows, and rate increments of 0.05 u/hr. When you finish entering these values, press the blue Continue button on the bottom of the Pod Settings screen to continue with the next steps of Pod setup. Pair Pod \u2301 Place the Pod near RileyLink Fill the Pod with insulin until it beeps (minimum fill is 80 units) Click the Pair button Wait while the progress bar for priming completes Press the Continue button when the blue checkmark confirms priming is complete Insert Cannula \u2301 Prepare your insertion site Remove the Pod's needle cap and adhesive backing If the cannula is safely tucked away, apply the Pod to your desired infusion site. If cannula is sticking out, press cancel in the upper right corner of the screen and try a new Pod. Press the Insert Cannula button. Listen to the clicks filling the cannula, wait for insertion and the progress bar to complete. The number of clicks to insertion is not consistent. The cannula will deploy before the progress bar is completed. Confirm cannula has deployed by looking through the peep-hole on the Pod. Press the Continue button Expiration Reminder \u2301 Finish the setup using the default expiration reminder time (2 hours before a full 3-days usage). You can modify that expiration reminder at any time, see Expiration Reminder . The notification will come from Loop; your Pod will not beep at this time. Setup is complete and your Pod is ready for use when you press the final button. Pod Settings \u2301 After the Pod setup is completed, you will be on the Pod Settings screen. The information on this screen is described in Omnipod Pump Commands . Next Step: Add CGM \u2301 Congrats! You've added your Pod to your Loop app. Now, click on the Done button in the upper right corner of your Pump Settings screen to take you back to the Loop's settings. Your next step is to Add CGM to your Loop app. After all, without CGM data, your Loop won't loop.","title":"Add Omnipod"},{"location":"operation/loop-settings/omnipod-pump/#omnipod-users","text":"Your Loop won\u2019t have much showing initially until we get some basic settings input. The beginning step will be to add a pump to your Loop. If you are using an Omnipod pump, you can follow along for the rest of this page. If, however, you are using a Medtronic pump, please head over to this page instead.","title":"Omnipod Users"},{"location":"operation/loop-settings/omnipod-pump/#select-pump-type","text":"Let\u2019s start by clicking on the Loop Settings button in the toolbar at the bottom of your Loop app. It looks like a little sprocket. On the settings screen that opens, click on Add Pump and select the Omnipod option that appears.","title":"Select Pump Type"},{"location":"operation/loop-settings/omnipod-pump/#select-rileylink","text":"A list of all RileyLinks in the nearby area will display in the RileyLink Setup screen. Select your RileyLink by sliding the toggle to display green and then press the blue Continue button at the bottom of the screen. If your RileyLink does not appear, make sure that its switch is turned on (switch slide up toward the case's keyring) and lipo is charged. New RileyLink New RileyLinks won't have a name listed next to their slider at first. The name will only be displayed after connecting a RileyLink to a Loop for the first time. So, if all you see in the device list is a little toggle off to the left and no \"RileyLink\" name...go ahead and switch that toggle. The RileyLink name will appear after that toggle is green.","title":"Select RileyLink"},{"location":"operation/loop-settings/omnipod-pump/#delivery-limits-and-basals","text":"The next screen will offer two areas where you will need to enter information: Delivery Limits: Delivery Limits are both your maximum basal rate and your maximum bolus amount. Your maximum basal rate will limit how aggressive your Loop will be able to set temporary basals to treat high blood glucose. Typically, new users should set this value conservatively around 3 times your highest scheduled basal rate until your comfort and experience with Loop develops. Basal Rates: Enter your scheduled basal rates, beginning at midnight. Consistent with Omnipod use, the scheduled basal rates have a maximum of 24 entries, no 0 u/hr entries allows, and rate increments of 0.05 u/hr. When you finish entering these values, press the blue Continue button on the bottom of the Pod Settings screen to continue with the next steps of Pod setup.","title":"Delivery Limits and Basals"},{"location":"operation/loop-settings/omnipod-pump/#pair-pod","text":"Place the Pod near RileyLink Fill the Pod with insulin until it beeps (minimum fill is 80 units) Click the Pair button Wait while the progress bar for priming completes Press the Continue button when the blue checkmark confirms priming is complete","title":"Pair Pod"},{"location":"operation/loop-settings/omnipod-pump/#insert-cannula","text":"Prepare your insertion site Remove the Pod's needle cap and adhesive backing If the cannula is safely tucked away, apply the Pod to your desired infusion site. If cannula is sticking out, press cancel in the upper right corner of the screen and try a new Pod. Press the Insert Cannula button. Listen to the clicks filling the cannula, wait for insertion and the progress bar to complete. The number of clicks to insertion is not consistent. The cannula will deploy before the progress bar is completed. Confirm cannula has deployed by looking through the peep-hole on the Pod. Press the Continue button","title":"Insert Cannula"},{"location":"operation/loop-settings/omnipod-pump/#expiration-reminder","text":"Finish the setup using the default expiration reminder time (2 hours before a full 3-days usage). You can modify that expiration reminder at any time, see Expiration Reminder . The notification will come from Loop; your Pod will not beep at this time. Setup is complete and your Pod is ready for use when you press the final button.","title":"Expiration Reminder"},{"location":"operation/loop-settings/omnipod-pump/#pod-settings","text":"After the Pod setup is completed, you will be on the Pod Settings screen. The information on this screen is described in Omnipod Pump Commands .","title":"Pod Settings"},{"location":"operation/loop-settings/omnipod-pump/#next-step-add-cgm","text":"Congrats! You've added your Pod to your Loop app. Now, click on the Done button in the upper right corner of your Pump Settings screen to take you back to the Loop's settings. Your next step is to Add CGM to your Loop app. After all, without CGM data, your Loop won't loop.","title":"Next Step: Add CGM"},{"location":"operation/loop-settings/pump-commands/","text":"Pump Commands \u2301 Initially, Loop was written to interact with Medtronic pumps. Then as Omnipod was added to Loop, the underlying code structure was reorganized to have \"pump modules\" and \"CGM modules\". This will make it easier, in future, to drop in new \"modules\" to Loop. This history is provided as a partial explanation as to why the Medtronic Pump Command menus are found in the RileyLink menu, whereas the Omnipod pump command menus are in the Pod Settings menu. Change Time Zone \u2301 For both Medtronic and Omnipod, use the Loop Change Time Zone command to update time. Medtronics : Tap on the reservoir icon in the Heads Up Display or the image of the pump in the Loop settings menu Omnipod : Tap on the Pod Age icon in the Heads Up Display or the image of the Omnipod in the Loop settings menu Scroll down to the Change Time Zone line, example shown in the figure below. You can leave the time zone offset unchanged or touch it to change to the current time zone. Note that the 24 hour configuration pattern for basal rates, ISF, CR and correction range are aligned with the time zone shown on this line. Once the Change Time Zone command is tapped, Loop no longer shifts the 24 hour configuration pattern for basal rates, ISF, CR and correction range to the old time zone Medtronics : The time is updated on the Medtronic pump, which aligns the scheduled basal rates configured in Loop to the current time zone Omnipod : The basal rates as configured in Loop are sent to the Omnipod for the current time zone Omnipod Commands \u2301 To bring up the Pod Settings menu, tap on the Pod Age icon on the Heads Up Display or the image of the Omnipod in the Loop settings menu to reach the Pod Settings Menu. This screen provides important information about your Pod and allows you to issue some commands to the Pod through Loop. Pod Information \u2301 The first section has information regarding how long the Pod has been active and the (72 hour) Pod expiration date/time. These are determined when the Pod is activated by injecting insulin into the reservoir and using actual time to estimate these values. The Pod has an internal timer that keeps track of minutes that the Pod has been active. This timer may have a slight drift with respect to actual time, so the 72 hour expiration beeps or the 80 hour Pod shutdown may be a few minutes before or after you expect it, based on this reported expiration date/time. Bolus Delivery \u2301 This line reports the % progress of any ongoing bolus. This line reports None unless a bolus is actively being delivered when you enter Pod Settings. This line may not update until you tap on the refresh symbol to the right of the Pod image, or exit and re-enter the Pod Settings menu. Basal Delivery \u2301 This line reports schedule for scheduled basals U/hour for a 30 minute Temporary Basal suspended if the Pod is suspended Alarms \u2301 This line displays Alerts or Alarms; tapping on it, or on the accompanying banner displayed in the HUD, acknowledges the alert If your Pod is beeping an alert, this line will display information about the alert. Tapping on the alert clears or \"snoozes\" the alert status. If your Pod is screaming, it's time to change it. Tapping on this line stimulates an immediate reading of the actual error (normally this happens at the next CGM reading). There was overwhelming preference during initial testing to minimize the \"beeping\" of Pods. You can turn on additional beeps by enabling Confirmation Beeps . These are the Loop Notifications and Pod beeps you should expect with the default (confirmation beeps disabled) setting: Expiration Reminder - Loop notification only, no Pod beeps 72 Hours Expiration - Loop notification and Pod beeps (Pod beeps continue once per hour until alert is acknowledged) 79 Hour Alert - Loop notification and Pod beeps (Pod beeps continue every 15 minutes until alert is acknowledged) Reservoir \u2301 Pods do not report the volume of insulin remaining in the reservoir until there are less than 50 units remaining. So, typically you will see \"50+ U\" in this line for quite a while with a new Pod. Insulin Delivered \u2301 This line is the basal and bolus insulin delivered by the Pod since the cannula was inserted. It is obtained by taking the reported Pod insulin delivery and subtracting the amount used to prime the Pod and fill the cannula upon insertion (about 3 U). Pod Commands \u2301 This section contains commands the typical user will use. Suspend Delivery \u2301 This command will suspend all insulin delivery; basals, temp basals, and boluses in progress. When you press suspend delivery, all insulin delivery stops indefinitely and the display changes to say Resume Delivery . (If the display does not update, tap the refresh screen icon at the top of the screen to the right of the Pod image.) A banner notice will appear on the Loop's main screen when phone is in portrait mode when insulin delivery is suspended. You will need to press Tap to Resume in the banner or the Resume Delivery button in the Pod Settings to resume your scheduled basal rate and let Loop get back to action. If a bolus delivery was interrupted by the Suspend Pod command, it will not be resumed. Keep Gear Close During Resume When you resume delivery, the 24 hour Pod basal rate schedule is sent to the Pod. Be sure the Phone, RileyLink and Pod stay close until the message exchange is complete. Expiration Reminder \u2301 With the Expiration Reminder you can set a convenient time to get a notification to replace your Pod. Loop sets the default to 70 hours, i.e., two hours before the full 3 days that Insulet guarantees. The allowed range of values is between 1 hour and 24 hours prior to the Pod expiration at 72 hours of Pod life. If you select a date/time outside this range, Loop will modify your selection to the closest allowed value. As with the PDM, Loop allows the Pod to continue operating after expiration until it reaches the maximum allowed 80 hours of life, at which time, the Pod shuts down and alarms. Loop detects this message the next time it tries to communicate with the Pod. In the event your Pod runs out of insulin before that time, then you will get a \"Pod empty\" notification. Change Time Zone \u2301 Use the Change Time Zone command to align your configuration settings with the current time zone. Note that this updates your basal schedule on your Pod. If you start a new Pod session without modifying the time zone here, the original time zone will be used for the new Pod. Please wait until you see Succeeded appear on the page to ensure the command has successfully been received by the Pod. Make sure the phone, RileyLink compatible device and Pod are kept in close proximity until this command has completed. The time zone is updated by Loop issuing the 24-hour basal rate schedule to the Pod based on the current time. Replace Pod \u2301 This command deactivates a Pod prior to replacing it. Once you tap Replace Pod , another screen appears for you to confirm that you mean it. It is strongly advised that you first tap Suspend Delivery and then Replace Pod . Loop continues to record the scheduled basal rate even with no Pod present. By first tapping Suspend Delivery and then tapping Replace Pod the Loop and Apple Health record for basal delivery is more accurate. This is especially important if a longer delay is planned prior to placing a new Pod on your body. Pod Devices \u2301 This allows access to the RileyLink menu for each connected RileyLink compatible device. Pod Details \u2301 This section provides some Pod identifying information. The Lot number and TID number are the tiny number stamped on the Pod that Insulet might ask you to report if you happen to call in this Pod for an appropriate failure. Pod Diagnostics \u2301 This section is labeled Diagnostics, but many Pod users make use of this section. Read Pod Status \u2301 This command requests the status of the Pod and reports some of the returned information. The line labeled Pulses reports the total number of pulses of insulin delivered by that Pod, converted to units (each pulse is 0.05 U of insulin). If you compare this report (for your Pod) to the Insulin Delivered line in Pod settings, for your Pod at the same time, the difference is the insulin used to prime the Pod and fill the cannula at insertion. The line label RSSI reports the Received Signal Strength Indicator (RSSI) between the RileyLink compatible device and the Pod. The RSSI is a positive number with a larger number indicating a stronger signal strength detected by the Pod. (Older versions of Loop may not report this information on this screen.) Play Test Beeps \u2301 This command requests the Pod emit a beep pattern. If you hear it, you know the commands are getting to the Pod. A message appears on your screen to indicate Loop got or did not get an acknowledgement from the Pod. Read Pulse Log \u2301 This command reads the pulse log (diagnostic), displays it on the screen and saves the result in the log file. It takes some time, so keep your gear close until command completes. This can be extracted by doing an Issue Report and emailing it to yourself. If you are having communication issues, you can provide this report to an expert who may be able to provide assistance. Post for help in either zulipchat or a Facebook group to request assistance and you'll get information about how to get that log file submitted. Test Command \u2301 This verifies communication with the Pod. Loop reports success or failure. Use Get Pod Status if you want to see the some of the information returned from the Pod. Enable Confirmation Beeps \u2301 This turns confirmation beeps on for the Pod. The Pod beeps when you enable this, but is silent when you disable it. Bolus Acknowledgement - the Pod beeps when it has received and accepted the bolus command from Loop (manual or automatic) and then beeps again when the bolus is completed. Other - most of the commands you can issue to the Pod will have an associated confirmation beep, such as updating the basal rate, requesting Pod status, canceling a bolus, suspending or resuming delivery. Medtronic Commands \u2301 The Medtronic commands are inside the RileyLink menu. Tap on the reservoir icon on the Heads Up Display or the image of the pump in the Loop settings menu. From that pump screen, scroll down to the section labeled DEVICES to view the list of connected RileyLink compatible device(s). Tap on the name of a device with a green slider by it to view the RileyLink Menu for that device. The figure below shows the COMMANDS section of the RileyLink Menu for Medtronic pumps. There are several commands that Loop can issue to a Medtronic pump. Most are simply for gathering information from the pump. The frequency used by the device to communicate with the pump is reported along with the time at which it was tuned. If you tap on that line, Loop will do a manual tune, but this should not be necessary. If Loop hasn't communicated with the pump in 2 cycles, it will automatically tune the frequency. There is a Change Time button here, but since it is also found in the pump menu, you are more likely to tap it there. Both buttons do the same thing. See (Change Time] Other commands \u2301 MySentry Pair, Fetch Recent History, Fetch Enlite Glucose, Get Pump Model, Send Button Press, Read Pump Status, and Read Basal Schedule are all ways of asking the pump for information you might be interested in. They are not part of setting up the Loop and will not affect Loop operations. Enable Diagnostic LEDs, Discover Commands, and RileyLink Statistics are commands that are sometimes used by developers to aid in app troubleshooting and debugging. They don't impact Loop operations. MySentry Pair \u2301 MySentry Pair is for x23 and x54 pumps only, and you will have completed this pairing command as part of the original Add Pump process. The MySentry pairing process adds a specific ID to your pump in the pump's Connect Devices, Other Devices menu. This pairing allows Loop to get information from x23 and x54 in an efficient manner. If that is not done, Loop will only be green every other loop. If you ever want to re-pair MySentry, you can follow the directions as shown in the RileyLink command screen. You do not have to worry about this command if you are using an x15 or x22 model pump, as they do not have MySentry. Fetch Recent History \u2301 Fetch Recent History polls the pump for recent pump events such as boluses, temp basals, primes, rewinds, etc. The amount of information transmitted for a Fetch Recent History is usually quite large and, as a result, may be more prone to an early failure before it succeeds. If the first Fetch Recent History fails, sometimes it is helpful to use the Send Button Press command to sort of \"wake up\" the pump in preparation for communications. Fetch Enlite Glucose \u2301 Fetch Enlite Glucose is only useful for Medtronic CGM users. The Fetch Enlite Glucose command will pull the recent glucose values saved in the pump history. Dexcom users do not store any glucose data in the pump. Get Pump Model \u2301 Get Pump Model returns the pump's model. Send Button Press \u2301 Send Button Press can be useful to see if the communication between the device and pump is working. If successful, the screen on the pump will light up and Loop will confirm the button press with a success message. If pump comms are failing, sending a successful button press can help \"wake up\" a pump that perhaps has not been communicating well. Read Pump Status \u2301 Read Pump Status is also nice quick pump read for reservoir volume, pump battery voltage, and pump status (bolusing or suspending). For x23 and x54 pump users, this command will provide the exact pump battery voltage instead of the 25/50/75/100% levels that are reported otherwise. Read Basal Schedule \u2301 Read Basal Schedule will pull the active basal pattern from the pump so you can review what the current settings are without using pump menu. Enable Diagnostic LEDs \u2301 Enable Diagnostic LEDs will turn on more LED flashes on the RileyLink while it is operating. You will see more blue flashing lights as the RileyLink communicates with the pump. If you tried turning on this feature and decide later that you just don't want to see so many flashing lights, simply reboot the RileyLink by turning the power switch off/on. This will reset the LEDs. Discover Commands \u2301 Ignore the Discover Commands menu item. RileyLink Statistics \u2301 RileyLink Statistics tracks how long your device has stayed successfully operating and gives the developers some useful information about the stability of the RL operations. It really doesn't provide much to the average Loop user, however.","title":"Pump Commands"},{"location":"operation/loop-settings/pump-commands/#pump-commands","text":"Initially, Loop was written to interact with Medtronic pumps. Then as Omnipod was added to Loop, the underlying code structure was reorganized to have \"pump modules\" and \"CGM modules\". This will make it easier, in future, to drop in new \"modules\" to Loop. This history is provided as a partial explanation as to why the Medtronic Pump Command menus are found in the RileyLink menu, whereas the Omnipod pump command menus are in the Pod Settings menu.","title":"Pump Commands"},{"location":"operation/loop-settings/pump-commands/#change-time-zone","text":"For both Medtronic and Omnipod, use the Loop Change Time Zone command to update time. Medtronics : Tap on the reservoir icon in the Heads Up Display or the image of the pump in the Loop settings menu Omnipod : Tap on the Pod Age icon in the Heads Up Display or the image of the Omnipod in the Loop settings menu Scroll down to the Change Time Zone line, example shown in the figure below. You can leave the time zone offset unchanged or touch it to change to the current time zone. Note that the 24 hour configuration pattern for basal rates, ISF, CR and correction range are aligned with the time zone shown on this line. Once the Change Time Zone command is tapped, Loop no longer shifts the 24 hour configuration pattern for basal rates, ISF, CR and correction range to the old time zone Medtronics : The time is updated on the Medtronic pump, which aligns the scheduled basal rates configured in Loop to the current time zone Omnipod : The basal rates as configured in Loop are sent to the Omnipod for the current time zone","title":"Change Time Zone"},{"location":"operation/loop-settings/pump-commands/#omnipod-commands","text":"To bring up the Pod Settings menu, tap on the Pod Age icon on the Heads Up Display or the image of the Omnipod in the Loop settings menu to reach the Pod Settings Menu. This screen provides important information about your Pod and allows you to issue some commands to the Pod through Loop.","title":"Omnipod Commands"},{"location":"operation/loop-settings/pump-commands/#pod-information","text":"The first section has information regarding how long the Pod has been active and the (72 hour) Pod expiration date/time. These are determined when the Pod is activated by injecting insulin into the reservoir and using actual time to estimate these values. The Pod has an internal timer that keeps track of minutes that the Pod has been active. This timer may have a slight drift with respect to actual time, so the 72 hour expiration beeps or the 80 hour Pod shutdown may be a few minutes before or after you expect it, based on this reported expiration date/time.","title":"Pod Information"},{"location":"operation/loop-settings/pump-commands/#bolus-delivery","text":"This line reports the % progress of any ongoing bolus. This line reports None unless a bolus is actively being delivered when you enter Pod Settings. This line may not update until you tap on the refresh symbol to the right of the Pod image, or exit and re-enter the Pod Settings menu.","title":"Bolus Delivery"},{"location":"operation/loop-settings/pump-commands/#basal-delivery","text":"This line reports schedule for scheduled basals U/hour for a 30 minute Temporary Basal suspended if the Pod is suspended","title":"Basal Delivery"},{"location":"operation/loop-settings/pump-commands/#alarms","text":"This line displays Alerts or Alarms; tapping on it, or on the accompanying banner displayed in the HUD, acknowledges the alert If your Pod is beeping an alert, this line will display information about the alert. Tapping on the alert clears or \"snoozes\" the alert status. If your Pod is screaming, it's time to change it. Tapping on this line stimulates an immediate reading of the actual error (normally this happens at the next CGM reading). There was overwhelming preference during initial testing to minimize the \"beeping\" of Pods. You can turn on additional beeps by enabling Confirmation Beeps . These are the Loop Notifications and Pod beeps you should expect with the default (confirmation beeps disabled) setting: Expiration Reminder - Loop notification only, no Pod beeps 72 Hours Expiration - Loop notification and Pod beeps (Pod beeps continue once per hour until alert is acknowledged) 79 Hour Alert - Loop notification and Pod beeps (Pod beeps continue every 15 minutes until alert is acknowledged)","title":"Alarms"},{"location":"operation/loop-settings/pump-commands/#reservoir","text":"Pods do not report the volume of insulin remaining in the reservoir until there are less than 50 units remaining. So, typically you will see \"50+ U\" in this line for quite a while with a new Pod.","title":"Reservoir"},{"location":"operation/loop-settings/pump-commands/#insulin-delivered","text":"This line is the basal and bolus insulin delivered by the Pod since the cannula was inserted. It is obtained by taking the reported Pod insulin delivery and subtracting the amount used to prime the Pod and fill the cannula upon insertion (about 3 U).","title":"Insulin Delivered"},{"location":"operation/loop-settings/pump-commands/#pod-commands","text":"This section contains commands the typical user will use.","title":"Pod Commands"},{"location":"operation/loop-settings/pump-commands/#suspend-delivery","text":"This command will suspend all insulin delivery; basals, temp basals, and boluses in progress. When you press suspend delivery, all insulin delivery stops indefinitely and the display changes to say Resume Delivery . (If the display does not update, tap the refresh screen icon at the top of the screen to the right of the Pod image.) A banner notice will appear on the Loop's main screen when phone is in portrait mode when insulin delivery is suspended. You will need to press Tap to Resume in the banner or the Resume Delivery button in the Pod Settings to resume your scheduled basal rate and let Loop get back to action. If a bolus delivery was interrupted by the Suspend Pod command, it will not be resumed. Keep Gear Close During Resume When you resume delivery, the 24 hour Pod basal rate schedule is sent to the Pod. Be sure the Phone, RileyLink and Pod stay close until the message exchange is complete.","title":"Suspend Delivery"},{"location":"operation/loop-settings/pump-commands/#expiration-reminder","text":"With the Expiration Reminder you can set a convenient time to get a notification to replace your Pod. Loop sets the default to 70 hours, i.e., two hours before the full 3 days that Insulet guarantees. The allowed range of values is between 1 hour and 24 hours prior to the Pod expiration at 72 hours of Pod life. If you select a date/time outside this range, Loop will modify your selection to the closest allowed value. As with the PDM, Loop allows the Pod to continue operating after expiration until it reaches the maximum allowed 80 hours of life, at which time, the Pod shuts down and alarms. Loop detects this message the next time it tries to communicate with the Pod. In the event your Pod runs out of insulin before that time, then you will get a \"Pod empty\" notification.","title":"Expiration Reminder"},{"location":"operation/loop-settings/pump-commands/#change-time-zone_1","text":"Use the Change Time Zone command to align your configuration settings with the current time zone. Note that this updates your basal schedule on your Pod. If you start a new Pod session without modifying the time zone here, the original time zone will be used for the new Pod. Please wait until you see Succeeded appear on the page to ensure the command has successfully been received by the Pod. Make sure the phone, RileyLink compatible device and Pod are kept in close proximity until this command has completed. The time zone is updated by Loop issuing the 24-hour basal rate schedule to the Pod based on the current time.","title":"Change Time Zone"},{"location":"operation/loop-settings/pump-commands/#replace-pod","text":"This command deactivates a Pod prior to replacing it. Once you tap Replace Pod , another screen appears for you to confirm that you mean it. It is strongly advised that you first tap Suspend Delivery and then Replace Pod . Loop continues to record the scheduled basal rate even with no Pod present. By first tapping Suspend Delivery and then tapping Replace Pod the Loop and Apple Health record for basal delivery is more accurate. This is especially important if a longer delay is planned prior to placing a new Pod on your body.","title":"Replace Pod"},{"location":"operation/loop-settings/pump-commands/#pod-devices","text":"This allows access to the RileyLink menu for each connected RileyLink compatible device.","title":"Pod Devices"},{"location":"operation/loop-settings/pump-commands/#pod-details","text":"This section provides some Pod identifying information. The Lot number and TID number are the tiny number stamped on the Pod that Insulet might ask you to report if you happen to call in this Pod for an appropriate failure.","title":"Pod Details"},{"location":"operation/loop-settings/pump-commands/#pod-diagnostics","text":"This section is labeled Diagnostics, but many Pod users make use of this section.","title":"Pod Diagnostics"},{"location":"operation/loop-settings/pump-commands/#read-pod-status","text":"This command requests the status of the Pod and reports some of the returned information. The line labeled Pulses reports the total number of pulses of insulin delivered by that Pod, converted to units (each pulse is 0.05 U of insulin). If you compare this report (for your Pod) to the Insulin Delivered line in Pod settings, for your Pod at the same time, the difference is the insulin used to prime the Pod and fill the cannula at insertion. The line label RSSI reports the Received Signal Strength Indicator (RSSI) between the RileyLink compatible device and the Pod. The RSSI is a positive number with a larger number indicating a stronger signal strength detected by the Pod. (Older versions of Loop may not report this information on this screen.)","title":"Read Pod Status"},{"location":"operation/loop-settings/pump-commands/#play-test-beeps","text":"This command requests the Pod emit a beep pattern. If you hear it, you know the commands are getting to the Pod. A message appears on your screen to indicate Loop got or did not get an acknowledgement from the Pod.","title":"Play Test Beeps"},{"location":"operation/loop-settings/pump-commands/#read-pulse-log","text":"This command reads the pulse log (diagnostic), displays it on the screen and saves the result in the log file. It takes some time, so keep your gear close until command completes. This can be extracted by doing an Issue Report and emailing it to yourself. If you are having communication issues, you can provide this report to an expert who may be able to provide assistance. Post for help in either zulipchat or a Facebook group to request assistance and you'll get information about how to get that log file submitted.","title":"Read Pulse Log"},{"location":"operation/loop-settings/pump-commands/#test-command","text":"This verifies communication with the Pod. Loop reports success or failure. Use Get Pod Status if you want to see the some of the information returned from the Pod.","title":"Test Command"},{"location":"operation/loop-settings/pump-commands/#enable-confirmation-beeps","text":"This turns confirmation beeps on for the Pod. The Pod beeps when you enable this, but is silent when you disable it. Bolus Acknowledgement - the Pod beeps when it has received and accepted the bolus command from Loop (manual or automatic) and then beeps again when the bolus is completed. Other - most of the commands you can issue to the Pod will have an associated confirmation beep, such as updating the basal rate, requesting Pod status, canceling a bolus, suspending or resuming delivery.","title":"Enable Confirmation Beeps"},{"location":"operation/loop-settings/pump-commands/#medtronic-commands","text":"The Medtronic commands are inside the RileyLink menu. Tap on the reservoir icon on the Heads Up Display or the image of the pump in the Loop settings menu. From that pump screen, scroll down to the section labeled DEVICES to view the list of connected RileyLink compatible device(s). Tap on the name of a device with a green slider by it to view the RileyLink Menu for that device. The figure below shows the COMMANDS section of the RileyLink Menu for Medtronic pumps. There are several commands that Loop can issue to a Medtronic pump. Most are simply for gathering information from the pump. The frequency used by the device to communicate with the pump is reported along with the time at which it was tuned. If you tap on that line, Loop will do a manual tune, but this should not be necessary. If Loop hasn't communicated with the pump in 2 cycles, it will automatically tune the frequency. There is a Change Time button here, but since it is also found in the pump menu, you are more likely to tap it there. Both buttons do the same thing. See (Change Time]","title":"Medtronic Commands"},{"location":"operation/loop-settings/pump-commands/#other-commands","text":"MySentry Pair, Fetch Recent History, Fetch Enlite Glucose, Get Pump Model, Send Button Press, Read Pump Status, and Read Basal Schedule are all ways of asking the pump for information you might be interested in. They are not part of setting up the Loop and will not affect Loop operations. Enable Diagnostic LEDs, Discover Commands, and RileyLink Statistics are commands that are sometimes used by developers to aid in app troubleshooting and debugging. They don't impact Loop operations.","title":"Other commands"},{"location":"operation/loop-settings/pump-commands/#mysentry-pair","text":"MySentry Pair is for x23 and x54 pumps only, and you will have completed this pairing command as part of the original Add Pump process. The MySentry pairing process adds a specific ID to your pump in the pump's Connect Devices, Other Devices menu. This pairing allows Loop to get information from x23 and x54 in an efficient manner. If that is not done, Loop will only be green every other loop. If you ever want to re-pair MySentry, you can follow the directions as shown in the RileyLink command screen. You do not have to worry about this command if you are using an x15 or x22 model pump, as they do not have MySentry.","title":"MySentry Pair"},{"location":"operation/loop-settings/pump-commands/#fetch-recent-history","text":"Fetch Recent History polls the pump for recent pump events such as boluses, temp basals, primes, rewinds, etc. The amount of information transmitted for a Fetch Recent History is usually quite large and, as a result, may be more prone to an early failure before it succeeds. If the first Fetch Recent History fails, sometimes it is helpful to use the Send Button Press command to sort of \"wake up\" the pump in preparation for communications.","title":"Fetch Recent History"},{"location":"operation/loop-settings/pump-commands/#fetch-enlite-glucose","text":"Fetch Enlite Glucose is only useful for Medtronic CGM users. The Fetch Enlite Glucose command will pull the recent glucose values saved in the pump history. Dexcom users do not store any glucose data in the pump.","title":"Fetch Enlite Glucose"},{"location":"operation/loop-settings/pump-commands/#get-pump-model","text":"Get Pump Model returns the pump's model.","title":"Get Pump Model"},{"location":"operation/loop-settings/pump-commands/#send-button-press","text":"Send Button Press can be useful to see if the communication between the device and pump is working. If successful, the screen on the pump will light up and Loop will confirm the button press with a success message. If pump comms are failing, sending a successful button press can help \"wake up\" a pump that perhaps has not been communicating well.","title":"Send Button Press"},{"location":"operation/loop-settings/pump-commands/#read-pump-status","text":"Read Pump Status is also nice quick pump read for reservoir volume, pump battery voltage, and pump status (bolusing or suspending). For x23 and x54 pump users, this command will provide the exact pump battery voltage instead of the 25/50/75/100% levels that are reported otherwise.","title":"Read Pump Status"},{"location":"operation/loop-settings/pump-commands/#read-basal-schedule","text":"Read Basal Schedule will pull the active basal pattern from the pump so you can review what the current settings are without using pump menu.","title":"Read Basal Schedule"},{"location":"operation/loop-settings/pump-commands/#enable-diagnostic-leds","text":"Enable Diagnostic LEDs will turn on more LED flashes on the RileyLink while it is operating. You will see more blue flashing lights as the RileyLink communicates with the pump. If you tried turning on this feature and decide later that you just don't want to see so many flashing lights, simply reboot the RileyLink by turning the power switch off/on. This will reset the LEDs.","title":"Enable Diagnostic LEDs"},{"location":"operation/loop-settings/pump-commands/#discover-commands","text":"Ignore the Discover Commands menu item.","title":"Discover Commands"},{"location":"operation/loop-settings/pump-commands/#rileylink-statistics","text":"RileyLink Statistics tracks how long your device has stayed successfully operating and gives the developers some useful information about the stability of the RL operations. It really doesn't provide much to the average Loop user, however.","title":"RileyLink Statistics"},{"location":"operation/loop-settings/rileylink/","text":"RileyLink Menu \u2301 The RileyLink menu is accessed by clicking on the image of your connected pump in Loop settings or the Reservoir (Medtronic) or Pod Age (Omnipod) in the Heads Up Display to bring up the associated pump screen. From that screen, scroll down to the section labeled DEVICES to view the list of connected RileyLink compatible device(s). Tapping on a name with a green slider by it takes you to the RileyLink Menu for that device. Helpful Tip As soon as you connect the device initially - it is strongly encouraged that you rename it from the default name for that device, e.g., RileyLink or OrangeLink or EmaLink. Tap on the device as directed above, then tap on the Name line and enter your desired name. The new name may need to sit for a few seconds before exiting back out of the naming screen for it to be transferred and saved in the device. The device must be connected and on to change its name. The name at the top center is whatever you named your RileyLink compatible device. Depending on which pump you have connected to your Loop app, your screen will look different. On the left below is the typical screen when using a Medtronic pump, and on the right is with an Omnipod. As you can see, both have in common a section called DEVICE , but after that only the Medtronic pumps will have a PUMP and COMMANDS section. The corresponding section for Omnipod are in the Pod Settings menu. Device \u2301 The lines under the Device section provide information on the device. The two most important lines are the Connection Status and Signal Strength. The Connections Status should say connected if the device is connected to the iPhone's Bluetooth. If the status says connecting or disconnected then you should toggle the iPhone's BT and/or power cycle the device to help reconnect. The Signal Strength is the strength of the Bluetooth signal between the iPhone and the device. It is not the signal strength of the radio communications with the pump/pod. This is reported as a negative number so a -50 dB signal is stronger than -80 dB. As you move the device and iPhone closer/farther apart, you will be able to see the signal strength change. In a pinch, this can be used to help locate a lost device in the house or at the park after dark. Medtronic Pump Information \u2301 The Pump ID and Pump Model will be automatically filled in from your pump. Medtronic Pump Commands \u2301 Click on the link for the description of the Medtronic Pump Commands .","title":"RileyLink Menu"},{"location":"operation/loop-settings/rileylink/#rileylink-menu","text":"The RileyLink menu is accessed by clicking on the image of your connected pump in Loop settings or the Reservoir (Medtronic) or Pod Age (Omnipod) in the Heads Up Display to bring up the associated pump screen. From that screen, scroll down to the section labeled DEVICES to view the list of connected RileyLink compatible device(s). Tapping on a name with a green slider by it takes you to the RileyLink Menu for that device. Helpful Tip As soon as you connect the device initially - it is strongly encouraged that you rename it from the default name for that device, e.g., RileyLink or OrangeLink or EmaLink. Tap on the device as directed above, then tap on the Name line and enter your desired name. The new name may need to sit for a few seconds before exiting back out of the naming screen for it to be transferred and saved in the device. The device must be connected and on to change its name. The name at the top center is whatever you named your RileyLink compatible device. Depending on which pump you have connected to your Loop app, your screen will look different. On the left below is the typical screen when using a Medtronic pump, and on the right is with an Omnipod. As you can see, both have in common a section called DEVICE , but after that only the Medtronic pumps will have a PUMP and COMMANDS section. The corresponding section for Omnipod are in the Pod Settings menu.","title":"RileyLink Menu"},{"location":"operation/loop-settings/rileylink/#device","text":"The lines under the Device section provide information on the device. The two most important lines are the Connection Status and Signal Strength. The Connections Status should say connected if the device is connected to the iPhone's Bluetooth. If the status says connecting or disconnected then you should toggle the iPhone's BT and/or power cycle the device to help reconnect. The Signal Strength is the strength of the Bluetooth signal between the iPhone and the device. It is not the signal strength of the radio communications with the pump/pod. This is reported as a negative number so a -50 dB signal is stronger than -80 dB. As you move the device and iPhone closer/farther apart, you will be able to see the signal strength change. In a pinch, this can be used to help locate a lost device in the house or at the park after dark.","title":"Device"},{"location":"operation/loop-settings/rileylink/#medtronic-pump-information","text":"The Pump ID and Pump Model will be automatically filled in from your pump.","title":"Medtronic Pump Information"},{"location":"operation/loop-settings/rileylink/#medtronic-pump-commands","text":"Click on the link for the description of the Medtronic Pump Commands .","title":"Medtronic Pump Commands"},{"location":"operation/loop-settings/services/","text":"Loop Services \u2301 At the bottom of your Loop settings screen is a section called \"Services\". The services listed in this section are all OPTIONAL . You can choose to leave them empty and your Loop will still work. Nightscout \u2301 If you have an existing Nightscout site, add the Site URL and API Secret to have your Loop data transmitted to your Nightscout site. If you can\u2019t remember your API Secret, it can be found under Settings, Reveal Config Vars for Heroku sites (or Application Settings, Connection Strings for Azure sites). The two most common errors in filling out this section are: Failure to use https:// in the site URL. If you use http:// (see how that doesn't have the \"s\" at the end?), you will get an error message about an App Transport Security policy. Take a look at the sample URL in the field before you start filling in that line, if you want an example to follow. Having a trailing slash on the end of the URL. If you copy and paste from a web browser, make sure to delete the trailing slash on the URL entry. Loggly \u2301 Loggly is a free logging service. If you sign up for an account, you'll need to go under Source Setup and then Customer Tokens. Copy and paste your customer token into your Loop App settings for Loggly. Amplitude \u2301 Amplitude is a remote event monitoring service and can be used to quickly identify errors and events with Loop. Amplitude stores the events and allows you to view those events as points in time. To retrieve the details of the events you will need to look at corresponding mLab data entries to get a complete picture of the issues. If you sign up for a free account with Amplitude, you will be given an API Key that you can enter here to have Loop integration setup. Next Step: Loop Displays \u2301 Great job, almost finished! Now that you have completed your services, let's move onto understanding your Loop displays . Understanding the Loop displays can be a valuable tool for understanding your Loop's actions, and also for troubleshooting, if you are having issues.","title":"Step 5: Loop Services"},{"location":"operation/loop-settings/services/#loop-services","text":"At the bottom of your Loop settings screen is a section called \"Services\". The services listed in this section are all OPTIONAL . You can choose to leave them empty and your Loop will still work.","title":"Loop Services"},{"location":"operation/loop-settings/services/#nightscout","text":"If you have an existing Nightscout site, add the Site URL and API Secret to have your Loop data transmitted to your Nightscout site. If you can\u2019t remember your API Secret, it can be found under Settings, Reveal Config Vars for Heroku sites (or Application Settings, Connection Strings for Azure sites). The two most common errors in filling out this section are: Failure to use https:// in the site URL. If you use http:// (see how that doesn't have the \"s\" at the end?), you will get an error message about an App Transport Security policy. Take a look at the sample URL in the field before you start filling in that line, if you want an example to follow. Having a trailing slash on the end of the URL. If you copy and paste from a web browser, make sure to delete the trailing slash on the URL entry.","title":"Nightscout"},{"location":"operation/loop-settings/services/#loggly","text":"Loggly is a free logging service. If you sign up for an account, you'll need to go under Source Setup and then Customer Tokens. Copy and paste your customer token into your Loop App settings for Loggly.","title":"Loggly"},{"location":"operation/loop-settings/services/#amplitude","text":"Amplitude is a remote event monitoring service and can be used to quickly identify errors and events with Loop. Amplitude stores the events and allows you to view those events as points in time. To retrieve the details of the events you will need to look at corresponding mLab data entries to get a complete picture of the issues. If you sign up for a free account with Amplitude, you will be given an API Key that you can enter here to have Loop integration setup.","title":"Amplitude"},{"location":"operation/loop-settings/services/#next-step-loop-displays","text":"Great job, almost finished! Now that you have completed your services, let's move onto understanding your Loop displays . Understanding the Loop displays can be a valuable tool for understanding your Loop's actions, and also for troubleshooting, if you are having issues.","title":"Next Step: Loop Displays"},{"location":"troubleshooting/loop-crashing/","text":"Loop Crashes Upon Opening \u2301 If your Loop app crashes immediately upon opening, you have a problem that needs to be fixed. What do I mean by \"crashes\"? That your Loop app immediately turns to a white screen and shuts itself down, landing you back at your iPhone's main screen. No amount of tapping will let you keep your Loop app open. There are only two potential causes of this: App expired, or A correction range was saved backward. Expired app \u2301 Your Loop app has an expiration date. The expiration date will depend on the type of developer account that signed the app. If you build with a free account, your app will expire after 7 days. If you build with a paid account, your app will expire after 12 months. Many people accidentally build with their old free account even after buying a paid account. How can you tell which you're signing with? The free signing team has the (Personal Team) listed after your name in the signing team. If your app expires, you simply need to plug your phone back into the computer and press the play button on your project again. This will rebuild. If you want to change to a paid signing team before rebuilding, please make sure to double-check which signing team is selected before building again. Incorrectly entered correction range \u2301 Important To Know Correction ranges in Loop are to be entered in minimum-maximum...in other words, LOW-HIGH. If you enter the range backward, your app will crash as soon as Loop tries to use that backward target range...that could be immediately or at a time in the future, depending on when the backwards entry is in your schedule. An example of a properly entered correction range: 100-120 mg/dL An example of an improperly entered correction range: 120-100 mg/dL Please be careful when entering in the correction range. Follow the greyed out text suggestions in the Loop user interface that say min-max . This issue has been fixed in the latest release of Loop. If your app crashes because of an improperly set correction range, verify you are running Loop v2.0. If you continue to experience similar crashes with Loop v2.0 or later, generate an Issue Report and submit it to the Loop developers via GitHub.","title":"Loop App crashes"},{"location":"troubleshooting/loop-crashing/#loop-crashes-upon-opening","text":"If your Loop app crashes immediately upon opening, you have a problem that needs to be fixed. What do I mean by \"crashes\"? That your Loop app immediately turns to a white screen and shuts itself down, landing you back at your iPhone's main screen. No amount of tapping will let you keep your Loop app open. There are only two potential causes of this: App expired, or A correction range was saved backward.","title":"Loop Crashes Upon Opening"},{"location":"troubleshooting/loop-crashing/#expired-app","text":"Your Loop app has an expiration date. The expiration date will depend on the type of developer account that signed the app. If you build with a free account, your app will expire after 7 days. If you build with a paid account, your app will expire after 12 months. Many people accidentally build with their old free account even after buying a paid account. How can you tell which you're signing with? The free signing team has the (Personal Team) listed after your name in the signing team. If your app expires, you simply need to plug your phone back into the computer and press the play button on your project again. This will rebuild. If you want to change to a paid signing team before rebuilding, please make sure to double-check which signing team is selected before building again.","title":"Expired app"},{"location":"troubleshooting/loop-crashing/#incorrectly-entered-correction-range","text":"Important To Know Correction ranges in Loop are to be entered in minimum-maximum...in other words, LOW-HIGH. If you enter the range backward, your app will crash as soon as Loop tries to use that backward target range...that could be immediately or at a time in the future, depending on when the backwards entry is in your schedule. An example of a properly entered correction range: 100-120 mg/dL An example of an improperly entered correction range: 120-100 mg/dL Please be careful when entering in the correction range. Follow the greyed out text suggestions in the Loop user interface that say min-max . This issue has been fixed in the latest release of Loop. If your app crashes because of an improperly set correction range, verify you are running Loop v2.0. If you continue to experience similar crashes with Loop v2.0 or later, generate an Issue Report and submit it to the Loop developers via GitHub.","title":"Incorrectly entered correction range"},{"location":"troubleshooting/omnipod-faults/","text":"Omnipod Faults \u2301 Pod faults are shown in the HUD: Loop will put a higher battery load on a pod than the PDM due to its regular and repeated communications. A pod with lower battery level appears to be more likely to fault for conditions like static electricity and occlusions/pump issues that Loop is not directly causing, like internal fault codes 052, 061, 064 and 066. Pods always perform safety checks and if a potential problem is found, the pod will end itself by screaming and stop with the insulin delivery. Note During extensive tests after getting all commands working properly, many failures due to one specific safety check were still encountered. This check needed to recover its counter within 30 minutes after a temp basal returning to a normal basal schedule, or else the pod would scream. Eventually, this was resolved by disabling only this particular check. Therefore the 096-106 faults are always ignored in the current configuration of Loop. Known internal pod fault codes \u2301 The currently known pod faults are listed here on the openomni wiki page: Pod Fault codes Ways to reduce the possibility of a fault \u2301 None of the ways listed here are certain to reduce the possibility of a screaming pod, but they could be worth considering if the hypothesis of a low battery is indeed the cause of some late-in-life pods. Keep the Loop app up to date; newer versions might include improvements to reduce pod battery load Do not use the \"neutral temp basal\" code customization Use a 433 Mhz RileyLink Not \"replacement pod\" situations \u2301 Normal pod use can still give these two internal pod faults, which are not eligible for a replacement pod: 028, Pod expired 024, Empty reservoir Replacement pod situations \u2301 You can always call Insulet tech support if a pod has a clear failure on the pod, such as: A cannula was sticking out when the end cap was removed. Visual inspection of the pod's cannula window indicating the cannula insertion was not successful. Leaking or kinked cannula was causing insulin delivery issues. The adhesive was not working properly when trying to place it on your body. If the pod fails during use with Loop, a replacement might still be possible. However, the software which communicates with the pod isn't developed or supported by Insulet. Generally speaking, calling in failed pods for reasons not listed, above mid-pod life, maybe a bit of a reach for the DIY community. There is a grey area here that we should be careful of and acknowledge that Looping may be a cause in certain faults.","title":"Omnipod Faults"},{"location":"troubleshooting/omnipod-faults/#omnipod-faults","text":"Pod faults are shown in the HUD: Loop will put a higher battery load on a pod than the PDM due to its regular and repeated communications. A pod with lower battery level appears to be more likely to fault for conditions like static electricity and occlusions/pump issues that Loop is not directly causing, like internal fault codes 052, 061, 064 and 066. Pods always perform safety checks and if a potential problem is found, the pod will end itself by screaming and stop with the insulin delivery. Note During extensive tests after getting all commands working properly, many failures due to one specific safety check were still encountered. This check needed to recover its counter within 30 minutes after a temp basal returning to a normal basal schedule, or else the pod would scream. Eventually, this was resolved by disabling only this particular check. Therefore the 096-106 faults are always ignored in the current configuration of Loop.","title":"Omnipod Faults"},{"location":"troubleshooting/omnipod-faults/#known-internal-pod-fault-codes","text":"The currently known pod faults are listed here on the openomni wiki page: Pod Fault codes","title":"Known internal pod fault codes"},{"location":"troubleshooting/omnipod-faults/#ways-to-reduce-the-possibility-of-a-fault","text":"None of the ways listed here are certain to reduce the possibility of a screaming pod, but they could be worth considering if the hypothesis of a low battery is indeed the cause of some late-in-life pods. Keep the Loop app up to date; newer versions might include improvements to reduce pod battery load Do not use the \"neutral temp basal\" code customization Use a 433 Mhz RileyLink","title":"Ways to reduce the possibility of a fault"},{"location":"troubleshooting/omnipod-faults/#not-replacement-pod-situations","text":"Normal pod use can still give these two internal pod faults, which are not eligible for a replacement pod: 028, Pod expired 024, Empty reservoir","title":"Not \"replacement pod\" situations"},{"location":"troubleshooting/omnipod-faults/#replacement-pod-situations","text":"You can always call Insulet tech support if a pod has a clear failure on the pod, such as: A cannula was sticking out when the end cap was removed. Visual inspection of the pod's cannula window indicating the cannula insertion was not successful. Leaking or kinked cannula was causing insulin delivery issues. The adhesive was not working properly when trying to place it on your body. If the pod fails during use with Loop, a replacement might still be possible. However, the software which communicates with the pod isn't developed or supported by Insulet. Generally speaking, calling in failed pods for reasons not listed, above mid-pod life, maybe a bit of a reach for the DIY community. There is a grey area here that we should be careful of and acknowledge that Looping may be a cause in certain faults.","title":"Replacement pod situations"},{"location":"troubleshooting/overview/","text":"Troubleshooting \u2301 After you have been using Loop for a while, there's a potential that you will run across a behavior or issue that you wonder if it is normal or intended. When that happens, there are a few things that we'd recommend doing to resolve the issue. Issues with \u2301 Gather information \u2301 Check the Docs \u2301 The Loop docs are updated regularly. If you built your Loop app awhile ago, chances are good that more information has been updated and changed since you first read them. Please can the topics and look for a section that may be applicable. For example, if your Nightscout isn't working, try looking at the docs there. A good read of ALL the pages at the beginning of using Loop is encouraged. Many FAQs from new Loop users are covered in the docs. Screenshots \u2301 Take a screenshot of your Loop main display screen , or other screens (such as Tuning results of RileyLink) that may help troubleshooters better understand your issue. A lot of times a picture is worth a thousand words. Being able to see recent Loop basal adjustments, predicted BG curve, and carb entries really help fill in the full story of the current Loop status. If you didn't manage to get a screenshot when the issue was happening, you can also go to Nightscout and scroll back over the previous 48 hours to obtain much of the same information. Try to capture a Nightscout screen from the time period in question. Issue Report \u2301 Under the Loop app settings, there is a selection called Issue Report . Within the Issue Report are important information about your Loop's actions and status that can be very useful for troubleshooters...particularly with unexplained behaviors. The upper right corner of the Issue Report includes a button so that you can email the Issue Report to yourself (or others). If you are seeing something unusual in your Loop, capture an Issue Report while it is happening and save it. A troubleshooter may want to see that information. Check Resources \u2301 GitHub Issues \u2301 Check the current list of GitHub Loop Issues for known issues. Many times other users have noticed the same issue previously and opened an Issue so that more information can be added to help develop a solution. If you see your same issue has already been reported, please add to the open issue instead of creating a new one. Zulipchat and Facebook \u2301 Search in Zulipchat or Facebook . Quite possibly someone else has already posted about the same issue and perhaps a resolution has already been provided. Ask for Help \u2301 If you can't find any information in the Loop docs, GitHub Issues, Zulipchat, or Facebook...PLEASE post and ask for help. GitHub Issues list is an EXCELLENT place to post issues of unexpected Loop behavior (that you believe are errant or need improvement). However, if you are just seeking clarifications on Loop, but don't necessarily expect that there's a problem with the underlying code, then Facebook and Gitter would be a good place. For example, Zulipchat and Facebook are great for asking about bolus strategies or exercise target use...those aren't really code issues. When you post, provide a description along with any screenshots of the issue you are having. You don't necessarily have to tag any particular person, the community is fairly active in replying to messages.","title":"Overview"},{"location":"troubleshooting/overview/#troubleshooting","text":"After you have been using Loop for a while, there's a potential that you will run across a behavior or issue that you wonder if it is normal or intended. When that happens, there are a few things that we'd recommend doing to resolve the issue.","title":"Troubleshooting"},{"location":"troubleshooting/overview/#issues-with","text":"","title":"Issues with"},{"location":"troubleshooting/overview/#gather-information","text":"","title":"Gather information"},{"location":"troubleshooting/overview/#check-the-docs","text":"The Loop docs are updated regularly. If you built your Loop app awhile ago, chances are good that more information has been updated and changed since you first read them. Please can the topics and look for a section that may be applicable. For example, if your Nightscout isn't working, try looking at the docs there. A good read of ALL the pages at the beginning of using Loop is encouraged. Many FAQs from new Loop users are covered in the docs.","title":"Check the Docs"},{"location":"troubleshooting/overview/#screenshots","text":"Take a screenshot of your Loop main display screen , or other screens (such as Tuning results of RileyLink) that may help troubleshooters better understand your issue. A lot of times a picture is worth a thousand words. Being able to see recent Loop basal adjustments, predicted BG curve, and carb entries really help fill in the full story of the current Loop status. If you didn't manage to get a screenshot when the issue was happening, you can also go to Nightscout and scroll back over the previous 48 hours to obtain much of the same information. Try to capture a Nightscout screen from the time period in question.","title":"Screenshots"},{"location":"troubleshooting/overview/#issue-report","text":"Under the Loop app settings, there is a selection called Issue Report . Within the Issue Report are important information about your Loop's actions and status that can be very useful for troubleshooters...particularly with unexplained behaviors. The upper right corner of the Issue Report includes a button so that you can email the Issue Report to yourself (or others). If you are seeing something unusual in your Loop, capture an Issue Report while it is happening and save it. A troubleshooter may want to see that information.","title":"Issue Report"},{"location":"troubleshooting/overview/#check-resources","text":"","title":"Check Resources"},{"location":"troubleshooting/overview/#github-issues","text":"Check the current list of GitHub Loop Issues for known issues. Many times other users have noticed the same issue previously and opened an Issue so that more information can be added to help develop a solution. If you see your same issue has already been reported, please add to the open issue instead of creating a new one.","title":"GitHub Issues"},{"location":"troubleshooting/overview/#zulipchat-and-facebook","text":"Search in Zulipchat or Facebook . Quite possibly someone else has already posted about the same issue and perhaps a resolution has already been provided.","title":"Zulipchat and Facebook"},{"location":"troubleshooting/overview/#ask-for-help","text":"If you can't find any information in the Loop docs, GitHub Issues, Zulipchat, or Facebook...PLEASE post and ask for help. GitHub Issues list is an EXCELLENT place to post issues of unexpected Loop behavior (that you believe are errant or need improvement). However, if you are just seeking clarifications on Loop, but don't necessarily expect that there's a problem with the underlying code, then Facebook and Gitter would be a good place. For example, Zulipchat and Facebook are great for asking about bolus strategies or exercise target use...those aren't really code issues. When you post, provide a description along with any screenshots of the issue you are having. You don't necessarily have to tag any particular person, the community is fairly active in replying to messages.","title":"Ask for Help"},{"location":"troubleshooting/pod-pairing/","text":"Pod Pairing Failures \u2301 Have you seen an error message during the pairing process for a new pod? The most common messages are \"No response from pod\" or \"Pod sent ack instead of response\", as shown below. There have been a large number of fixes and improvements to reduce various pairing problems and to automatically recover from them when they do occur. Make sure you stay on top of Loop updates to take advantage of these code improvements. It is strongly recommended to update to a modern stable version (i.e., the current Loop master release) when running any version of Loop prior to V2.2.4 with an Omnipod. In particular, you should never run Loop V2.2.3 with an Omnipod due to a severe UI bug that can result in a partially setup pod where the only possible recovery is an immediate Loop update to be able to complete the pod setup process. Why do pod pairings fail? \u2301 Assuming the RileyLink is ok, the most common cause of a pod pairing failure is that Loop incorrectly partially pairs with the pod due to some problems during the fragile pairing process, perhaps aggravated by the placement of the RileyLink and the pod, wireless communications interference, and/or incorrect handling of some fault and retry conditions in versions of Loop prior to V2.2.4 that can leave the pod in an apparent non-responding state. This page will help you walk through some easy troubleshooting steps to recover that pod into good working order. Move Logically Let's walk through the pod pairing/replacement process from the very beginning to make sure that we have all the important steps clearly identified even before you attempt to press that Pair button. Step 0: Check your Loop version \u2301 You can check which version of Loop you are running by pressing the gear in the bottom right hand corner of the Loop home screen and then looking at the line under the header. If you are running Loop V2.2.3, you should update immediately as this is the only way to recover from a number of pairing failure situations. If you are running a version of Loop prior to V2.2.4 (or its equivalent), it is recommended to update to the current Loop master release to prevent pairing difficulties. Step 1: Verify the RileyLink \u2301 First, let's make sure everything is ok as far as the RileyLink goes: RileyLink is charged and nearby, and RileyLink has a green LED light lit (indicating a Bluetooth connection with your iPhone), and Try toggling the RileyLink off/on at its physical switch if the green light is not on. Step 2: Deactivate old Pod \u2301 Make sure you've deactivated your old pod. If you had issues deactivating your pod, you likely may have some RileyLink issues going on...so make sure to see the steps above. If you have a problem with deactivating a pod, go ahead and skip to Step 5 to get a new pod going. You should also remove that old pod (that would not deactivate) from your vicinity. Put it in a microwave or throw it over the fence into the neighbor's backyard (kidding, obviously...but outside trashcan is a good idea). Step 3: Start new pairing process \u2301 You've deactivated your old pod successfully...great! As the first part of pairing a new pod, Loop will prompt you to fill the new pod with insulin. Once a new pod is powered-up by the insertion of at least 85 units of insulin, the pod will emit reminder beeps every 5 or 10 minutes until the entire pod pairing process has completed. This pairing process must be completed within 60 minutes of beeps starting, or the pod will give up and never pair. These activation reminder beeps do not actually indicate that any pod communication is being attempted, just that the activation has not yet been completed and your 60 minute timer is counting down. Hopefully, your pod pairing continues uneventfully at this point. You'll press the Pair button and the pod pairs, primes, and the cannula insertion is successful. BUT, if not...you'll want to keep reading Steps 4-5 to find out how to recover. One beeping pod at a time, please It is very important to not have two pods giving reminder beeps at the same time as this can cause even more confusion for you and for Loop. Continue to work with a single pod at a time, retrying the Pair attempts multiple times if needed as described in Step 4. If you cannot get the pairing to complete with the single beeping pod (after trying the procedures described below a few times with multiple Pair attempts during each try), then you should completely abandon that pod before attempting to use another pod. \"Completely abandon\" means move that failed-to-pair-no-matter-what-you-tried pod far, far away from you or put it in a not-turned-on-but-door-is-closed microwave. You do not want that beeping-but-not-pairing pod to be able to plague your next pod's communications with Loop during the fresh pairing process. Step 4: Check the RileyLink and Pod's Placement \u2301 Pod pairing failed? Ok, so you've pressed that Pair button and received an error message like shown at the top of screen? It's time to start the stepwise process of seeing if we can get it to recover successfully. The placement of the pod and the RileyLink relative to each other is critical variable because the pod operates in a low power radio mode during pairing which can lead to a number of potential faulty and half-paired pod situations, particularly with earlier versions of Loop. How close should they be? Most people assume \"the closer the better\", but it has been measured that if the RileyLink and pod are too close together , the RileyLink may not be able to pick up the pairing response. The current recommendation is for the RileyLink to be placed a few inches to the side of the pod being paired. If Pair fails, move a bit and RETRY If the Pair operation is not succeeding, try repositioning the relative placement of the RileyLink and the pod multiple times. A little closer together if you had them far apart? A bit farther apart if they were really close? RileyLink on its side? Try standing it up with the antenna pointed to the ceiling. If the pairing is still unsuccessful with multiple repositioning attempts, move yourself, the RileyLink, and the pod to another area/room (preferably away from other radio frequency signals that might be interfering), and try Pair again. Again don't be shy to try repositioning the RileyLink and pod's relative position, if needed, in this new area/room too. If you have another available RileyLink, you can also try pairing using that RileyLink instead. Step 5: Pod Pairing Recovery \u2301 When you have a pod that continues to appear non-responsive or sending \"ack\" responses after several retried Pair attempts, it may be possible to recover by forcing Loop to start the pairing process from the beginning. To start we will have to press the Cancel button in the upper right corner of the pairing screen. Depending on which state the pod is stuck at in the pairing process...you'll see one of two screens after you select the Cancel button. Follow the directions (Step 5A vs Step 5B) for whichever screen corresponds to what you see after pressing Cancel . Step 5A \"Switch from Omnipod Pumps\": You press Cancel and Loop will send you back to the Pod Settings screen to do the \"Switch from Omnipod Pumps\" method Step 5B \"Deactivate\": You press Cancel and Loop will display a screen giving the option to \"Deactivate\" Step 5A \"Switch from Omnipod Pumps\" \u2301 If you press the Cancel button and see a screen like below, you're going to select Switch from Omnipod Pumps in red. While this appears to confirm that you want to stop using the Omnipod, we will be adding pods back soon. Don't worry. Don't fret. None of your Loop settings including the basal schedule and delivery limits, will be lost deleting the Omnipod pump. Select Delete Omnipod to proceed which will take you back to the Loop home screen. From here, select the gear icon at the bottom right to go the Loop Settings page. Then select Add Pump in blue and then select Omnipod from the Add Pump list displayed. Verify that the green LED on the RileyLink goes on and off as you touch the switch for RileyLink you are using indicating a successful Bluetooth connection between the RileyLink and your iPhone. Leave the RileyLink enabled with its green LED and slider turned on, and then touch the Continue button on the bottom. The Pod Settings screen should have the previous Basal Rates and Delivery Limits in effect from your previous run which can be verified at this time. Once ready, select Continue on the bottom of the screen. Finally, you will be back to the Pod Pairing screen. Instead of filling a new pod with insulin, attempt to pair again using the original pod which was previously filled but unable to complete the pairing process successfully. That pod should still be occassionally giving reminder beeps. Place the RileyLink a few inches to the side of the pod and press the Pair button at the bottom of the screen and hopefully Loop will be able to successfully pair this time after starting from a fresh slate. If this pairing attempt is still unsuccessful, remember to still exhaust repositioning and Step 4 options before giving up on that pod. If it really won't pair after all that...then mark that loser pod with a Sharpie-drawn sad face and follow the directions in Step 3's colored box so that you don't end up with multiple beeping pods around accidentally. Step 5B \"Deactivate pod\" \u2301 If you press the Cancel button and see an option for \"Deactivate pod\", we're going to do a little different than Step 5A. You might lose your pod by attempting this procedure This is a point of no return for certain pod pairing situations and it is possible that the pod will be lost by attempting this procedure depending on the pod state. Some will recover fine, others may not. Since you can't know in advance if you might lose the pod, it is important to have already exhausted other possibilities described above in Steps 1-4 to try pairing. Specifically, (1) attempting to pair several times using varied relative positions of the RileyLink and pod (2) trying the pairing again but in a different room/location that might have less wireless interference, and (3) verifying your RileyLink is connected and functioning correctly. For this next part, we want to make sure that the pod doesn't accidentally receive the deactivation command we are about to use. We want Loop to do the command...we just really don't want the pod to hear it. There's two ways we can keep the pod from hearing it, either (1) prevent the RileyLink from hearing Loop's command (and thus the command cannot reach the pod) or (2) prevent the pod from hearing the command from RileyLink. To accomplish our keep-the-pod-ignorant goal, you can try either option like so: Prevent RileyLink from hearing: Turn your RileyLink off temporarily at its physical switch. Some people worry about accidentally breaking their RileyLink switch, and if that's you...you can instead put the RileyLink far away from your iPhone or put the RileyLink in the microwave. That will keep the RileyLink from hearing the Loop's deactivate pod command. If RileyLink can't hear it, then your pod won't receive it. Prevent pod from hearing: Move the beeping pod to a place that the pod is incapable of hearing the command. There's several options depending on what works for you: Put the beeping pod far away...\"shouldn't be able to hear those beeps anymore\" kind of distance. Put the pod in a not-turned-on-but-door-is-closed microwave. Put the pod in a faraday bag, if you own one. Ok. Have the pod nice and ignorant? Good. Now press the \"Deactivate Pod\" button. It will take a few attempts, and you will see some failure messages about how the deactivation failed (of course it did...we hid the pod!) Eventually, you'll be given an \"Continue\" button that you'll want to use. Press the \"Continue\" button. The instructions start with \"fill a new pod with insulin\"...BUT DO NOT! Instead, bring that beeping pod back to the hearing range. Turn that RileyLink back on if you turned it off. Once you get the RileyLink on and the pod back in range, you'll just press the Pair button and hopefully you'll find success with the process. If this pairing attempt is still unsuccessful, remember to still exhaust repositioning and Step 4 options before giving up on that pod. If it really won't pair after all that...then mark that loser pod with a Sharpie-drawn sad face and follow the directions in Step 3's colored box so that you don't end up with multiple beeping pods around accidentally. Step 6: Help improve pod pairing process \u2301 To help fix pairing bugs, some improvements have also been made in our ability to save the communications between the pods and Loop app during the pairing process. So, please help us leverage these new improvements and better squash bugs. If you run into any pairing problems when running a version of Loop prior to V2.2.4, which required Step 5A or Step 5B to be able to pair, or you had a pod that had to be abandoned, it would be helpful to generate an \"Issue Report\" after you finally get a pod paired (whether is was the original pod or if a different pod) and then post the resulting \"Loop Report\" on Zulipchat here with a short explanation of what happened. What about other pod start-up failures? \u2301 If you have a pod that has already started the priming operation and then has problems either finishing the priming operation or the cannula insertion, then forcing a pod pairing recovery is not possible. If a pod fails during priming or cannula insertion, the pod is no good and it should be deactivated and disposed of properly. What about that insulin? \u2301 If you have the misfortune of losing a pod during pairing, you can opt to not waste the insulin in that pod. Simply use the same syringe and same fill port on the pod to suck the insulin OUT of the loser pod. If you do that, good practice is to make sure that you get that loser pod far away from the process as you go forward. Mark a big \"X\" on the failed pod and put it in a microwave, or very far away from you, so that it can't interfere with subsequent pod pairing attempts.","title":"Pod Pairing Failures"},{"location":"troubleshooting/pod-pairing/#pod-pairing-failures","text":"Have you seen an error message during the pairing process for a new pod? The most common messages are \"No response from pod\" or \"Pod sent ack instead of response\", as shown below. There have been a large number of fixes and improvements to reduce various pairing problems and to automatically recover from them when they do occur. Make sure you stay on top of Loop updates to take advantage of these code improvements. It is strongly recommended to update to a modern stable version (i.e., the current Loop master release) when running any version of Loop prior to V2.2.4 with an Omnipod. In particular, you should never run Loop V2.2.3 with an Omnipod due to a severe UI bug that can result in a partially setup pod where the only possible recovery is an immediate Loop update to be able to complete the pod setup process.","title":"Pod Pairing Failures"},{"location":"troubleshooting/pod-pairing/#why-do-pod-pairings-fail","text":"Assuming the RileyLink is ok, the most common cause of a pod pairing failure is that Loop incorrectly partially pairs with the pod due to some problems during the fragile pairing process, perhaps aggravated by the placement of the RileyLink and the pod, wireless communications interference, and/or incorrect handling of some fault and retry conditions in versions of Loop prior to V2.2.4 that can leave the pod in an apparent non-responding state. This page will help you walk through some easy troubleshooting steps to recover that pod into good working order. Move Logically Let's walk through the pod pairing/replacement process from the very beginning to make sure that we have all the important steps clearly identified even before you attempt to press that Pair button.","title":"Why do pod pairings fail?"},{"location":"troubleshooting/pod-pairing/#step-0-check-your-loop-version","text":"You can check which version of Loop you are running by pressing the gear in the bottom right hand corner of the Loop home screen and then looking at the line under the header. If you are running Loop V2.2.3, you should update immediately as this is the only way to recover from a number of pairing failure situations. If you are running a version of Loop prior to V2.2.4 (or its equivalent), it is recommended to update to the current Loop master release to prevent pairing difficulties.","title":"Step 0: Check your Loop version"},{"location":"troubleshooting/pod-pairing/#step-1-verify-the-rileylink","text":"First, let's make sure everything is ok as far as the RileyLink goes: RileyLink is charged and nearby, and RileyLink has a green LED light lit (indicating a Bluetooth connection with your iPhone), and Try toggling the RileyLink off/on at its physical switch if the green light is not on.","title":"Step 1: Verify the RileyLink"},{"location":"troubleshooting/pod-pairing/#step-2-deactivate-old-pod","text":"Make sure you've deactivated your old pod. If you had issues deactivating your pod, you likely may have some RileyLink issues going on...so make sure to see the steps above. If you have a problem with deactivating a pod, go ahead and skip to Step 5 to get a new pod going. You should also remove that old pod (that would not deactivate) from your vicinity. Put it in a microwave or throw it over the fence into the neighbor's backyard (kidding, obviously...but outside trashcan is a good idea).","title":"Step 2: Deactivate old Pod"},{"location":"troubleshooting/pod-pairing/#step-3-start-new-pairing-process","text":"You've deactivated your old pod successfully...great! As the first part of pairing a new pod, Loop will prompt you to fill the new pod with insulin. Once a new pod is powered-up by the insertion of at least 85 units of insulin, the pod will emit reminder beeps every 5 or 10 minutes until the entire pod pairing process has completed. This pairing process must be completed within 60 minutes of beeps starting, or the pod will give up and never pair. These activation reminder beeps do not actually indicate that any pod communication is being attempted, just that the activation has not yet been completed and your 60 minute timer is counting down. Hopefully, your pod pairing continues uneventfully at this point. You'll press the Pair button and the pod pairs, primes, and the cannula insertion is successful. BUT, if not...you'll want to keep reading Steps 4-5 to find out how to recover. One beeping pod at a time, please It is very important to not have two pods giving reminder beeps at the same time as this can cause even more confusion for you and for Loop. Continue to work with a single pod at a time, retrying the Pair attempts multiple times if needed as described in Step 4. If you cannot get the pairing to complete with the single beeping pod (after trying the procedures described below a few times with multiple Pair attempts during each try), then you should completely abandon that pod before attempting to use another pod. \"Completely abandon\" means move that failed-to-pair-no-matter-what-you-tried pod far, far away from you or put it in a not-turned-on-but-door-is-closed microwave. You do not want that beeping-but-not-pairing pod to be able to plague your next pod's communications with Loop during the fresh pairing process.","title":"Step 3: Start new pairing process"},{"location":"troubleshooting/pod-pairing/#step-4-check-the-rileylink-and-pods-placement","text":"Pod pairing failed? Ok, so you've pressed that Pair button and received an error message like shown at the top of screen? It's time to start the stepwise process of seeing if we can get it to recover successfully. The placement of the pod and the RileyLink relative to each other is critical variable because the pod operates in a low power radio mode during pairing which can lead to a number of potential faulty and half-paired pod situations, particularly with earlier versions of Loop. How close should they be? Most people assume \"the closer the better\", but it has been measured that if the RileyLink and pod are too close together , the RileyLink may not be able to pick up the pairing response. The current recommendation is for the RileyLink to be placed a few inches to the side of the pod being paired. If Pair fails, move a bit and RETRY If the Pair operation is not succeeding, try repositioning the relative placement of the RileyLink and the pod multiple times. A little closer together if you had them far apart? A bit farther apart if they were really close? RileyLink on its side? Try standing it up with the antenna pointed to the ceiling. If the pairing is still unsuccessful with multiple repositioning attempts, move yourself, the RileyLink, and the pod to another area/room (preferably away from other radio frequency signals that might be interfering), and try Pair again. Again don't be shy to try repositioning the RileyLink and pod's relative position, if needed, in this new area/room too. If you have another available RileyLink, you can also try pairing using that RileyLink instead.","title":"Step 4: Check the RileyLink and Pod's Placement"},{"location":"troubleshooting/pod-pairing/#step-5-pod-pairing-recovery","text":"When you have a pod that continues to appear non-responsive or sending \"ack\" responses after several retried Pair attempts, it may be possible to recover by forcing Loop to start the pairing process from the beginning. To start we will have to press the Cancel button in the upper right corner of the pairing screen. Depending on which state the pod is stuck at in the pairing process...you'll see one of two screens after you select the Cancel button. Follow the directions (Step 5A vs Step 5B) for whichever screen corresponds to what you see after pressing Cancel . Step 5A \"Switch from Omnipod Pumps\": You press Cancel and Loop will send you back to the Pod Settings screen to do the \"Switch from Omnipod Pumps\" method Step 5B \"Deactivate\": You press Cancel and Loop will display a screen giving the option to \"Deactivate\"","title":"Step 5: Pod Pairing Recovery"},{"location":"troubleshooting/pod-pairing/#step-5a-switch-from-omnipod-pumps","text":"If you press the Cancel button and see a screen like below, you're going to select Switch from Omnipod Pumps in red. While this appears to confirm that you want to stop using the Omnipod, we will be adding pods back soon. Don't worry. Don't fret. None of your Loop settings including the basal schedule and delivery limits, will be lost deleting the Omnipod pump. Select Delete Omnipod to proceed which will take you back to the Loop home screen. From here, select the gear icon at the bottom right to go the Loop Settings page. Then select Add Pump in blue and then select Omnipod from the Add Pump list displayed. Verify that the green LED on the RileyLink goes on and off as you touch the switch for RileyLink you are using indicating a successful Bluetooth connection between the RileyLink and your iPhone. Leave the RileyLink enabled with its green LED and slider turned on, and then touch the Continue button on the bottom. The Pod Settings screen should have the previous Basal Rates and Delivery Limits in effect from your previous run which can be verified at this time. Once ready, select Continue on the bottom of the screen. Finally, you will be back to the Pod Pairing screen. Instead of filling a new pod with insulin, attempt to pair again using the original pod which was previously filled but unable to complete the pairing process successfully. That pod should still be occassionally giving reminder beeps. Place the RileyLink a few inches to the side of the pod and press the Pair button at the bottom of the screen and hopefully Loop will be able to successfully pair this time after starting from a fresh slate. If this pairing attempt is still unsuccessful, remember to still exhaust repositioning and Step 4 options before giving up on that pod. If it really won't pair after all that...then mark that loser pod with a Sharpie-drawn sad face and follow the directions in Step 3's colored box so that you don't end up with multiple beeping pods around accidentally.","title":"Step 5A \"Switch from Omnipod Pumps\""},{"location":"troubleshooting/pod-pairing/#step-5b-deactivate-pod","text":"If you press the Cancel button and see an option for \"Deactivate pod\", we're going to do a little different than Step 5A. You might lose your pod by attempting this procedure This is a point of no return for certain pod pairing situations and it is possible that the pod will be lost by attempting this procedure depending on the pod state. Some will recover fine, others may not. Since you can't know in advance if you might lose the pod, it is important to have already exhausted other possibilities described above in Steps 1-4 to try pairing. Specifically, (1) attempting to pair several times using varied relative positions of the RileyLink and pod (2) trying the pairing again but in a different room/location that might have less wireless interference, and (3) verifying your RileyLink is connected and functioning correctly. For this next part, we want to make sure that the pod doesn't accidentally receive the deactivation command we are about to use. We want Loop to do the command...we just really don't want the pod to hear it. There's two ways we can keep the pod from hearing it, either (1) prevent the RileyLink from hearing Loop's command (and thus the command cannot reach the pod) or (2) prevent the pod from hearing the command from RileyLink. To accomplish our keep-the-pod-ignorant goal, you can try either option like so: Prevent RileyLink from hearing: Turn your RileyLink off temporarily at its physical switch. Some people worry about accidentally breaking their RileyLink switch, and if that's you...you can instead put the RileyLink far away from your iPhone or put the RileyLink in the microwave. That will keep the RileyLink from hearing the Loop's deactivate pod command. If RileyLink can't hear it, then your pod won't receive it. Prevent pod from hearing: Move the beeping pod to a place that the pod is incapable of hearing the command. There's several options depending on what works for you: Put the beeping pod far away...\"shouldn't be able to hear those beeps anymore\" kind of distance. Put the pod in a not-turned-on-but-door-is-closed microwave. Put the pod in a faraday bag, if you own one. Ok. Have the pod nice and ignorant? Good. Now press the \"Deactivate Pod\" button. It will take a few attempts, and you will see some failure messages about how the deactivation failed (of course it did...we hid the pod!) Eventually, you'll be given an \"Continue\" button that you'll want to use. Press the \"Continue\" button. The instructions start with \"fill a new pod with insulin\"...BUT DO NOT! Instead, bring that beeping pod back to the hearing range. Turn that RileyLink back on if you turned it off. Once you get the RileyLink on and the pod back in range, you'll just press the Pair button and hopefully you'll find success with the process. If this pairing attempt is still unsuccessful, remember to still exhaust repositioning and Step 4 options before giving up on that pod. If it really won't pair after all that...then mark that loser pod with a Sharpie-drawn sad face and follow the directions in Step 3's colored box so that you don't end up with multiple beeping pods around accidentally.","title":"Step 5B \"Deactivate pod\""},{"location":"troubleshooting/pod-pairing/#step-6-help-improve-pod-pairing-process","text":"To help fix pairing bugs, some improvements have also been made in our ability to save the communications between the pods and Loop app during the pairing process. So, please help us leverage these new improvements and better squash bugs. If you run into any pairing problems when running a version of Loop prior to V2.2.4, which required Step 5A or Step 5B to be able to pair, or you had a pod that had to be abandoned, it would be helpful to generate an \"Issue Report\" after you finally get a pod paired (whether is was the original pod or if a different pod) and then post the resulting \"Loop Report\" on Zulipchat here with a short explanation of what happened.","title":"Step 6: Help improve pod pairing process"},{"location":"troubleshooting/pod-pairing/#what-about-other-pod-start-up-failures","text":"If you have a pod that has already started the priming operation and then has problems either finishing the priming operation or the cannula insertion, then forcing a pod pairing recovery is not possible. If a pod fails during priming or cannula insertion, the pod is no good and it should be deactivated and disposed of properly.","title":"What about other pod start-up failures?"},{"location":"troubleshooting/pod-pairing/#what-about-that-insulin","text":"If you have the misfortune of losing a pod during pairing, you can opt to not waste the insulin in that pod. Simply use the same syringe and same fill port on the pod to suck the insulin OUT of the loser pod. If you do that, good practice is to make sure that you get that loser pod far away from the process as you go forward. Mark a big \"X\" on the failed pod and put it in a microwave, or very far away from you, so that it can't interfere with subsequent pod pairing attempts.","title":"What about that insulin?"},{"location":"troubleshooting/priming/","text":"Priming and Site Changes \u2301 Loop uses event history and reservoir levels to determine how much insulin has actually been delivered through the pump, and correspondingly the Insulin On Board (IOB). Site Changes \u2301 Priming Events and IOB Loop version 1.3.2 and newer will automatically detect prime events and the primed insulin will not be counted to IOB. You will need to have your Preferred Data Source set to Event History for the automatic detection of primes to work (does not apply to Omnipod, Minimed Only.) Reservoir Volumes will not detect prime events. If you are using a version of Loop older than v1.3.2 (or using Preferred Data Source of Reservoir Volume), you will need to be aware of the following regarding prime events at site changes: If you change sites and increase reservoir volume (i.e., start a new reservoir), don't worry. So long as you are putting in a reservoir that has more insulin than the old one, IOB will be accurate in Loop. When Loop sees a rewind and an increase in reservoir volume, it will not count any tubing primes as IOB. If you change sites but do NOT increase reservoir volume (i.e., you keep existing reservoir going), you will need to go into Loop's reservoir history and delete 30 minutes of continuous reservoir history including the prime event. By deleting 30 minutes of reservoir history, Loop will use Event History to determine insulin deliveries and IOB. If you cannot get the prime to clear from the IOB, operate in Open Loop mode until the insulin action duration time has passed. Deleting history is done by: (1) clicking on the Insulin Delivery Chart (2) selecting the Reservoir history screen (3) swiping to delete individual reservoir readings (4) delete at least 30 minutes of reservoir readings, including the readings that involved priming events Prime Menu \u2301 Warning When you prime tubing on a Medtronic pump, make sure to complete the priming menu commands. In other words, finish all the prompts so that you get back to the (nearly blank) normal Medtronic pump screen. If you don't finish the priming menu, the pump will not begin basal insulin delivery, nor does it alarm. It is equivalent to the pump being suspended...but you won't be able to see any indication of that in Nightscout as a remote monitoring parent other than Loop's temp basals not being set. Loop will not detect the prime screen issue and will keep sending temp basal messages...but the pump won't enact them. On Loop, you could notice it by the active IOB continually going down and then eventually negative IOB, as the basal is not delivered and the reservoir level remains constant. However, the temp basal graph will still show the bars from the temp basal commands loop has been sending. So, remember to finish those prime menu screens through to the end.","title":"MDT Priming and Sites"},{"location":"troubleshooting/priming/#priming-and-site-changes","text":"Loop uses event history and reservoir levels to determine how much insulin has actually been delivered through the pump, and correspondingly the Insulin On Board (IOB).","title":"Priming and Site Changes"},{"location":"troubleshooting/priming/#site-changes","text":"Priming Events and IOB Loop version 1.3.2 and newer will automatically detect prime events and the primed insulin will not be counted to IOB. You will need to have your Preferred Data Source set to Event History for the automatic detection of primes to work (does not apply to Omnipod, Minimed Only.) Reservoir Volumes will not detect prime events. If you are using a version of Loop older than v1.3.2 (or using Preferred Data Source of Reservoir Volume), you will need to be aware of the following regarding prime events at site changes: If you change sites and increase reservoir volume (i.e., start a new reservoir), don't worry. So long as you are putting in a reservoir that has more insulin than the old one, IOB will be accurate in Loop. When Loop sees a rewind and an increase in reservoir volume, it will not count any tubing primes as IOB. If you change sites but do NOT increase reservoir volume (i.e., you keep existing reservoir going), you will need to go into Loop's reservoir history and delete 30 minutes of continuous reservoir history including the prime event. By deleting 30 minutes of reservoir history, Loop will use Event History to determine insulin deliveries and IOB. If you cannot get the prime to clear from the IOB, operate in Open Loop mode until the insulin action duration time has passed. Deleting history is done by: (1) clicking on the Insulin Delivery Chart (2) selecting the Reservoir history screen (3) swiping to delete individual reservoir readings (4) delete at least 30 minutes of reservoir readings, including the readings that involved priming events","title":"Site Changes"},{"location":"troubleshooting/priming/#prime-menu","text":"Warning When you prime tubing on a Medtronic pump, make sure to complete the priming menu commands. In other words, finish all the prompts so that you get back to the (nearly blank) normal Medtronic pump screen. If you don't finish the priming menu, the pump will not begin basal insulin delivery, nor does it alarm. It is equivalent to the pump being suspended...but you won't be able to see any indication of that in Nightscout as a remote monitoring parent other than Loop's temp basals not being set. Loop will not detect the prime screen issue and will keep sending temp basal messages...but the pump won't enact them. On Loop, you could notice it by the active IOB continually going down and then eventually negative IOB, as the basal is not delivered and the reservoir level remains constant. However, the temp basal graph will still show the bars from the temp basal commands loop has been sending. So, remember to finish those prime menu screens through to the end.","title":"Prime Menu"},{"location":"troubleshooting/pump-errors/","text":"Medtronic Pump Errors \u2301 The Medtronic pumps are used and typically not under warranty. Use this section at your own risk. However, that said, some of the most common pump errors are repairable, or not actually a real problem. A21 error \u2301 This error message is common when a pump has been stored for a period of time without a battery. Most pumps will show an A21 error when you first purchase them on the used market. Not a big deal. Press the down arrow (also has the symbol of a light bulb on it) and the pump screen message will scroll down to let you know how to clear that error message (press ESC then ACT). If the message is coming up on a pump that hasn't been in storage, pull the battery out and replace with a fresh, new battery. Chances are your battery or battery cap are old. Look for signs of dirt or rust in the battery cap, give it a little cleaning. Display Tip When the pump screen has a little black/white bar on the right side, that is a scroll bar. Use the arrow keys on the right of the pump screen to scroll and see the additional information. Batt Out Limit \u2301 This error message \"battery out of limits\" has to do with the internal pump battery, not the AAA battery you replace. The internal battery cannot be replaced, and unfortunately also has a finite lifespan. The error message is more of an annoyance than a true problem. You can try to change the AAA battery faster. But, the worst-case scenario is that you'll have to re-enter the time and date when you get this message more often. (Don't forget to use RileyLink to set the time after you get this message.) Button Error \u2301 The Button Error message usually happens from water, moisture, or dust getting under the pump's button pad and causing button(s) to fail. The fix luckily is quite straight-forward and takes less than 30 minutes. Check out the fix here for a YouTube video or here for photo gallery The solution involves simply prying up the button pad's sticker face to expose the layers beneath. You can see some evidence of crud/rust on the underside of this button pad which caused the button error. After you finish your fix, another excellent idea is to make sure you add a length of clear packing tape across the front face of the pump to prevent errant water or dirt from having easy access to the button pad seams. Crack/Missing Piece Repairs \u2301 Another common issue on these Medtronic pumps are cracks and/or missing bits of plastic near the battery cap or reservoir sleeve. You can repair these fairly easily. For filling small cracks, Testor's plastic cement or Gorilla epoxy are good choices. For more extensive repairs to replace missing chunks of plastic, Gorilla epoxy or Sugru are excellent choices. You can use teflon thread tape on the battery cap to make sure the epoxy or Sugru don't stick to the battery cap, but still recreate the threads. The first photos are of a Sugru repair and second set of photos are Gorilla epoxy repair. Motor error \u2301 Often a motor error is the result of a poorly seated reservoir or tubing cap. If you get a motor error, the first thing you should do is detach from your infusion site. Remove and reseat the reservoir, prime again, and see if the motor error resolves. If it does not, try replacing the tubing cap on the reservoir (new tubing). If that does not resolve the motor error, also replace the entire reservoir. A33 error \u2301 Safety warning If you get this error, DO NOT push on the bulged out end cap. Always detach your tubing from your infusion set before addressing this error message. If you push on the end cap in an attempt to get it back flush, you may delivery a dangerous amount of insulin mistakenly. This error is a bit more involved to repair. The problem is that there is a loose drive support cap. Most of the time this error message will appear during a priming event as the end cap of the drive will slip, releasing the ability of the reservoir plunger to get pressure to delivery insulin. The pump senses the lack of pressure and delivers the A33 error. The solution is to UNHOOK from your site. See warning above. Remove reservoir and put your finger inside the reservoir sleeve. Push on the drive so that the end cap is pushed out the most possible. This will give your the most surface area possible to place the super glue GEL that you will use. (don't use regular super glue...it must be gel.) Remove the sticker that covers the end cap, save it for later because you can reattach when repair is completed. With the end cap pushed out, take some glue gel with the toothpick and apply it on the outside of the popped out cap . Be generous cause you can do this only once . Once you are done take a napkin and press hard the cap toward the pump so it can go back inside and keep it pressed for a few seconds. Then remove all the small parts of the napkin that has glued to the pump. Leave the pump to dry for about 10-15 minutes. Now to test whether the pumps was glued well. You have already waited about 10-15 minutes so put your finger back in and press hard the plunger. If you glued it well, the end cap will not move. If the cap goes out again, you have to glue one more time. If all looks well, put some glue back on top of the pump cap and reattach the sticker that was removed to start. A32 and E22 error loop \u2301 From what we know, this set of error codes seems like a pump killer. A call to Medtronic support gave this less than hopeful information: A32 - failure of flash memory E22 - software re-installation is necessary We don't have any reports of a good fix for these error codes. When seen, usually the E22 error comes up and as soon as it is cleared, the A32 error comes up. And the loop continues with a pump restart.","title":"MDT Pump Errors"},{"location":"troubleshooting/pump-errors/#medtronic-pump-errors","text":"The Medtronic pumps are used and typically not under warranty. Use this section at your own risk. However, that said, some of the most common pump errors are repairable, or not actually a real problem.","title":"Medtronic Pump Errors"},{"location":"troubleshooting/pump-errors/#a21-error","text":"This error message is common when a pump has been stored for a period of time without a battery. Most pumps will show an A21 error when you first purchase them on the used market. Not a big deal. Press the down arrow (also has the symbol of a light bulb on it) and the pump screen message will scroll down to let you know how to clear that error message (press ESC then ACT). If the message is coming up on a pump that hasn't been in storage, pull the battery out and replace with a fresh, new battery. Chances are your battery or battery cap are old. Look for signs of dirt or rust in the battery cap, give it a little cleaning. Display Tip When the pump screen has a little black/white bar on the right side, that is a scroll bar. Use the arrow keys on the right of the pump screen to scroll and see the additional information.","title":"A21 error"},{"location":"troubleshooting/pump-errors/#batt-out-limit","text":"This error message \"battery out of limits\" has to do with the internal pump battery, not the AAA battery you replace. The internal battery cannot be replaced, and unfortunately also has a finite lifespan. The error message is more of an annoyance than a true problem. You can try to change the AAA battery faster. But, the worst-case scenario is that you'll have to re-enter the time and date when you get this message more often. (Don't forget to use RileyLink to set the time after you get this message.)","title":"Batt Out Limit"},{"location":"troubleshooting/pump-errors/#button-error","text":"The Button Error message usually happens from water, moisture, or dust getting under the pump's button pad and causing button(s) to fail. The fix luckily is quite straight-forward and takes less than 30 minutes. Check out the fix here for a YouTube video or here for photo gallery The solution involves simply prying up the button pad's sticker face to expose the layers beneath. You can see some evidence of crud/rust on the underside of this button pad which caused the button error. After you finish your fix, another excellent idea is to make sure you add a length of clear packing tape across the front face of the pump to prevent errant water or dirt from having easy access to the button pad seams.","title":"Button Error"},{"location":"troubleshooting/pump-errors/#crackmissing-piece-repairs","text":"Another common issue on these Medtronic pumps are cracks and/or missing bits of plastic near the battery cap or reservoir sleeve. You can repair these fairly easily. For filling small cracks, Testor's plastic cement or Gorilla epoxy are good choices. For more extensive repairs to replace missing chunks of plastic, Gorilla epoxy or Sugru are excellent choices. You can use teflon thread tape on the battery cap to make sure the epoxy or Sugru don't stick to the battery cap, but still recreate the threads. The first photos are of a Sugru repair and second set of photos are Gorilla epoxy repair.","title":"Crack/Missing Piece Repairs"},{"location":"troubleshooting/pump-errors/#motor-error","text":"Often a motor error is the result of a poorly seated reservoir or tubing cap. If you get a motor error, the first thing you should do is detach from your infusion site. Remove and reseat the reservoir, prime again, and see if the motor error resolves. If it does not, try replacing the tubing cap on the reservoir (new tubing). If that does not resolve the motor error, also replace the entire reservoir.","title":"Motor error"},{"location":"troubleshooting/pump-errors/#a33-error","text":"Safety warning If you get this error, DO NOT push on the bulged out end cap. Always detach your tubing from your infusion set before addressing this error message. If you push on the end cap in an attempt to get it back flush, you may delivery a dangerous amount of insulin mistakenly. This error is a bit more involved to repair. The problem is that there is a loose drive support cap. Most of the time this error message will appear during a priming event as the end cap of the drive will slip, releasing the ability of the reservoir plunger to get pressure to delivery insulin. The pump senses the lack of pressure and delivers the A33 error. The solution is to UNHOOK from your site. See warning above. Remove reservoir and put your finger inside the reservoir sleeve. Push on the drive so that the end cap is pushed out the most possible. This will give your the most surface area possible to place the super glue GEL that you will use. (don't use regular super glue...it must be gel.) Remove the sticker that covers the end cap, save it for later because you can reattach when repair is completed. With the end cap pushed out, take some glue gel with the toothpick and apply it on the outside of the popped out cap . Be generous cause you can do this only once . Once you are done take a napkin and press hard the cap toward the pump so it can go back inside and keep it pressed for a few seconds. Then remove all the small parts of the napkin that has glued to the pump. Leave the pump to dry for about 10-15 minutes. Now to test whether the pumps was glued well. You have already waited about 10-15 minutes so put your finger back in and press hard the plunger. If you glued it well, the end cap will not move. If the cap goes out again, you have to glue one more time. If all looks well, put some glue back on top of the pump cap and reattach the sticker that was removed to start.","title":"A33 error"},{"location":"troubleshooting/pump-errors/#a32-and-e22-error-loop","text":"From what we know, this set of error codes seems like a pump killer. A call to Medtronic support gave this less than hopeful information: A32 - failure of flash memory E22 - software re-installation is necessary We don't have any reports of a good fix for these error codes. When seen, usually the E22 error comes up and as soon as it is cleared, the A32 error comes up. And the loop continues with a pump restart.","title":"A32 and E22 error loop"},{"location":"troubleshooting/time-change/","text":"Travel and Timezones \u2301 Airports \u2301 RileyLinks have no problem going through any of the airport security systems. You can carry it with you in the airplane cabin and it can go through the xray scanner that your carry-on bags go through. Airplane Mode \u2301 Nothing wrong with airplane mode, but many people forget about it at the time they travel. So, you can do this simple preparation step now: Turn airplane mode on. Then make sure your Bluetooth is still slid \u201con\u201d. If Bluetooth isn\u2019t on, then go slide it on again. Now go ahead and turn airplane mode off again. Why did we just do that? Because in older versions of iOS, airplane mode turned off the first time you ever use it. But, if you remember to turn Bluetooth back on while in airplane mode, two things happen (1) Dexcom and Loop will work while in airplane and (2) airplane mode will \u201cremember\u201d the next time that you like Bluetooth left on in airplane mode and will not turn it off the next time you slide airplane mode on. So now you\u2019ve just prevented yourself from forgetting to turn Bluetooth on the next time you fly and are in a hurry to meet your lovely seat mate and stow your luggage. You can safely follow cabin instructions and put phone in airplane mode without losing Loop or Dexcom. Changing Timezones and Daylight Savings Time \u2301 Loop is built to operate fully across time zone and daylight savings time changes. When traveling, there is no urgency to update the pump's time to match the wall-clocks in your geography. Configuration schedules\u2014basal rates, target ranges, carb ratios, and insulin sensitivities all remain in the original time zone until modified by Loop command. The app's graphs and status will always display in the time zone of the iPhone, and Loop will understand the difference in offset between the two, highlighting it when attempting to change configuration schedules. When you're ready to update the pump's time, use the Loop Change Time Zone command. This will also shift your configuration schedules to the current time zone. Medtronic Users Do not use the Medtronic pump menus to change your pump's time when Looping. iPhone \u2301 Loop will assume your iPhone's time (UTC, not timezone) is always correct. This theoretically may not be the case if a nearby cell tower is improperly configured (though there are likely resilience mechanisms in iOS to handle this). Automatic time setting can always be disabled in Settings. Minimed Pump and CGM \u2301 The Minimed pump doesn't expose a universal clock, instead it exposes the components of a date (YMDHIS). It has no concept of political time zones, and just continues to increment its components on schedule. Therefore, Loop assumes that the pump's date, until changed, remains at a fixed offset from UTC. That offset is stored by Loop the first time the pump ID is changed, and every time the pump's time is changed using the \"Change Time Zone\" command. Dexcom CGM \u2301 No particular input is needed on your part for Loop to work with Dexcom CGM data. All times are UTC. However for Dexcom receiver users, at time changes you may want to manually change your receiver's time setting just so the time visually appears correct when you are viewing the screen.","title":"Time Changes"},{"location":"troubleshooting/time-change/#travel-and-timezones","text":"","title":"Travel and Timezones"},{"location":"troubleshooting/time-change/#airports","text":"RileyLinks have no problem going through any of the airport security systems. You can carry it with you in the airplane cabin and it can go through the xray scanner that your carry-on bags go through.","title":"Airports"},{"location":"troubleshooting/time-change/#airplane-mode","text":"Nothing wrong with airplane mode, but many people forget about it at the time they travel. So, you can do this simple preparation step now: Turn airplane mode on. Then make sure your Bluetooth is still slid \u201con\u201d. If Bluetooth isn\u2019t on, then go slide it on again. Now go ahead and turn airplane mode off again. Why did we just do that? Because in older versions of iOS, airplane mode turned off the first time you ever use it. But, if you remember to turn Bluetooth back on while in airplane mode, two things happen (1) Dexcom and Loop will work while in airplane and (2) airplane mode will \u201cremember\u201d the next time that you like Bluetooth left on in airplane mode and will not turn it off the next time you slide airplane mode on. So now you\u2019ve just prevented yourself from forgetting to turn Bluetooth on the next time you fly and are in a hurry to meet your lovely seat mate and stow your luggage. You can safely follow cabin instructions and put phone in airplane mode without losing Loop or Dexcom.","title":"Airplane Mode"},{"location":"troubleshooting/time-change/#changing-timezones-and-daylight-savings-time","text":"Loop is built to operate fully across time zone and daylight savings time changes. When traveling, there is no urgency to update the pump's time to match the wall-clocks in your geography. Configuration schedules\u2014basal rates, target ranges, carb ratios, and insulin sensitivities all remain in the original time zone until modified by Loop command. The app's graphs and status will always display in the time zone of the iPhone, and Loop will understand the difference in offset between the two, highlighting it when attempting to change configuration schedules. When you're ready to update the pump's time, use the Loop Change Time Zone command. This will also shift your configuration schedules to the current time zone. Medtronic Users Do not use the Medtronic pump menus to change your pump's time when Looping.","title":"Changing Timezones and Daylight Savings Time"},{"location":"troubleshooting/time-change/#iphone","text":"Loop will assume your iPhone's time (UTC, not timezone) is always correct. This theoretically may not be the case if a nearby cell tower is improperly configured (though there are likely resilience mechanisms in iOS to handle this). Automatic time setting can always be disabled in Settings.","title":"iPhone"},{"location":"troubleshooting/time-change/#minimed-pump-and-cgm","text":"The Minimed pump doesn't expose a universal clock, instead it exposes the components of a date (YMDHIS). It has no concept of political time zones, and just continues to increment its components on schedule. Therefore, Loop assumes that the pump's date, until changed, remains at a fixed offset from UTC. That offset is stored by Loop the first time the pump ID is changed, and every time the pump's time is changed using the \"Change Time Zone\" command.","title":"Minimed Pump and CGM"},{"location":"troubleshooting/time-change/#dexcom-cgm","text":"No particular input is needed on your part for Loop to work with Dexcom CGM data. All times are UTC. However for Dexcom receiver users, at time changes you may want to manually change your receiver's time setting just so the time visually appears correct when you are viewing the screen.","title":"Dexcom CGM"},{"location":"troubleshooting/uncertain-bolus/","text":"Pod \"Uncertain Bolus\" \u2301 At some point in Loop use, you may run into the situation where you try to bolus and get a message back in Loop that the bolus was \"uncertain\". Why does this happen? \u2301 An \"uncertain bolus\" is when the bolus command was sent by Loop, but Loop never heard back from the pod with a comfirmation message that the command was received. Therefore, Loop is uncertain about the status of that command. What does Loop do when this happens? \u2301 Initially, Loop assumes the worst (conservative path) and starts tracking things as if the bolus has been delivered. If Loop gets a status response from the pod to a different command while the pod is still bolusing, Loop will use the delivery glags that indicate \"bolusing\" or \"not bolusing\" to become certain about the delivery status. If no status response is received that changes the uncertainty, then the dose is considered delivered and is finalized. What should you do when this happens? \u2301 There isn't much you can do in this situation presently. You can \"enable bolus beeps\" or listen for the clicking of a bolus while it is happening. That is one good method to get a secondary confirmation by audio sleuthing. If you are sure that the bolus failed, you can delete the bolus record from Health app and Pod's event history. What is Loop dev doing? \u2301 There are some various methods that could help more quickly resolve the uncertainty, but none of them are 100% perfect. There will be some changes coming to dev branch to help with these \"uncertain boluses\", but they won't be visible in the user interface...they will be under-the-hood of Loop code.","title":"Pod Uncertain Boluses"},{"location":"troubleshooting/uncertain-bolus/#pod-uncertain-bolus","text":"At some point in Loop use, you may run into the situation where you try to bolus and get a message back in Loop that the bolus was \"uncertain\".","title":"Pod \"Uncertain Bolus\""},{"location":"troubleshooting/uncertain-bolus/#why-does-this-happen","text":"An \"uncertain bolus\" is when the bolus command was sent by Loop, but Loop never heard back from the pod with a comfirmation message that the command was received. Therefore, Loop is uncertain about the status of that command.","title":"Why does this happen?"},{"location":"troubleshooting/uncertain-bolus/#what-does-loop-do-when-this-happens","text":"Initially, Loop assumes the worst (conservative path) and starts tracking things as if the bolus has been delivered. If Loop gets a status response from the pod to a different command while the pod is still bolusing, Loop will use the delivery glags that indicate \"bolusing\" or \"not bolusing\" to become certain about the delivery status. If no status response is received that changes the uncertainty, then the dose is considered delivered and is finalized.","title":"What does Loop do when this happens?"},{"location":"troubleshooting/uncertain-bolus/#what-should-you-do-when-this-happens","text":"There isn't much you can do in this situation presently. You can \"enable bolus beeps\" or listen for the clicking of a bolus while it is happening. That is one good method to get a secondary confirmation by audio sleuthing. If you are sure that the bolus failed, you can delete the bolus record from Health app and Pod's event history.","title":"What should you do when this happens?"},{"location":"troubleshooting/uncertain-bolus/#what-is-loop-dev-doing","text":"There are some various methods that could help more quickly resolve the uncertainty, but none of them are 100% perfect. There will be some changes coming to dev branch to help with these \"uncertain boluses\", but they won't be visible in the user interface...they will be under-the-hood of Loop code.","title":"What is Loop dev doing?"},{"location":"troubleshooting/yellow-red-loop/","text":"Red Loops \u2301 Let's divide this page up into two parts. The first part deals with individual red loops. Like it just happened and you want to solve it. The second part will deal with situations where you are repeatedly having red loops \"more often\" than you think is \"normal\" (both of those, of course, are subjective terms). Resolving a Red Loop \u2301 So you are here for help with getting your Loop green again? It's red and not working? Wondering what is happening? You can click on the red loop icon to read an error message that you may or may not understand. If you understand it, great...that should help you fix the problem. If you don't understand it, then there are two options to fix the red loop; the first is quick and easy, the second is more in-depth. Let's look at both. Omnipod Users : Do not quickly decide to pull a pod that isn't responding and has a red loop. Usually the issue is that the RileyLink compatible device needs a reset as described below in Option 1, rather than the pod needing to be changed. If you don't fix the device's problem first, the problem may carry forward into a failed pod-pairing attempt because it still isn't working. So, please try getting the device working properly before deciding to ditch a pod because of a red loop. Option 1: Easy Steps \u2301 You don't care what the heck is causing the issue, you just want to get on with life as quickly as possible? Ok, fair enough, then do the following steps: Turn off Bluetooth on your phone and then turn it right back on again. Close your Loop app (upswiping it in the iPhone's app selector) and reopen it. If you have a different device, make sure you know how to power-cycle the device. For RileyLink (without wireless charging) use a small pointy object to carefully move the slider away from the charging port and then back up towards the charging port. A paperclip on the keyring can provide the help you need to reach the switch in the recessed case, and double as a screaming pod silencer tool . Turn your RileyLink off/on at its physical power switch located on the side of the RileyLink. That's pretty much all you need to do for option 1 to restore a green Loop within 5 minutes, 99% of the time. You know Loop is working again by waiting 5 minutes for a green Loop or (if you're impatient) issue a \"Read Pod Status\" or \"Button Press\" successfully through the Pod/Pump menu. Option 2: Look for Cause \u2301 So if Option 1 didn't work to fix your problem...next you'll need to look a little deeper. There can be a variety of causes for why Option 1 did not work to restore your Loop's function, so you'll need to sort out the root cause. There are a few basic categories: RileyLink is broken CGM values are not being collected by Loop Pump is not responding RileyLink is broken \u2301 How can you tell if your RileyLink has a problem? The answer is mostly within the LED lights that display on the board. Some information is listed below, but also review the FAQs at getrileylink.org . If you have a different RileyLink compatible device, please check the appropriate site for troubleshooting help. Red light : comes on during charging and will turn off/on periodically, while still plugged in, after charge is complete. Green light : Indicates an active BT connection with the phone. You want the green light to stay on all the time on the RileyLink. If the green light is not on, then make sure your iPhone's bluetooth is still switched on. Blue light : The blue light will flash off/on periodically when the RileyLink and pump are actively communicating...it should NOT be always on. If your blue light is stuck on, that is an indication of a problem on the board. Try looking for signs of damage or debris that may be causing a short on the board. Clean the board with rubbing alcohol (unplug the battery first ). If you still can't get the blue light off, then contact GetRileyLink for help or check out RileyLink Compatible Devices for replacement options. CGM Values are not being collected by Loop \u2301 New transmitter \u2301 If you recently changed a transmitter, you need to also update your Loop settings to reflect the new transmitter ID. Go to the CGM section of Loop settings and Delete CGM (it's a button on the bottom of that page). Then use the Add CGM in Loop settings to include the new transmitter ID. Firefly-style transmitter \u2301 Leaving this in for historical interest only. It illustrates the need to keep Loop up-to-date. Who knows what the next hardware change will be. Enough time has passed that everyone's Loop app must be newer. If you have not updated your Loop app since late July 2019 and use Dexcom G6, you will need to update your Loop app to continue to be able to loop without internet connection. In July 2019, we started to see a new style of Dexcom G6 transmitters on the market. These new transmitters required a rework of some of the Loop's code to continue to \"spy\" on the transmitter. Without the update, your Loop will not get CGM data unless it is pulling from Share servers (which is not a recommended mode of operation). So, update your Loop app if you have a new transmitter type and haven't updated since July 2019. Delete Share account \u2301 Finally, we see a lot of errors reported because people have problems with their Share server information in Loop app. Please delete your Share account information from within Loop settings. In other words, the credentials portion of the Share account info, as shown in the screenshot below, should say Tap to Set and not have your account info. It is unnecessary to have this portion filled out as local, non-internet spying of a transmitter is the preferred CGM source anyways. In fact, by leaving this information out, it will help you remember to change your transmitter ID when you change transmitters because CGM data won't appear in Loop. By not including Share account in Loop, you will prevent yourself from accidentally becoming internet dependent. Pump is not responding \u2301 The obvious fix is to make sure the RileyLink compatible device is not so far away from the pump or pod that they cannot communicate. Assuming you've addressed this, then you can move on to other steps. Omnipod Loopers : Option 1 almost always fixes this issue. Medtronic Loopers : you may have times when the pump is not responding with \"decoding\" errors or various other messages about pump responses. Try the following: Change pump battery. Low pump battery will cause radio communications to fail. Use the Change Time command in the pump menu to update the pump's clock. If you've accidentally changed the pump's time in the pump itself, this will get the Loop app and pump back in sync. If using a x23 or x54 pump, try deleting all the IDs under the \"Other Devices\" submenu in the pump's \"Connect Devices\" menu. Then go to the RileyLink menu and use the MySentry pairing command to get a fresh ID issued. Follow the directions listed in the MySentry pairing command's screen to scan for devices. A fresh ID can help prevent recurring red loops for x23 and x54 users, particularly if they started to occur after a recent Loop update. Make sure the following are checked in the pump: Your pump cannot be suspended. Resume insulin deliveries. Temp basal type must be set to unit/hour, not percent, in pump's Basal menu. Resolving Frequent Red Loops \u2301 Here's some things to check if you have frequent red loops: Try deleting your Nightscout account from Loop settings and see if your Loop stops having red loops. If it does, then you'll need to assess what's going wrong in your Nightscout site and fix it. Most of the time, your database is getting too big and cleanup is required. If you opted for the free DIY Nightscout, you will need to clean your database once or twice a year. Follow the Nightscout Database cleanup steps . If your database gets backlogged (or Nightscout otherwise isn't working properly), Loop can get clogged up with a bunch of unfinished Nightscout uploads. This clogged condition can cause red loops. So, make sure you are periodically checking your database size (and that the dbsize keyword is in your ENABLE list and cleaning it. Is your RileyLink battery plugged in all the way on the board? One Looper recently posted that her RileyLink battery connection needed to be reseated after several years of service. Has your RL been fully charged? Try charging your RL for an hour or two, make sure the red light comes on while charging. Try a new charger or cable. Oddly, some people have found that turning off Siri integrations for Loop and Dexcom apps in your iPhone settings has helped. This may be coincidental, but if you're still having trouble, you might want to try it. Check for sources of wireless interference. If you have a certain environment that seems to have more drops than others, it is likely that there is a source of wireless communication interfering with your Loop. Lots of Medtronic Loopers in a room together will often interfere with each other and get \"cross-talk\" red loop error messages. If it is a bedroom at night causing problems, try moving other wireless devices such as routers or baby monitors farther away from where you and your RileyLink compatible device. Posting for Help \u2301 Before you post on Looped group for help with a red loop, please make sure you've tried Option 1 and have restarted your RileyLink and Loop app. Before you post for help, please also check your Nightscout status including database size. This step is often overlooked and yet solves a lot of problems. When posting for help, include two screenshots of Loop's main screen; one with the red loop's error message and the other just the plain Loop main screen. Include a detailed description of what you have tried doing from the troubleshooting list above. For example, state if you've double checked the transmitter ID, deleted the Share account info from Loop settings so that we can rule out some of the causes of CGM issues.","title":"Red Loop"},{"location":"troubleshooting/yellow-red-loop/#red-loops","text":"Let's divide this page up into two parts. The first part deals with individual red loops. Like it just happened and you want to solve it. The second part will deal with situations where you are repeatedly having red loops \"more often\" than you think is \"normal\" (both of those, of course, are subjective terms).","title":"Red Loops"},{"location":"troubleshooting/yellow-red-loop/#resolving-a-red-loop","text":"So you are here for help with getting your Loop green again? It's red and not working? Wondering what is happening? You can click on the red loop icon to read an error message that you may or may not understand. If you understand it, great...that should help you fix the problem. If you don't understand it, then there are two options to fix the red loop; the first is quick and easy, the second is more in-depth. Let's look at both. Omnipod Users : Do not quickly decide to pull a pod that isn't responding and has a red loop. Usually the issue is that the RileyLink compatible device needs a reset as described below in Option 1, rather than the pod needing to be changed. If you don't fix the device's problem first, the problem may carry forward into a failed pod-pairing attempt because it still isn't working. So, please try getting the device working properly before deciding to ditch a pod because of a red loop.","title":"Resolving a Red Loop"},{"location":"troubleshooting/yellow-red-loop/#option-1-easy-steps","text":"You don't care what the heck is causing the issue, you just want to get on with life as quickly as possible? Ok, fair enough, then do the following steps: Turn off Bluetooth on your phone and then turn it right back on again. Close your Loop app (upswiping it in the iPhone's app selector) and reopen it. If you have a different device, make sure you know how to power-cycle the device. For RileyLink (without wireless charging) use a small pointy object to carefully move the slider away from the charging port and then back up towards the charging port. A paperclip on the keyring can provide the help you need to reach the switch in the recessed case, and double as a screaming pod silencer tool . Turn your RileyLink off/on at its physical power switch located on the side of the RileyLink. That's pretty much all you need to do for option 1 to restore a green Loop within 5 minutes, 99% of the time. You know Loop is working again by waiting 5 minutes for a green Loop or (if you're impatient) issue a \"Read Pod Status\" or \"Button Press\" successfully through the Pod/Pump menu.","title":"Option 1: Easy Steps"},{"location":"troubleshooting/yellow-red-loop/#option-2-look-for-cause","text":"So if Option 1 didn't work to fix your problem...next you'll need to look a little deeper. There can be a variety of causes for why Option 1 did not work to restore your Loop's function, so you'll need to sort out the root cause. There are a few basic categories: RileyLink is broken CGM values are not being collected by Loop Pump is not responding","title":"Option 2: Look for Cause"},{"location":"troubleshooting/yellow-red-loop/#rileylink-is-broken","text":"How can you tell if your RileyLink has a problem? The answer is mostly within the LED lights that display on the board. Some information is listed below, but also review the FAQs at getrileylink.org . If you have a different RileyLink compatible device, please check the appropriate site for troubleshooting help. Red light : comes on during charging and will turn off/on periodically, while still plugged in, after charge is complete. Green light : Indicates an active BT connection with the phone. You want the green light to stay on all the time on the RileyLink. If the green light is not on, then make sure your iPhone's bluetooth is still switched on. Blue light : The blue light will flash off/on periodically when the RileyLink and pump are actively communicating...it should NOT be always on. If your blue light is stuck on, that is an indication of a problem on the board. Try looking for signs of damage or debris that may be causing a short on the board. Clean the board with rubbing alcohol (unplug the battery first ). If you still can't get the blue light off, then contact GetRileyLink for help or check out RileyLink Compatible Devices for replacement options.","title":"RileyLink is broken"},{"location":"troubleshooting/yellow-red-loop/#cgm-values-are-not-being-collected-by-loop","text":"","title":"CGM Values are not being collected by Loop"},{"location":"troubleshooting/yellow-red-loop/#new-transmitter","text":"If you recently changed a transmitter, you need to also update your Loop settings to reflect the new transmitter ID. Go to the CGM section of Loop settings and Delete CGM (it's a button on the bottom of that page). Then use the Add CGM in Loop settings to include the new transmitter ID.","title":"New transmitter"},{"location":"troubleshooting/yellow-red-loop/#firefly-style-transmitter","text":"Leaving this in for historical interest only. It illustrates the need to keep Loop up-to-date. Who knows what the next hardware change will be. Enough time has passed that everyone's Loop app must be newer. If you have not updated your Loop app since late July 2019 and use Dexcom G6, you will need to update your Loop app to continue to be able to loop without internet connection. In July 2019, we started to see a new style of Dexcom G6 transmitters on the market. These new transmitters required a rework of some of the Loop's code to continue to \"spy\" on the transmitter. Without the update, your Loop will not get CGM data unless it is pulling from Share servers (which is not a recommended mode of operation). So, update your Loop app if you have a new transmitter type and haven't updated since July 2019.","title":"Firefly-style transmitter"},{"location":"troubleshooting/yellow-red-loop/#delete-share-account","text":"Finally, we see a lot of errors reported because people have problems with their Share server information in Loop app. Please delete your Share account information from within Loop settings. In other words, the credentials portion of the Share account info, as shown in the screenshot below, should say Tap to Set and not have your account info. It is unnecessary to have this portion filled out as local, non-internet spying of a transmitter is the preferred CGM source anyways. In fact, by leaving this information out, it will help you remember to change your transmitter ID when you change transmitters because CGM data won't appear in Loop. By not including Share account in Loop, you will prevent yourself from accidentally becoming internet dependent.","title":"Delete Share account"},{"location":"troubleshooting/yellow-red-loop/#pump-is-not-responding","text":"The obvious fix is to make sure the RileyLink compatible device is not so far away from the pump or pod that they cannot communicate. Assuming you've addressed this, then you can move on to other steps. Omnipod Loopers : Option 1 almost always fixes this issue. Medtronic Loopers : you may have times when the pump is not responding with \"decoding\" errors or various other messages about pump responses. Try the following: Change pump battery. Low pump battery will cause radio communications to fail. Use the Change Time command in the pump menu to update the pump's clock. If you've accidentally changed the pump's time in the pump itself, this will get the Loop app and pump back in sync. If using a x23 or x54 pump, try deleting all the IDs under the \"Other Devices\" submenu in the pump's \"Connect Devices\" menu. Then go to the RileyLink menu and use the MySentry pairing command to get a fresh ID issued. Follow the directions listed in the MySentry pairing command's screen to scan for devices. A fresh ID can help prevent recurring red loops for x23 and x54 users, particularly if they started to occur after a recent Loop update. Make sure the following are checked in the pump: Your pump cannot be suspended. Resume insulin deliveries. Temp basal type must be set to unit/hour, not percent, in pump's Basal menu.","title":"Pump is not responding"},{"location":"troubleshooting/yellow-red-loop/#resolving-frequent-red-loops","text":"Here's some things to check if you have frequent red loops: Try deleting your Nightscout account from Loop settings and see if your Loop stops having red loops. If it does, then you'll need to assess what's going wrong in your Nightscout site and fix it. Most of the time, your database is getting too big and cleanup is required. If you opted for the free DIY Nightscout, you will need to clean your database once or twice a year. Follow the Nightscout Database cleanup steps . If your database gets backlogged (or Nightscout otherwise isn't working properly), Loop can get clogged up with a bunch of unfinished Nightscout uploads. This clogged condition can cause red loops. So, make sure you are periodically checking your database size (and that the dbsize keyword is in your ENABLE list and cleaning it. Is your RileyLink battery plugged in all the way on the board? One Looper recently posted that her RileyLink battery connection needed to be reseated after several years of service. Has your RL been fully charged? Try charging your RL for an hour or two, make sure the red light comes on while charging. Try a new charger or cable. Oddly, some people have found that turning off Siri integrations for Loop and Dexcom apps in your iPhone settings has helped. This may be coincidental, but if you're still having trouble, you might want to try it. Check for sources of wireless interference. If you have a certain environment that seems to have more drops than others, it is likely that there is a source of wireless communication interfering with your Loop. Lots of Medtronic Loopers in a room together will often interfere with each other and get \"cross-talk\" red loop error messages. If it is a bedroom at night causing problems, try moving other wireless devices such as routers or baby monitors farther away from where you and your RileyLink compatible device.","title":"Resolving Frequent Red Loops"},{"location":"troubleshooting/yellow-red-loop/#posting-for-help","text":"Before you post on Looped group for help with a red loop, please make sure you've tried Option 1 and have restarted your RileyLink and Loop app. Before you post for help, please also check your Nightscout status including database size. This step is often overlooked and yet solves a lot of problems. When posting for help, include two screenshots of Loop's main screen; one with the red loop's error message and the other just the plain Loop main screen. Include a detailed description of what you have tried doing from the troubleshooting list above. For example, state if you've double checked the transmitter ID, deleted the Share account info from Loop settings so that we can rule out some of the causes of CGM issues.","title":"Posting for Help"}]}